#********************************************************************
# Wrapper License Properties (Ignored by Community Edition)
#********************************************************************
# Include file problems can be debugged by removing the first '#'
#  from the following line:
##include.debug
#include ../conf/wrapper-license.conf
#include ../conf/wrapper-license-%WRAPPER_HOST_NAME%.conf

#********************************************************************
# Wrapper Java Properties
#********************************************************************
# Java Application
# 指定要运行的Java，如果你不想设置环境变量的话，你也可以指定JDK的bin文件路径
wrapper.java.command=java

# Tell the Wrapper to log the full generated Java command line.
#wrapper.java.command.loglevel=INFO
# Java Main class.  This class must implement the WrapperListener interface
#  or guarantee that the WrapperManager class is initialized.  Helper
#  classes are provided to do this for you.  See the Integration section
#  of the documentation for details.
# 指定要运行的类，这个类必须实现WrapperListener接口和接口中的start和stop方法，
# 通过WrapperManager类来初始化服务。如果启动服务过程中出现与不能取得JVM信息的情况，
# 可能是接口实现的问题。
wrapper.java.mainclass=org.tanukisoftware.wrapper.test.Main

# Java Classpath (include wrapper.jar)  Add class path elements as
#  needed starting from 1
# 配置Java的类路径，这里的将wrapper.jar也包含在内，这里可以设置参数的位置，
# 而且这个位置必须得从1 开始，不能跳过，必须顺序指定，指定类路径的时候还有根据
# 依赖关系来排列，被依赖的排在前面，否则会出现ClassNotFoundException的错误，
# 这里支持觉得路径和相对路径，也支持通配符"*"，
# 比如wrapper.java.classpath.1=……/lib/wrapper*，不过这个通配符只能用于匹配
# 文件名，不能用于匹配文件夹名称。
wrapper.java.classpath.1=../lib/wrappertest.jar
wrapper.java.classpath.2=../lib/wrapper.jar
..\..\lib\commons-lang-2.4.jar;^
..\..\lib\commons-logging-1.0.3.jar;^
..\..\lib\commons-logging-1.1.1.jar;^
..\..\lib\javolution-5.3.1.jar;^
..\..\lib\mina-core-2.0.0-M6.jar;^
..\..\lib\mina-example-2.0.0-M6.jar;^
..\..\lib\mysql-connector-java-5.1.7-bin.jar;^
..\..\lib\proxool-0.9.1.jar;^
..\..\lib\proxool-cglib.jar;^
..\..\lib\slf4j-api-1.5.2.jar;^
..\..\lib\slf4j-simple-1.5.0.jar;^
..\..\lib\xpp3_min-1.1.4c.jar;^
..\..\lib\xstream-1.3.1.jar;^
..\..\lib\quartz-1.6.6.jar;^
..\..\lib\server.jar ^

# Java Library Path (location of Wrapper.DLL or libwrapper.so)
# 指定Wrapper自带的类库文件(native lib)存放文件夹，比如Wrapper.DLL文件等，
# 只要指定到对应的上级目录名称就行，支持通配符。
wrapper.java.library.path.1=../lib

# Java Bits.  On applicable platforms, tells the JVM to run in 32 or 64-bit mode.
wrapper.java.additional.auto_bits=TRUE

# Java Additional Parameters
#wrapper.java.additional.1=

# Initial Java Heap Size (in MB)
wrapper.java.initmemory=128

# Maximum Java Heap Size (in MB)
wrapper.java.maxmemory=512

# Application parameters.  Add parameters as needed starting from 1
# 指定运行类的main方法参数。
wrapper.app.parameter.1=

#********************************************************************
# Wrapper Logging Properties
#********************************************************************
# Enables Debug output from the Wrapper.
# wrapper.debug=TRUE

# Format of output for the console.  (See docs for formats)
wrapper.console.format=PM

# Log Level for console output.  (See docs for log levels)
# 配置控制台的显示信息的级别，NONE不显示任何输出信息，FATAL只显示致命的错误消息，
# ERROR显示所有的错误消息，STATUS显示服务状态的改变，包括服务启动和停止等信息，
# INFO显示所有程序输出的信息和JVM显示的信息，如果程序无法正常启动，
# 可以使用DEBUG显示详细的调试信息。
wrapper.console.loglevel=INFO

# Log file to use for wrapper output logging.
wrapper.logfile=../logs/wrapper.log

# Format of output for the log file.  (See docs for formats)
wrapper.logfile.format=LPTM

# Log Level for log file output.  (See docs for log levels)
# 配置日志记录文件要记录的输出信息的级别，参数值和wrapper.console.loglevel功能一致
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
# 配置日志文件的最大大小，如果为0表示不限制日志文件的大小，支持标记符，“k”代表KB，
# “m”代表MB，如果要设置最大大小为100KB的话可以这样：wrapper.logfile.maxsize=100k
wrapper.logfile.maxsize=10m

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=0

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=NONE

#********************************************************************
# Wrapper General Properties
#********************************************************************
# Allow for the use of non-contiguous numbered properties
wrapper.ignore_sequence_gaps=TRUE

# Title to use when running as a console
# 控制台窗口显示标题
wrapper.console.title=Test Wrapper Sample Application

#********************************************************************
# Wrapper Windows NT/2000/XP Service Properties
#********************************************************************
# WARNING - Do not modify any of these properties when an application
#  using this configuration file has been installed as a service.
#  Please uninstall the service before modifying this section.  The
#  service can then be reinstalled.

# Name of the service
# 系统服务的名称
wrapper.name=testwrapper

# Display name of the service
# 在服务管理中显示的名称
wrapper.displayname=Test Wrapper Sample Application

# Description of the service
# 在服务管理器显示服务的描述信息
wrapper.description=Test Wrapper Sample Application Description

# Service dependencies.  Add dependencies as needed starting from 1
wrapper.ntservice.dependency.1=

# Mode in which the service is installed.  AUTO_START, DELAY_START or DEMAND_START
# 配置服务启动方式，可以选择AUTO_START（自动）和DEMAND_START（手动）两种方式。默认为自动。
wrapper.ntservice.starttype=AUTO_START

# Allow the service to interact with the desktop.
wrapper.ntservice.interactive=false

######################################################################################
#wrapper.java.command=java： 指定要运行的Java，如果你不想设置环境变量的话，你也可以指定JDK的bin文件路径
#wrapper.java.mainclass=test.Main： 指定要运行的类，这个类必须实现WrapperListener接口和接口中的start和stop方法，通过WrapperManager类来初始化服务。如果启动服务过程中出现与不能取得JVM信息的情况，可能是接口实现的问题。
#wrapper.java.classpath.1=……/lib/wrapper.jar：配置Java的类路径，这里的将wrapper.jar也包含在内，这里可以设置参数的位置，而且这个位置必须得从1 开始，不能跳过，必须顺序指定，指定类路径的时候还有根据依赖关系来排列，被依赖的排在前面，否则会出现ClassNotFoundException的错误，这里支持觉得路径和相对路径，也支持通配符"*"，比如wrapper.java.classpath.1=……/lib/wrapper*，不过这个通配符只能用于匹配文件名，不能用于匹配文件夹名称。
#wrapper.java.library.path.1=……/lib：指定Wrapper自带的类库文件存放文件夹，比如Wrapper.DLL文件等，只要指定到对应的上级目录名称就行，支持通配符。
#wrapper.java.library.path.1=……/lib：指定Wrapper自带的类库文件存放文件夹，比如Wrapper.DLL文件等，只要指定到对应的上级目录名称就行，支持通配符。
#wrapper.app.parameter.1= ：指定运行类的main方法参数。
#wrapper.daemonize=TRUE：将服务注册成守护线程，就算程序关闭的话不影响服务的运行
#wrapper.ntservice.hide-console=false：不显示控制台
#wrapper.filter.trigger.1= ， wrapper.filter.action.1 ：指定过滤器和触发器，可以对控制台的输出信息进行监听，然后触发相应的操作
#wrapper.disable_shutdown_hook=TRUE：是否禁用 "关闭Hook" ，关闭的话在出现一般异常的情况下面可以忽略掉异常继续执行
#wrapper.console.loglevel=INFO：配置控制台的显示信息的级别，NONE不显示任何输出信息，FATAL只显示致命的错误消息，ERROR显示所有的错误消息，STATUS显示服务状态的改变，包括服务启动和停止等信息，INFO显示所有程序输出的信息和JVM显示的信息，如果程序无法正常启动，可以使用DEBUG显示详细的调试信息。
#wrapper.logfile.loglevel=INFO：配置日志记录文件要记录的输出信息的级别，参数值和wrapper.console.loglevel功能一致
#wrapper.logfile.maxsize=0：配置日志文件的最大大小，如果为0表示不限制日志文件的大小，支持标记符，“k”代表KB，“m”代表MB，如果要设置最大大小为100KB的话可以这样：wrapper.logfile.maxsize=100k
#wrapper.console.title=Wrapper Demo ：控制台窗口显示标题，
#wrapper.ntservice.name=testwrapper： 系统服务的名称，
#wrapper.ntservice.displayname=Wrapper Demo：在服务管理中显示的名称
#wrapper.ntservice.description=Wrapper Demo的介绍信息： 在服务管理器显示服务的描述信息
#wrapper.ntservice.starttype=AUTO_START： 配置服务启动方式，可以选择AUTO_START（自动）和DEMAND_START（手动）两种方式。默认为自动。


