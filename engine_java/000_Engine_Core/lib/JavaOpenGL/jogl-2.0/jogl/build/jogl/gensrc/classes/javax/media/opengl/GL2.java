/* !---- DO NOT EDIT: This file autogenerated by com\sun\gluegen\opengl\GLEmitter.java on Sun Jan 24 02:13:51 PST 2010 ----! */

package javax.media.opengl;

import java.nio.*;
import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import com.sun.opengl.impl.*;
import javax.media.opengl.GLES1;
import javax.media.opengl.GLES2;
import javax.media.opengl.GL2;
import javax.media.opengl.GLArrayData;
import javax.media.opengl.GLUniformData;
import com.sun.opengl.impl.InternalBufferUtil;
import java.io.PrintStream;
import com.sun.gluegen.runtime.*;

 /**
  * <P> 
  * This interface contains all core desktop OpenGL methods through
  * version 3.0, inclusive, as well as most of it's extensions defined at the
  * time of this specification.  Early OpenGL extensions whose functionality
  * was incorporated into core OpenGL by version 3.0, inclusive, are specifically
  * excluded.<br>
  * Note: OpenGL 3.0 is the last subsumed version in the specification. 
  * You need to use a {@link GL3} or {@link GL3bc} OpenGL 3.1+ context to benefit
  * from new functionality and versions.
  * </P>
  */
public interface GL2 extends GLBase, GL, GL2ES1, GL2ES2, GL2GL3
{

  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_2_BYTES = 0x1407;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_3_BYTES = 0x1408;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_4_BYTES = 0x1409;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_QUADS = 0x0007;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_QUAD_STRIP = 0x0008;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON = 0x0009;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_STIPPLE = 0x0B24;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_STIPPLE_PATTERN = 0x0B25;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_STIPPLE_REPEAT = 0x0B26;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_MODE = 0x0B40;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_STIPPLE = 0x0B42;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_EDGE_FLAG = 0x0B43;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COMPILE = 0x1300;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COMPILE_AND_EXECUTE = 0x1301;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIST_BASE = 0x0B32;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIST_INDEX = 0x0B33;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIST_MODE = 0x0B30;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR_INDEXES = 0x1603;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR_MATERIAL_FACE = 0x0B55;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_RED_BITS = 0x0D58;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_GREEN_BITS = 0x0D59;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_BLUE_BITS = 0x0D5A;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_ALPHA_BITS = 0x0D5B;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_CLEAR_VALUE = 0x0B80;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM = 0x0100;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LOAD = 0x0101;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MULT = 0x0103;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RETURN = 0x0102;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FEEDBACK = 0x1C01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RENDER = 0x1C00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SELECT = 0x1C02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_2D = 0x0600;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_3D = 0x0601;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_3D_COLOR = 0x0602;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_3D_COLOR_TEXTURE = 0x0603;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_4D_COLOR_TEXTURE = 0x0604;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT_TOKEN = 0x0701;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_TOKEN = 0x0702;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_RESET_TOKEN = 0x0707;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_TOKEN = 0x0703;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BITMAP_TOKEN = 0x0704;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DRAW_PIXEL_TOKEN = 0x0705;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COPY_PIXEL_TOKEN = 0x0706;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PASS_THROUGH_TOKEN = 0x0700;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SELECTION_BUFFER_POINTER = 0x0DF3;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SELECTION_BUFFER_SIZE = 0x0DF4;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FOG_INDEX = 0x0B61;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LOGIC_OP = 0x0BF1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_LOGIC_OP = 0x0BF1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUX0 = 0x0409;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUX1 = 0x040A;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUX2 = 0x040B;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUX3 = 0x040C;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR_INDEX = 0x1900;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_BITS = 0x0D51;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUX_BUFFERS = 0x0C00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BITMAP = 0x1A00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_LIST_NESTING = 0x0B31;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_NAME_STACK_DEPTH = 0x0D37;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_EVAL_ORDER = 0x0D30;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ATTRIB_STACK_DEPTH = 0x0BB0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_INDEX = 0x0B01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_COLOR = 0x0B04;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_DISTANCE = 0x0B09;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_INDEX = 0x0B05;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_POSITION = 0x0B07;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_CLEAR_VALUE = 0x0C20;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_MODE = 0x0C30;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_WRITEMASK = 0x0C21;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_NAME_STACK_DEPTH = 0x0D70;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RENDER_MODE = 0x0C40;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RGBA_MODE = 0x0C31;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUTO_NORMAL = 0x0D80;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_COLOR_4 = 0x0D90;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_INDEX = 0x0D91;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_NORMAL = 0x0D92;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_VERTEX_3 = 0x0D97;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_VERTEX_4 = 0x0D98;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_COLOR_4 = 0x0DB0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_INDEX = 0x0DB1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_NORMAL = 0x0DB2;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_VERTEX_3 = 0x0DB7;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_VERTEX_4 = 0x0DB8;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_GRID_DOMAIN = 0x0DD0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_GRID_SEGMENTS = 0x0DD1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_GRID_DOMAIN = 0x0DD2;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_GRID_SEGMENTS = 0x0DD3;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COEFF = 0x0A00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DOMAIN = 0x0A02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ORDER = 0x0A01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP_COLOR = 0x0D10;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP_STENCIL = 0x0D11;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_SHIFT = 0x0D12;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_OFFSET = 0x0D13;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RED_SCALE = 0x0D14;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RED_BIAS = 0x0D15;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_GREEN_SCALE = 0x0D18;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_GREEN_BIAS = 0x0D19;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BLUE_SCALE = 0x0D1A;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BLUE_BIAS = 0x0D1B;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ALPHA_BIAS = 0x0D1D;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_SCALE = 0x0D1E;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_BIAS = 0x0D1F;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_S_TO_S = 0x0C71;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_I = 0x0C70;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_R = 0x0C72;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_G = 0x0C73;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_B = 0x0C74;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_A = 0x0C75;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_R_TO_R = 0x0C76;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_G_TO_G = 0x0C77;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_B_TO_B = 0x0C78;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_A_TO_A = 0x0C79;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ZOOM_X = 0x0D16;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ZOOM_Y = 0x0D17;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_GEN_S = 0x0C60;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_GEN_T = 0x0C61;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_COMPONENTS = 0x1003;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_INTENSITY_SIZE = 0x8061;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_OBJECT_LINEAR = 0x2401;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_OBJECT_PLANE = 0x2501;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_EYE_LINEAR = 0x2400;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_EYE_PLANE = 0x2502;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SPHERE_MAP = 0x2402;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CLAMP = 0x2900;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_S = 0x2000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_T = 0x2001;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_R = 0x2002;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_Q = 0x2003;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_GEN_R = 0x0C62;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_GEN_Q = 0x0C63;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_BIT = 0x00000001;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT_BIT = 0x00000002;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_BIT = 0x00000004;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_BIT = 0x00000008;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_STIPPLE_BIT = 0x00000010;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MODE_BIT = 0x00000020;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIGHTING_BIT = 0x00000040;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FOG_BIT = 0x00000080;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_BUFFER_BIT = 0x00000200;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_VIEWPORT_BIT = 0x00000800;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TRANSFORM_BIT = 0x00001000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ENABLE_BIT = 0x00002000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_HINT_BIT = 0x00008000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_EVAL_BIT = 0x00010000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIST_BIT = 0x00020000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_BIT = 0x00040000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SCISSOR_BIT = 0x00080000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ALL_ATTRIB_BITS = 0x000FFFFF;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_TEXTURE_PRIORITY = 0x8066;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_TEXTURE_RESIDENT = 0x8067;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_ALPHA4 = 0x803B;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_ALPHA8 = 0x803C;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_ALPHA12 = 0x803D;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_ALPHA16 = 0x803E;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE4 = 0x803F;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE8 = 0x8040;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE12 = 0x8041;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE16 = 0x8042;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE4_ALPHA4 = 0x8043;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE6_ALPHA2 = 0x8044;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE8_ALPHA8 = 0x8045;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE12_ALPHA4 = 0x8046;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE12_ALPHA12 = 0x8047;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE16_ALPHA16 = 0x8048;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INTENSITY = 0x8049;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INTENSITY4 = 0x804A;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INTENSITY8 = 0x804B;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INTENSITY12 = 0x804C;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INTENSITY16 = 0x804D;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final long GL_ALL_CLIENT_ATTRIB_BITS = 0xFFFFFFFF;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final long GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INDEX_ARRAY = 0x8077;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_EDGE_FLAG_ARRAY = 0x8079;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INDEX_ARRAY_TYPE = 0x8085;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INDEX_ARRAY_STRIDE = 0x8086;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INDEX_ARRAY_POINTER = 0x8091;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_V2F = 0x2A20;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_V3F = 0x2A21;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_C4UB_V2F = 0x2A22;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_C4UB_V3F = 0x2A23;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_C3F_V3F = 0x2A24;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_N3F_V3F = 0x2A25;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_C4F_N3F_V3F = 0x2A26;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T2F_V3F = 0x2A27;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T4F_V4F = 0x2A28;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T2F_C4UB_V3F = 0x2A29;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T2F_C3F_V3F = 0x2A2A;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T2F_N3F_V3F = 0x2A2B;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T2F_C4F_N3F_V3F = 0x2A2C;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T4F_C4F_N3F_V4F = 0x2A2D;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_SINGLE_COLOR = 0x81F9;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONVOLUTION_1D = 0x8010;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONVOLUTION_2D = 0x8011;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_SEPARABLE_2D = 0x8012;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONVOLUTION_BORDER_MODE = 0x8013;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONVOLUTION_FILTER_SCALE = 0x8014;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONVOLUTION_FILTER_BIAS = 0x8015;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_REDUCE = 0x8016;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONVOLUTION_FORMAT = 0x8017;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONVOLUTION_WIDTH = 0x8018;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONVOLUTION_HEIGHT = 0x8019;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_MAX_CONVOLUTION_WIDTH = 0x801A;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_HISTOGRAM = 0x8024;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_PROXY_HISTOGRAM = 0x8025;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_HISTOGRAM_WIDTH = 0x8026;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_HISTOGRAM_FORMAT = 0x8027;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_HISTOGRAM_RED_SIZE = 0x8028;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_HISTOGRAM_GREEN_SIZE = 0x8029;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_HISTOGRAM_BLUE_SIZE = 0x802A;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_HISTOGRAM_SINK = 0x802D;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_MINMAX = 0x802E;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_MINMAX_FORMAT = 0x802F;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_MINMAX_SINK = 0x8030;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_TABLE_TOO_LARGE = 0x8031;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_MATRIX = 0x80B1;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_TABLE = 0x80D0;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_PROXY_COLOR_TABLE = 0x80D3;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_TABLE_SCALE = 0x80D6;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_TABLE_BIAS = 0x80D7;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_TABLE_FORMAT = 0x80D8;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_TABLE_WIDTH = 0x80D9;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_TABLE_RED_SIZE = 0x80DA;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONSTANT_BORDER = 0x8151;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_REPLICATE_BORDER = 0x8153;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONVOLUTION_BORDER_COLOR = 0x8154;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_MULTISAMPLE_BIT = 0x20000000;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_COMPRESSED_ALPHA = 0x84E9;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_COMPRESSED_LUMINANCE = 0x84EA;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_COMPRESSED_INTENSITY = 0x84EC;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SOURCE0_RGB = 0x8580;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SOURCE1_RGB = 0x8581;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SOURCE2_RGB = 0x8582;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SOURCE0_ALPHA = 0x8588;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SOURCE1_ALPHA = 0x8589;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SOURCE2_ALPHA = 0x858A;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_FOG_COORDINATE_SOURCE = 0x8450;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_FOG_COORDINATE = 0x8451;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_FRAGMENT_DEPTH = 0x8452;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_CURRENT_FOG_COORDINATE = 0x8453;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_FOG_COORDINATE_ARRAY = 0x8457;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_COLOR_SUM = 0x8458;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_CURRENT_SECONDARY_COLOR = 0x8459;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY = 0x845E;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_TEXTURE_FILTER_CONTROL = 0x8500;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_DEPTH_TEXTURE_MODE = 0x884B;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_COMPARE_R_TO_TEXTURE = 0x884E;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_FOG_COORD_SRC = 0x8450;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_FOG_COORD = 0x8451;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_CURRENT_FOG_COORD = 0x8453;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_FOG_COORD_ARRAY_TYPE = 0x8454;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_FOG_COORD_ARRAY_POINTER = 0x8456;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_FOG_COORD_ARRAY = 0x8457;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_TEXTURE_COORDS = 0x8871;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_SLUMINANCE_ALPHA = 0x8C44;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_SLUMINANCE8_ALPHA8 = 0x8C45;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_SLUMINANCE = 0x8C46;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_SLUMINANCE8 = 0x8C47;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_COMPRESSED_SLUMINANCE = 0x8C4A;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLAMP_VERTEX_COLOR = 0x891A;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLAMP_FRAGMENT_COLOR = 0x891B;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_ALPHA_INTEGER = 0x8D97;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_VERTEX_BLEND_ARB = 0x86A7;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_CURRENT_WEIGHT_ARB = 0x86A8;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW0_ARB = 0x1700;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW1_ARB = 0x850A;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW2_ARB = 0x8722;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW3_ARB = 0x8723;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW4_ARB = 0x8724;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW5_ARB = 0x8725;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW6_ARB = 0x8726;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW7_ARB = 0x8727;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW8_ARB = 0x8728;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW9_ARB = 0x8729;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW10_ARB = 0x872A;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW11_ARB = 0x872B;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW12_ARB = 0x872C;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW13_ARB = 0x872D;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW14_ARB = 0x872E;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW15_ARB = 0x872F;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW16_ARB = 0x8730;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW17_ARB = 0x8731;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW18_ARB = 0x8732;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW19_ARB = 0x8733;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW20_ARB = 0x8734;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW21_ARB = 0x8735;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW22_ARB = 0x8736;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW23_ARB = 0x8737;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW24_ARB = 0x8738;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW25_ARB = 0x8739;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW26_ARB = 0x873A;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW27_ARB = 0x873B;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW28_ARB = 0x873C;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW29_ARB = 0x873D;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW30_ARB = 0x873E;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW31_ARB = 0x873F;
  /** Part of <code>GL_ARB_matrix_palette</code> */
  public static final int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
  /** Part of <code>GL_ARB_matrix_palette</code> */
  public static final int GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
  /** Part of <code>GL_ARB_shadow_ambient</code> */
  public static final int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_COLOR_SUM_ARB = 0x8458;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_PROGRAM_ARB = 0x8620;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_LENGTH_ARB = 0x8627;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_STRING_ARB = 0x8628;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_CURRENT_MATRIX_ARB = 0x8641;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_BINDING_ARB = 0x8677;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_FORMAT_ARB = 0x8876;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX0_ARB = 0x88C0;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX1_ARB = 0x88C1;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX2_ARB = 0x88C2;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX3_ARB = 0x88C3;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX4_ARB = 0x88C4;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX5_ARB = 0x88C5;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX6_ARB = 0x88C6;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX7_ARB = 0x88C7;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX8_ARB = 0x88C8;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX9_ARB = 0x88C9;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX10_ARB = 0x88CA;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX11_ARB = 0x88CB;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX12_ARB = 0x88CC;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX13_ARB = 0x88CD;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX14_ARB = 0x88CE;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX15_ARB = 0x88CF;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX16_ARB = 0x88D0;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX17_ARB = 0x88D1;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX18_ARB = 0x88D2;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX19_ARB = 0x88D3;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX20_ARB = 0x88D4;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX21_ARB = 0x88D5;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX22_ARB = 0x88D6;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX23_ARB = 0x88D7;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX24_ARB = 0x88D8;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX25_ARB = 0x88D9;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX26_ARB = 0x88DA;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX27_ARB = 0x88DB;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX28_ARB = 0x88DC;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX29_ARB = 0x88DD;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX30_ARB = 0x88DE;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX31_ARB = 0x88DF;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_FRAGMENT_PROGRAM_ARB = 0x8804;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_PROGRAM_OBJECT_ARB = 0x8B40;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SHADER_OBJECT_ARB = 0x8B48;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_TYPE_ARB = 0x8B4E;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_VEC2_ARB = 0x8B50;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_VEC3_ARB = 0x8B51;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_VEC4_ARB = 0x8B52;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_INT_VEC2_ARB = 0x8B53;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_INT_VEC3_ARB = 0x8B54;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_INT_VEC4_ARB = 0x8B55;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_BOOL_ARB = 0x8B56;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_BOOL_VEC2_ARB = 0x8B57;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_BOOL_VEC3_ARB = 0x8B58;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_BOOL_VEC4_ARB = 0x8B59;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_MAT2_ARB = 0x8B5A;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_MAT3_ARB = 0x8B5B;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_MAT4_ARB = 0x8B5C;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_1D_ARB = 0x8B5D;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_2D_ARB = 0x8B5E;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_3D_ARB = 0x8B5F;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_CUBE_ARB = 0x8B60;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_2D_RECT_ARB = 0x8B63;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
  /** Part of <code>GL_ARB_shading_language_100</code> */
  public static final int GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
  /** Part of <code>GL_ARB_color_buffer_float</code> */
  public static final int GL_RGBA_FLOAT_MODE = 0x8820;
  /** Part of <code>GL_ARB_texture_float</code> */
  public static final int GL_ALPHA32F = 0x8816;
  /** Part of <code>GL_ARB_texture_float</code> */
  public static final int GL_INTENSITY32F = 0x8817;
  /** Part of <code>GL_ARB_texture_float</code> */
  public static final int GL_LUMINANCE32F = 0x8818;
  /** Part of <code>GL_ARB_texture_float</code> */
  public static final int GL_LUMINANCE_ALPHA32F = 0x8819;
  /** Part of <code>GL_ARB_texture_float</code> */
  public static final int GL_ALPHA16F = 0x881C;
  /** Part of <code>GL_ARB_texture_float</code> */
  public static final int GL_INTENSITY16F = 0x881D;
  /** Part of <code>GL_ARB_texture_float</code> */
  public static final int GL_LUMINANCE16F = 0x881E;
  /** Part of <code>GL_ARB_texture_float</code> */
  public static final int GL_LUMINANCE_ALPHA16F = 0x881F;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_INDEX = 0x8222;
  /** Part of <code>GL_EXT_abgr</code> */
  public static final int GL_ABGR_EXT = 0x8000;
  /** Part of <code>GL_EXT_cmyka</code> */
  public static final int GL_CMYK_EXT = 0x800C;
  /** Part of <code>GL_EXT_cmyka</code> */
  public static final int GL_CMYKA_EXT = 0x800D;
  /** Part of <code>GL_EXT_cmyka</code> */
  public static final int GL_PACK_CMYK_HINT_EXT = 0x800E;
  /** Part of <code>GL_EXT_cmyka</code> */
  public static final int GL_UNPACK_CMYK_HINT_EXT = 0x800F;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_COLOR3_BIT_PGI = 0x00010000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_COLOR4_BIT_PGI = 0x00020000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_EDGEFLAG_BIT_PGI = 0x00040000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_INDEX_BIT_PGI = 0x00080000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_EMISSION_BIT_PGI = 0x00800000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_SHININESS_BIT_PGI = 0x02000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_NORMAL_BIT_PGI = 0x08000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_TEXCOORD1_BIT_PGI = 0x10000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_TEXCOORD2_BIT_PGI = 0x20000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_TEXCOORD3_BIT_PGI = 0x40000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final long GL_TEXCOORD4_BIT_PGI = 0x80000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_VERTEX23_BIT_PGI = 0x00000004;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_VERTEX4_BIT_PGI = 0x00000008;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_CLIP_NEAR_HINT_PGI = 0x1A220;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_CLIP_FAR_HINT_PGI = 0x1A221;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_WIDE_LINE_HINT_PGI = 0x1A222;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_BACK_NORMALS_HINT_PGI = 0x1A223;
  /** Part of <code>GL_EXT_clip_volume_hint</code> */
  public static final int GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
  /** Part of <code>GL_EXT_index_material</code> */
  public static final int GL_INDEX_MATERIAL_EXT = 0x81B8;
  /** Part of <code>GL_EXT_index_material</code> */
  public static final int GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
  /** Part of <code>GL_EXT_index_material</code> */
  public static final int GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
  /** Part of <code>GL_EXT_index_func</code> */
  public static final int GL_INDEX_TEST_EXT = 0x81B5;
  /** Part of <code>GL_EXT_index_func</code> */
  public static final int GL_INDEX_TEST_FUNC_EXT = 0x81B6;
  /** Part of <code>GL_EXT_index_func</code> */
  public static final int GL_INDEX_TEST_REF_EXT = 0x81B7;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_IUI_V2F_EXT = 0x81AD;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_IUI_V3F_EXT = 0x81AE;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_IUI_N3F_V2F_EXT = 0x81AF;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_IUI_N3F_V3F_EXT = 0x81B0;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_T2F_IUI_V2F_EXT = 0x81B1;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_T2F_IUI_V3F_EXT = 0x81B2;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
  /** Part of <code>GL_EXT_compiled_vertex_array</code> */
  public static final int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
  /** Part of <code>GL_EXT_compiled_vertex_array</code> */
  public static final int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
  /** Part of <code>GL_EXT_cull_vertex</code> */
  public static final int GL_CULL_VERTEX_EXT = 0x81AA;
  /** Part of <code>GL_EXT_cull_vertex</code> */
  public static final int GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
  /** Part of <code>GL_EXT_cull_vertex</code> */
  public static final int GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_FRAGMENT_MATERIAL_EXT = 0x8349;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_FRAGMENT_NORMAL_EXT = 0x834A;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_FRAGMENT_COLOR_EXT = 0x834C;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_ATTENUATION_EXT = 0x834D;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_SHADOW_ATTENUATION_EXT = 0x834E;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_TEXTURE_LIGHT_EXT = 0x8350;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_MAG_FILTER_EXT = 0x8331;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_MIN_FILTER_EXT = 0x8332;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_CUBIC_EXT = 0x8334;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_AVERAGE_EXT = 0x8335;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
  /** Part of <code>GL_EXT_shared_texture_palette</code> */
  public static final int GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
  /** Part of <code>GL_EXT_texture_perturb_normal</code> */
  public static final int GL_PERTURB_EXT = 0x85AE;
  /** Part of <code>GL_EXT_texture_perturb_normal</code> */
  public static final int GL_TEXTURE_NORMAL_EXT = 0x85AF;
  /** Part of <code>GL_REND_screen_coordinates</code> */
  public static final int GL_SCREEN_COORDINATES_REND = 0x8490;
  /** Part of <code>GL_REND_screen_coordinates</code> */
  public static final int GL_INVERTED_SCREEN_W_REND = 0x8491;
  /** Part of <code>GL_APPLE_specular_vector</code> */
  public static final int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
  /** Part of <code>GL_APPLE_transform_hint</code> */
  public static final int GL_TRANSFORM_HINT_APPLE = 0x85B1;
  /** Part of <code>GL_SUNX_constant_data</code> */
  public static final int GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
  /** Part of <code>GL_SUNX_constant_data</code> */
  public static final int GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_RED_MIN_CLAMP_INGR = 0x8560;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_GREEN_MIN_CLAMP_INGR = 0x8561;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_BLUE_MIN_CLAMP_INGR = 0x8562;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_RED_MAX_CLAMP_INGR = 0x8564;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_GREEN_MAX_CLAMP_INGR = 0x8565;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_BLUE_MAX_CLAMP_INGR = 0x8566;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
  /** Part of <code>GL_INGR_interlace_read</code> */
  public static final int GL_INTERLACE_READ_INGR = 0x8568;
  /** Part of <code>GL_EXT_422_pixels</code> */
  public static final int GL_422_EXT = 0x80CC;
  /** Part of <code>GL_EXT_422_pixels</code> */
  public static final int GL_422_REV_EXT = 0x80CD;
  /** Part of <code>GL_EXT_422_pixels</code> */
  public static final int GL_422_AVERAGE_EXT = 0x80CE;
  /** Part of <code>GL_EXT_422_pixels</code> */
  public static final int GL_422_REV_AVERAGE_EXT = 0x80CF;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW1_MATRIX_EXT = 0x8506;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHTING_EXT = 0x8509;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW0_EXT = 0x1700;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW1_EXT = 0x850A;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
  /** Part of <code>GL_NV_light_max_exponent</code> */
  public static final int GL_MAX_SHININESS_NV = 0x8504;
  /** Part of <code>GL_NV_light_max_exponent</code> */
  public static final int GL_MAX_SPOT_EXPONENT_NV = 0x8505;
  /** Part of <code>GL_NV_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
  /** Part of <code>GL_NV_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
  /** Part of <code>GL_NV_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
  /** Part of <code>GL_NV_vertex_array_range</code> */
  public static final int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
  /** Part of <code>GL_NV_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
  /** Part of <code>GL_NV_fog_distance</code> */
  public static final int GL_FOG_DISTANCE_MODE_NV = 0x855A;
  /** Part of <code>GL_NV_fog_distance</code> */
  public static final int GL_EYE_RADIAL_NV = 0x855B;
  /** Part of <code>GL_NV_fog_distance</code> */
  public static final int GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
  /** Part of <code>GL_NV_texgen_emboss</code> */
  public static final int GL_EMBOSS_LIGHT_NV = 0x855D;
  /** Part of <code>GL_NV_texgen_emboss</code> */
  public static final int GL_EMBOSS_CONSTANT_NV = 0x855E;
  /** Part of <code>GL_NV_texgen_emboss</code> */
  public static final int GL_EMBOSS_MAP_NV = 0x855F;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_ALL_COMPLETED_NV = 0x84F2;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_FENCE_STATUS_NV = 0x84F3;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_FENCE_CONDITION_NV = 0x84F4;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_2D_NV = 0x86C0;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_MAP_TESSELLATION_NV = 0x86C2;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SHADER_CONSISTENT_NV = 0x86DD;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_SHADER_NV = 0x86DE;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SHADER_OPERATION_NV = 0x86DF;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_CULL_MODES_NV = 0x86E0;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_CONST_EYE_NV = 0x86E5;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_PASS_THROUGH_NV = 0x86E6;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_CULL_FRAGMENT_NV = 0x86E7;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_NV = 0x86EC;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_HILO_NV = 0x86F4;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT_NV = 0x86F5;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT_MAG_NV = 0x86F6;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT_MAG_VIB_NV = 0x86F7;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_HILO16_NV = 0x86F8;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_HILO_NV = 0x86F9;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_HILO16_NV = 0x86FA;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGBA_NV = 0x86FB;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGBA8_NV = 0x86FC;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGB_NV = 0x86FE;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGB8_NV = 0x86FF;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_LUMINANCE_NV = 0x8701;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_LUMINANCE8_NV = 0x8702;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_ALPHA_NV = 0x8705;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_ALPHA8_NV = 0x8706;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_INTENSITY_NV = 0x8707;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_INTENSITY8_NV = 0x8708;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT8_NV = 0x8709;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT8_MAG8_NV = 0x870A;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_HI_SCALE_NV = 0x870E;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_LO_SCALE_NV = 0x870F;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DS_SCALE_NV = 0x8710;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DT_SCALE_NV = 0x8711;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_MAGNITUDE_SCALE_NV = 0x8712;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_VIBRANCE_SCALE_NV = 0x8713;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_HI_BIAS_NV = 0x8714;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_LO_BIAS_NV = 0x8715;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DS_BIAS_NV = 0x8716;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DT_BIAS_NV = 0x8717;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_MAGNITUDE_BIAS_NV = 0x8718;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_VIBRANCE_BIAS_NV = 0x8719;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_HI_SIZE_NV = 0x871B;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_LO_SIZE_NV = 0x871C;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_DS_SIZE_NV = 0x871D;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_DT_SIZE_NV = 0x871E;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_MAG_SIZE_NV = 0x871F;
  /** Part of <code>GL_NV_texture_shader2</code> */
  public static final int GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
  /** Part of <code>GL_NV_vertex_array_range2</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
  /** Part of <code>GL_OML_interlace</code> */
  public static final int GL_INTERLACE_OML = 0x8980;
  /** Part of <code>GL_OML_interlace</code> */
  public static final int GL_INTERLACE_READ_OML = 0x8981;
  /** Part of <code>GL_OML_subsample</code> */
  public static final int GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
  /** Part of <code>GL_OML_subsample</code> */
  public static final int GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_PACK_RESAMPLE_OML = 0x8984;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_UNPACK_RESAMPLE_OML = 0x8985;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_RESAMPLE_REPLICATE_OML = 0x8986;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_RESAMPLE_AVERAGE_OML = 0x8988;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_RESAMPLE_DECIMATE_OML = 0x8989;
  /** Part of <code>GL_NV_copy_depth_to_color</code> */
  public static final int GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
  /** Part of <code>GL_NV_copy_depth_to_color</code> */
  public static final int GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_ATI = 0x87F0;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_EXT = 0x8780;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_INDEX_EXT = 0x8782;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_NEGATE_EXT = 0x8783;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_DOT3_EXT = 0x8784;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_DOT4_EXT = 0x8785;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MUL_EXT = 0x8786;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_ADD_EXT = 0x8787;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MADD_EXT = 0x8788;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_FRAC_EXT = 0x8789;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MAX_EXT = 0x878A;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MIN_EXT = 0x878B;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_SET_GE_EXT = 0x878C;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_SET_LT_EXT = 0x878D;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_CLAMP_EXT = 0x878E;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_FLOOR_EXT = 0x878F;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_ROUND_EXT = 0x8790;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_EXP_BASE_2_EXT = 0x8791;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_LOG_BASE_2_EXT = 0x8792;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_POWER_EXT = 0x8793;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_RECIP_EXT = 0x8794;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_RECIP_SQRT_EXT = 0x8795;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_SUB_EXT = 0x8796;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_CROSS_PRODUCT_EXT = 0x8797;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MOV_EXT = 0x8799;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_VERTEX_EXT = 0x879A;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_COLOR0_EXT = 0x879B;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_COLOR1_EXT = 0x879C;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_FOG_EXT = 0x87BD;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_SCALAR_EXT = 0x87BE;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VECTOR_EXT = 0x87BF;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MATRIX_EXT = 0x87C0;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_EXT = 0x87C1;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_INVARIANT_EXT = 0x87C2;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_LOCAL_CONSTANT_EXT = 0x87C3;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_LOCAL_EXT = 0x87C4;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_X_EXT = 0x87D5;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_Y_EXT = 0x87D6;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_Z_EXT = 0x87D7;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_W_EXT = 0x87D8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NEGATIVE_X_EXT = 0x87D9;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NEGATIVE_Y_EXT = 0x87DA;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NEGATIVE_Z_EXT = 0x87DB;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NEGATIVE_W_EXT = 0x87DC;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_ZERO_EXT = 0x87DD;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_ONE_EXT = 0x87DE;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NEGATIVE_ONE_EXT = 0x87DF;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NORMALIZED_RANGE_EXT = 0x87E0;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_FULL_RANGE_EXT = 0x87E1;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_CURRENT_VERTEX_EXT = 0x87E2;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MVP_MATRIX_EXT = 0x87E3;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_VALUE_EXT = 0x87E4;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_DATATYPE_EXT = 0x87E5;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_ARRAY_EXT = 0x87E8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_INVARIANT_VALUE_EXT = 0x87EA;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_INVARIANT_DATATYPE_EXT = 0x87EB;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
  /** Part of <code>GL_NV_multisample_filter_hint</code> */
  public static final int GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
  /** Part of <code>GL_NV_depth_clamp</code> */
  public static final int GL_DEPTH_CLAMP_NV = 0x864F;
  /** Part of <code>GL_NV_occlusion_query</code> */
  public static final int GL_PIXEL_COUNTER_BITS_NV = 0x8864;
  /** Part of <code>GL_NV_occlusion_query</code> */
  public static final int GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
  /** Part of <code>GL_NV_occlusion_query</code> */
  public static final int GL_PIXEL_COUNT_NV = 0x8866;
  /** Part of <code>GL_NV_occlusion_query</code> */
  public static final int GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_HILO8_NV = 0x885E;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_SIGNED_HILO8_NV = 0x885F;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
  /** Part of <code>GL_EXT_stencil_two_side</code> */
  public static final int GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
  /** Part of <code>GL_EXT_stencil_two_side</code> */
  public static final int GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
  /** Part of <code>GL_APPLE_client_storage</code> */
  public static final int GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
  /** Part of <code>GL_APPLE_fence</code> */
  public static final int GL_DRAW_PIXELS_APPLE = 0x8A0A;
  /** Part of <code>GL_APPLE_fence</code> */
  public static final int GL_FENCE_APPLE = 0x8A0B;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE = 0x8520;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_STORAGE_PRIVATE_APPLE = 0x85BD;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_STORAGE_CACHED_APPLE = 0x85BE;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_STORAGE_SHARED_APPLE = 0x85BF;
  /** Part of <code>GL_APPLE_ycbcr_422</code> */
  public static final int GL_YCBCR_422_APPLE = 0x85B9;
  /** Part of <code>GL_APPLE_ycbcr_422</code> */
  public static final int GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
  /** Part of <code>GL_APPLE_ycbcr_422</code> */
  public static final int GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
  /** Part of <code>GL_S3_s3tc</code> */
  public static final int GL_RGB_S3TC = 0x83A0;
  /** Part of <code>GL_S3_s3tc</code> */
  public static final int GL_RGB4_S3TC = 0x83A1;
  /** Part of <code>GL_S3_s3tc</code> */
  public static final int GL_RGBA_S3TC = 0x83A2;
  /** Part of <code>GL_S3_s3tc</code> */
  public static final int GL_RGBA4_S3TC = 0x83A3;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER0_ATI = 0x8825;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER1_ATI = 0x8826;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER2_ATI = 0x8827;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER3_ATI = 0x8828;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER4_ATI = 0x8829;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER5_ATI = 0x882A;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER6_ATI = 0x882B;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER7_ATI = 0x882C;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER8_ATI = 0x882D;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER9_ATI = 0x882E;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER10_ATI = 0x882F;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER11_ATI = 0x8830;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER12_ATI = 0x8831;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER13_ATI = 0x8832;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER14_ATI = 0x8833;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER15_ATI = 0x8834;
  /** Part of <code>GL_ATI_pixel_format_float</code> */
  public static final int GL_TYPE_RGBA_FLOAT_ATI = 0x8820;
  /** Part of <code>GL_ATI_pixel_format_float</code> */
  public static final int GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
  /** Part of <code>GL_NV_texture_expand_normal</code> */
  public static final int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
  /** Part of <code>GL_EXT_depth_bounds_test</code> */
  public static final int GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
  /** Part of <code>GL_EXT_depth_bounds_test</code> */
  public static final int GL_DEPTH_BOUNDS_EXT = 0x8891;
  /** Part of <code>GL_EXT_texture_mirror_clamp</code> */
  public static final int GL_MIRROR_CLAMP_EXT = 0x8742;
  /** Part of <code>GL_EXT_texture_mirror_clamp</code> */
  public static final int GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
  /** Part of <code>GL_EXT_texture_mirror_clamp</code> */
  public static final int GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
  /** Part of <code>GL_EXT_pixel_buffer_object</code> */
  public static final int GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
  /** Part of <code>GL_EXT_pixel_buffer_object</code> */
  public static final int GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
  /** Part of <code>GL_EXT_pixel_buffer_object</code> */
  public static final int GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
  /** Part of <code>GL_EXT_pixel_buffer_object</code> */
  public static final int GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
  /** Part of <code>GL_EXT_stencil_clear_tag</code> */
  public static final int GL_STENCIL_TAG_BITS_EXT = 0x88F2;
  /** Part of <code>GL_EXT_stencil_clear_tag</code> */
  public static final int GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
  /** Part of <code>GL_EXT_timer_query</code> */
  public static final int GL_TIME_ELAPSED_EXT = 0x88BF;
  /** Part of <code>GL_APPLE_flush_buffer_range</code> */
  public static final int GL_BUFFER_SERIALIZED_MODIFY = 0x8A12;
  /** Part of <code>GL_APPLE_flush_buffer_range</code> */
  public static final int GL_BUFFER_FLUSHING_UNMAP = 0x8A13;
  /** Part of <code>GL_EXT_Cg_shader</code> */
  public static final int GL_CG_VERTEX_SHADER_EXT = 0x890E;
  /** Part of <code>GL_EXT_Cg_shader</code> */
  public static final int GL_CG_FRAGMENT_SHADER_EXT = 0x890F;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_UNIFORM_BUFFER_EXT = 0x8DEE;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
  /** Part of <code>GL_EXT_texture_array</code> */
  public static final int GL_COMPARE_REF_DEPTH_TO_TEXTURE = 0x884E;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA32UI = 0x8D72;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY32UI = 0x8D73;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE32UI = 0x8D74;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA32UI = 0x8D75;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA16UI = 0x8D78;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY16UI = 0x8D79;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE16UI = 0x8D7A;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA16UI = 0x8D7B;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA8UI = 0x8D7E;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY8UI = 0x8D7F;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE8UI = 0x8D80;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA8UI = 0x8D81;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA32I = 0x8D84;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY32I = 0x8D85;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE32I = 0x8D86;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA32I = 0x8D87;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA16I = 0x8D8A;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY16I = 0x8D8B;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE16I = 0x8D8C;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA16I = 0x8D8D;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA8I = 0x8D90;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY8I = 0x8D91;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE8I = 0x8D92;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA8I = 0x8D93;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_INTEGER = 0x8D9C;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA_INTEGER = 0x8D9D;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGBA_INTEGER_MODE = 0x8D9E;
  /** Part of <code>GL_EXT_texture_compression_latc</code> */
  public static final int GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
  /** Part of <code>GL_EXT_texture_compression_latc</code> */
  public static final int GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
  /** Part of <code>GL_EXT_texture_compression_latc</code> */
  public static final int GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
  /** Part of <code>GL_EXT_texture_compression_latc</code> */
  public static final int GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_GEOMETRY_PROGRAM_NV = 0x8C26;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
  /** Part of <code>GL_NV_parameter_buffer_object</code> */
  public static final int GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
  /** Part of <code>GL_NV_parameter_buffer_object</code> */
  public static final int GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
  /** Part of <code>GL_NV_parameter_buffer_object</code> */
  public static final int GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
  /** Part of <code>GL_NV_parameter_buffer_object</code> */
  public static final int GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
  /** Part of <code>GL_NV_parameter_buffer_object</code> */
  public static final int GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
  /** Part of <code>GL_NV_framebuffer_multisample_coverage</code> */
  public static final int GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
  /** Part of <code>GL_NV_framebuffer_multisample_coverage</code> */
  public static final int GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
  /** Part of <code>GL_NV_framebuffer_multisample_coverage</code> */
  public static final int GL_MAX_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8D57;
  /** Part of <code>GL_NV_framebuffer_multisample_coverage</code> */
  public static final int GL_MAX_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E11;
  /** Part of <code>GL_NV_framebuffer_multisample_coverage</code> */
  public static final int GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
  /** Part of <code>GL_NV_framebuffer_multisample_coverage</code> */
  public static final int GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E13;
  /** Part of <code>GL_EXT_direct_state_access</code> */
  public static final int GL_PROGRAM_MATRIX_EXT = 0x8E2D;
  /** Part of <code>GL_EXT_direct_state_access</code> */
  public static final int GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
  /** Part of <code>GL_EXT_direct_state_access</code> */
  public static final int GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
  /** Part of <code>GL_EXT_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
  /** Part of <code>GL_EXT_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
  /** Part of <code>GL_EXT_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
  /** Part of <code>GL_EXT_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
  /** Part of <code>GL_EXT_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_SAMPLE_POSITION_NV = 0x8E50;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_SAMPLE_MASK_NV = 0x8E51;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
  /** Part of <code>GL_NV_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
  /** Part of <code>GL_NV_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
  /** Part of <code>GL_NV_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
  /** Part of <code>GL_NV_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
  /** Part of <code>GL_KTX_buffer_region</code> */
  public static final int GL_KTX_FRONT_REGION = 0;
  /** Part of <code>GL_KTX_buffer_region</code> */
  public static final int GL_KTX_BACK_REGION = 1;
  /** Part of <code>GL_KTX_buffer_region</code> */
  public static final int GL_KTX_Z_REGION = 2;
  /** Part of <code>GL_KTX_buffer_region</code> */
  public static final int GL_KTX_STENCIL_REGION = 3;
  /** Part of <code>GL_APPLE_texture_range</code> */
  public static final int GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
  /** Part of <code>GL_APPLE_texture_range</code> */
  public static final int GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
  /** Part of <code>GL_APPLE_texture_range</code> */
  public static final int GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
  /** Part of <code>GL_APPLE_texture_range</code> */
  public static final int GL_TEXTURE_MINIMIZE_STORAGE_APPLE = 0x85B6;
  /** Part of <code>GL_APPLE_pixel_buffer</code> */
  public static final int GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE = 0x8A10;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;

  /** Interface to C language function: <br> <code> void {@native glAccum}(GLenum op, GLfloat value); </code>    */
  public void glAccum(int op, float value);

  /** Entry point to C language function: <code> void {@native glActiveStencilFaceEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_stencil_two_side</code>   */
  public void glActiveStencilFaceEXT(int mode);

  /** Entry point to C language function: <code> void {@native glApplyTextureEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_light_texture</code>   */
  public void glApplyTextureEXT(int mode);

  /** Interface to C language function: <br> <code> GLboolean {@native glAreTexturesResident}(GLsizei n, const GLuint *  textures, GLboolean *  residences); </code>    */
  public boolean glAreTexturesResident(int n, java.nio.IntBuffer textures, java.nio.ByteBuffer residences);

  /** Interface to C language function: <br> <code> GLboolean {@native glAreTexturesResident}(GLsizei n, const GLuint *  textures, GLboolean *  residences); </code>    */
  public boolean glAreTexturesResident(int n, int[] textures, int textures_offset, byte[] residences, int residences_offset);

  /** Interface to C language function: <br> <code> void {@native glArrayElement}(GLint i); </code>    */
  public void glArrayElement(int i);

  /** Entry point to C language function: <code> void {@native glAttachObjectARB}(GLhandleARB target, GLhandleARB id); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glAttachObjectARB(int target, int id);

  /** Interface to C language function: <br> <code> void {@native glBegin}(GLenum mode); </code>    */
  public void glBegin(int mode);

  /** Entry point to C language function: <code> void {@native glBeginOcclusionQueryNV}(GLuint mode); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glBeginOcclusionQueryNV(int mode);

  /** Entry point to C language function: <code> void {@native glBeginVertexShaderEXT}(void); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glBeginVertexShaderEXT();

  /** Entry point to C language function: <code> void {@native glBindBufferOffsetEXT}(GLenum target, GLuint attachment, GLuint texture, ptrdiff_t level); </code> <br>Part of <code>GL_EXT_transform_feedback</code>   */
  public void glBindBufferOffset(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> GLuint {@native glBindLightParameterEXT}(GLenum light, GLenum value); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glBindLightParameterEXT(int light, int value);

  /** Entry point to C language function: <code> GLuint {@native glBindMaterialParameterEXT}(GLenum light, GLenum value); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glBindMaterialParameterEXT(int light, int value);

  /** Entry point to C language function: <code> void {@native glBindMultiTextureEXT}(GLenum red, GLenum green, GLuint blue); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glBindMultiTextureEXT(int red, int green, int blue);

  /** Entry point to C language function: <code> GLuint {@native glBindParameterEXT}(GLenum type); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glBindParameterEXT(int type);

  /** Entry point to C language function: <code> void {@native glBindProgramARB}(GLenum target, GLuint id); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glBindProgramARB(int target, int id);

  /** Entry point to C language function: <code> GLuint {@native glBindTexGenParameterEXT}(GLenum unit, GLenum coord, GLenum value); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glBindTexGenParameterEXT(int unit, int coord, int value);

  /** Entry point to C language function: <code> GLuint {@native glBindTextureUnitParameterEXT}(GLenum light, GLenum value); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glBindTextureUnitParameterEXT(int light, int value);

  /** Entry point to C language function: <code> void {@native glBindVertexShaderEXT}(GLuint mode); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glBindVertexShaderEXT(int mode);

  /** Entry point to C language function: <code> void {@native glBitmap}(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *  bitmap); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, java.nio.ByteBuffer bitmap);

  /** Entry point to C language function: <code> void {@native glBitmap}(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *  bitmap); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap, int bitmap_offset);

  /** Entry point to C language function: <code> void {@native glBitmap}(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *  bitmap); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, long bitmap_buffer_offset);

  /** Entry point to C language function: <code> void {@native glBlendFuncSeparateINGR}(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha); </code> <br>Part of <code>GL_INGR_blend_func_separate</code>   */
  public void glBlendFuncSeparateINGR(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point to C language function: <code> void {@native glBufferParameteriAPPLE}(GLenum target, GLenum pname, GLint params); </code> <br>Part of <code>GL_APPLE_flush_buffer_range</code>   */
  public void glBufferParameteri(int target, int pname, int params);

  /** Entry point to C language function: <code> GLuint {@native glBufferRegionEnabled}(GLvoid); </code> <br>Part of <code>GL_KTX_buffer_region</code>   */
  public int glBufferRegionEnabled();

  /** Interface to C language function: <br> <code> void {@native glCallList}(GLuint list); </code>    */
  public void glCallList(int list);

  /** Interface to C language function: <br> <code> void {@native glCallLists}(GLsizei n, GLenum type, const GLvoid *  lists); </code>    */
  public void glCallLists(int n, int type, java.nio.Buffer lists);

  /** Entry point to C language function: <code> GLenum {@native glCheckNamedFramebufferStatusEXT}(GLuint light, GLenum value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public int glCheckNamedFramebufferStatusEXT(int light, int value);

  /** Interface to C language function: <br> <code> void {@native glClearAccum}(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha); </code>    */
  public void glClearAccum(float red, float green, float blue, float alpha);

  /** Entry point to C language function: <code> void {@native glClearColorIiEXT}(GLint red, GLint green, GLint blue, GLint alpha); </code> <br>Part of <code>GL_EXT_texture_integer</code>   */
  public void glClearColorIi(int red, int green, int blue, int alpha);

  /** Entry point to C language function: <code> void {@native glClearColorIuiEXT}(GLuint red, GLuint green, GLuint blue, GLuint alpha); </code> <br>Part of <code>GL_EXT_texture_integer</code>   */
  public void glClearColorIui(int red, int green, int blue, int alpha);

  /** Interface to C language function: <br> <code> void {@native glClearIndex}(GLfloat c); </code>    */
  public void glClearIndex(float c);

  /** Entry point to C language function: <code> void {@native glClientAttribDefaultEXT}(GLbitfield mode); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glClientAttribDefaultEXT(int mode);

  /** Interface to C language function: <br> <code> void {@native glClipPlane}(GLenum plane, const GLdouble *  equation); </code>    */
  public void glClipPlane(int plane, java.nio.DoubleBuffer equation);

  /** Interface to C language function: <br> <code> void {@native glClipPlane}(GLenum plane, const GLdouble *  equation); </code>    */
  public void glClipPlane(int plane, double[] equation, int equation_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3b}(GLbyte red, GLbyte green, GLbyte blue); </code>    */
  public void glColor3b(byte red, byte green, byte blue);

  /** Interface to C language function: <br> <code> void {@native glColor3bv}(const GLbyte *  v); </code>    */
  public void glColor3bv(java.nio.ByteBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3bv}(const GLbyte *  v); </code>    */
  public void glColor3bv(byte[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3d}(GLdouble red, GLdouble green, GLdouble blue); </code>    */
  public void glColor3d(double red, double green, double blue);

  /** Interface to C language function: <br> <code> void {@native glColor3dv}(const GLdouble *  v); </code>    */
  public void glColor3dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3dv}(const GLdouble *  v); </code>    */
  public void glColor3dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3f}(GLfloat red, GLfloat green, GLfloat blue); </code>    */
  public void glColor3f(float red, float green, float blue);

  /** Interface to C language function: <br> <code> void {@native glColor3fv}(const GLfloat *  v); </code>    */
  public void glColor3fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3fv}(const GLfloat *  v); </code>    */
  public void glColor3fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glColor3h(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glColor3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glColor3hv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glColor3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glColor3hv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3i}(GLint red, GLint green, GLint blue); </code>    */
  public void glColor3i(int red, int green, int blue);

  /** Interface to C language function: <br> <code> void {@native glColor3iv}(const GLint *  v); </code>    */
  public void glColor3iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3iv}(const GLint *  v); </code>    */
  public void glColor3iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3s}(GLshort red, GLshort green, GLshort blue); </code>    */
  public void glColor3s(short red, short green, short blue);

  /** Interface to C language function: <br> <code> void {@native glColor3sv}(const GLshort *  v); </code>    */
  public void glColor3sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3sv}(const GLshort *  v); </code>    */
  public void glColor3sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3ub}(GLubyte red, GLubyte green, GLubyte blue); </code>    */
  public void glColor3ub(byte red, byte green, byte blue);

  /** Interface to C language function: <br> <code> void {@native glColor3ubv}(const GLubyte *  v); </code>    */
  public void glColor3ubv(java.nio.ByteBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3ubv}(const GLubyte *  v); </code>    */
  public void glColor3ubv(byte[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3ui}(GLuint red, GLuint green, GLuint blue); </code>    */
  public void glColor3ui(int red, int green, int blue);

  /** Interface to C language function: <br> <code> void {@native glColor3uiv}(const GLuint *  v); </code>    */
  public void glColor3uiv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3uiv}(const GLuint *  v); </code>    */
  public void glColor3uiv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3us}(GLushort red, GLushort green, GLushort blue); </code>    */
  public void glColor3us(short red, short green, short blue);

  /** Interface to C language function: <br> <code> void {@native glColor3usv}(const GLushort *  v); </code>    */
  public void glColor3usv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3usv}(const GLushort *  v); </code>    */
  public void glColor3usv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4b}(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha); </code>    */
  public void glColor4b(byte red, byte green, byte blue, byte alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4bv}(const GLbyte *  v); </code>    */
  public void glColor4bv(java.nio.ByteBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4bv}(const GLbyte *  v); </code>    */
  public void glColor4bv(byte[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4d}(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha); </code>    */
  public void glColor4d(double red, double green, double blue, double alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4dv}(const GLdouble *  v); </code>    */
  public void glColor4dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4dv}(const GLdouble *  v); </code>    */
  public void glColor4dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4fv}(const GLfloat *  v); </code>    */
  public void glColor4fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4fv}(const GLfloat *  v); </code>    */
  public void glColor4fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor4hNV}(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glColor4h(short x, short y, short z, short w);

  /** Entry point to C language function: <code> void {@native glColor4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glColor4hv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glColor4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glColor4hv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4i}(GLint red, GLint green, GLint blue, GLint alpha); </code>    */
  public void glColor4i(int red, int green, int blue, int alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4iv}(const GLint *  v); </code>    */
  public void glColor4iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4iv}(const GLint *  v); </code>    */
  public void glColor4iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4s}(GLshort red, GLshort green, GLshort blue, GLshort alpha); </code>    */
  public void glColor4s(short red, short green, short blue, short alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4sv}(const GLshort *  v); </code>    */
  public void glColor4sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4sv}(const GLshort *  v); </code>    */
  public void glColor4sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4ubv}(const GLubyte *  v); </code>    */
  public void glColor4ubv(java.nio.ByteBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4ubv}(const GLubyte *  v); </code>    */
  public void glColor4ubv(byte[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4ui}(GLuint red, GLuint green, GLuint blue, GLuint alpha); </code>    */
  public void glColor4ui(int red, int green, int blue, int alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4uiv}(const GLuint *  v); </code>    */
  public void glColor4uiv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4uiv}(const GLuint *  v); </code>    */
  public void glColor4uiv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4us}(GLushort red, GLushort green, GLushort blue, GLushort alpha); </code>    */
  public void glColor4us(short red, short green, short blue, short alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4usv}(const GLushort *  v); </code>    */
  public void glColor4usv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4usv}(const GLushort *  v); </code>    */
  public void glColor4usv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColorMaskIndexedEXT}(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glColorMaskIndexed(int index, boolean r, boolean g, boolean b, boolean a);

  /** Interface to C language function: <br> <code> void {@native glColorMaterial}(GLenum face, GLenum mode); </code>    */
  public void glColorMaterial(int face, int mode);

  /** Entry point to C language function: <code> void {@native glColorSubTable}(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glColorSubTable(int target, int start, int count, int format, int type, java.nio.Buffer data);

  /** Entry point to C language function: <code> void {@native glColorSubTable}(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glColorSubTable(int target, int start, int count, int format, int type, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glColorTable}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glColorTable(int target, int internalformat, int width, int format, int type, java.nio.Buffer table);

  /** Entry point to C language function: <code> void {@native glColorTable}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glColorTable(int target, int internalformat, int width, int format, int type, long table_buffer_offset);

  /** Entry point to C language function: <code> void {@native glColorTableParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glColorTableParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glColorTableParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glColorTableParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glColorTableParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glColorTableParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glColorTableParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glColorTableParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glCompileShaderARB}(GLhandleARB mode); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glCompileShaderARB(int mode);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexImage1DEXT}(GLenum texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedMultiTexImage1DEXT(int texture, int target, int level, int internalformat, int width, int border, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexImage2DEXT}(GLenum texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedMultiTexImage2DEXT(int texture, int target, int level, int internalformat, int width, int height, int border, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexImage3DEXT}(GLenum texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedMultiTexImage3DEXT(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexSubImage1DEXT}(GLenum texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedMultiTexSubImage1DEXT(int texture, int target, int level, int xoffset, int width, int format, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexSubImage2DEXT}(GLenum texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedMultiTexSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexSubImage3DEXT}(GLenum texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedMultiTexSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureImage1DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedTextureImage1DEXT(int texture, int target, int level, int internalformat, int width, int border, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureImage2DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedTextureImage2DEXT(int texture, int target, int level, int internalformat, int width, int height, int border, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureImage3DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedTextureImage3DEXT(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureSubImage1DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedTextureSubImage1DEXT(int texture, int target, int level, int xoffset, int width, int format, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureSubImage2DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedTextureSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureSubImage3DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCompressedTextureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, java.nio.Buffer bits);

  /** Entry point to C language function: <code> void {@native glConvolutionFilter1D}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, java.nio.Buffer table);

  /** Entry point to C language function: <code> void {@native glConvolutionFilter1D}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, long table_buffer_offset);

  /** Entry point to C language function: <code> void {@native glConvolutionFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  image); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, java.nio.Buffer image);

  /** Entry point to C language function: <code> void {@native glConvolutionFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  image); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, long image_buffer_offset);

  /** Entry point to C language function: <code> void {@native glConvolutionParameterf}(GLenum target, GLenum pname, GLfloat params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glConvolutionParameterf(int target, int pname, float params);

  /** Entry point to C language function: <code> void {@native glConvolutionParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glConvolutionParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glConvolutionParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glConvolutionParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glConvolutionParameteri}(GLenum target, GLenum pname, GLint params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glConvolutionParameteri(int target, int pname, int params);

  /** Entry point to C language function: <code> void {@native glConvolutionParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glConvolutionParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glConvolutionParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glConvolutionParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glCopyColorSubTable}(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glCopyColorSubTable(int target, int start, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyColorTable}(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glCopyColorTable(int target, int internalformat, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyConvolutionFilter1D}(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glCopyConvolutionFilter1D(int target, int internalformat, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyConvolutionFilter2D}(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glCopyConvolutionFilter2D(int target, int internalformat, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glCopyMultiTexImage1DEXT}(GLenum texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyMultiTexImage1DEXT(int texture, int target, int level, int internalformat, int x, int y, int width, int border);

  /** Entry point to C language function: <code> void {@native glCopyMultiTexImage2DEXT}(GLenum texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyMultiTexImage2DEXT(int texture, int target, int level, int internalformat, int x, int y, int width, int height, int border);

  /** Entry point to C language function: <code> void {@native glCopyMultiTexSubImage1DEXT}(GLenum texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyMultiTexSubImage1DEXT(int texture, int target, int level, int xoffset, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyMultiTexSubImage2DEXT}(GLenum texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyMultiTexSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glCopyMultiTexSubImage3DEXT}(GLenum texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyMultiTexSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

  /** Interface to C language function: <br> <code> void {@native glCopyPixels}(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type); </code>    */
  public void glCopyPixels(int x, int y, int width, int height, int type);

  /** Entry point to C language function: <code> void {@native glCopyTextureImage1DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyTextureImage1DEXT(int texture, int target, int level, int internalformat, int x, int y, int width, int border);

  /** Entry point to C language function: <code> void {@native glCopyTextureImage2DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyTextureImage2DEXT(int texture, int target, int level, int internalformat, int x, int y, int width, int height, int border);

  /** Entry point to C language function: <code> void {@native glCopyTextureSubImage1DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyTextureSubImage1DEXT(int texture, int target, int level, int xoffset, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyTextureSubImage2DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyTextureSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glCopyTextureSubImage3DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyTextureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> GLhandleARB {@native glCreateProgramObjectARB}(void); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public int glCreateProgramObjectARB();

  /** Entry point to C language function: <code> GLhandleARB {@native glCreateShaderObjectARB}(GLenum type); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public int glCreateShaderObjectARB(int type);

  /** Entry point to C language function: <code> void {@native glCullParameterdvEXT}(GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_cull_vertex</code>   */
  public void glCullParameterdvEXT(int pname, java.nio.DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glCullParameterdvEXT}(GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_cull_vertex</code>   */
  public void glCullParameterdvEXT(int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glCullParameterfvEXT}(GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_cull_vertex</code>   */
  public void glCullParameterfvEXT(int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glCullParameterfvEXT}(GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_cull_vertex</code>   */
  public void glCullParameterfvEXT(int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glDeleteBufferRegion}(GLuint mode); </code> <br>Part of <code>GL_KTX_buffer_region</code>   */
  public void glDeleteBufferRegion(int mode);

  /** Entry point to C language function: <code> void {@native glDeleteFencesAPPLE}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glDeleteFencesAPPLE(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDeleteFencesAPPLE}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glDeleteFencesAPPLE(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glDeleteFencesNV}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glDeleteFencesNV(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDeleteFencesNV}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glDeleteFencesNV(int n, int[] ids, int ids_offset);

  /** Interface to C language function: <br> <code> void {@native glDeleteLists}(GLuint list, GLsizei range); </code>    */
  public void glDeleteLists(int list, int range);

  /** Entry point to C language function: <code> void {@native glDeleteObjectARB}(GLhandleARB mode); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glDeleteObjectARB(int mode);

  /** Entry point to C language function: <code> void {@native glDeleteOcclusionQueriesNV}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glDeleteOcclusionQueriesNV(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDeleteOcclusionQueriesNV}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glDeleteOcclusionQueriesNV(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glDeleteProgramsARB}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glDeleteProgramsARB(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDeleteProgramsARB}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glDeleteProgramsARB(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glDeleteVertexShaderEXT}(GLuint mode); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glDeleteVertexShaderEXT(int mode);

  /** Entry point to C language function: <code> void {@native glDepthBoundsEXT}(GLclampd x, GLclampd y); </code> <br>Part of <code>GL_EXT_depth_bounds_test</code>   */
  public void glDepthBoundsEXT(double x, double y);

  /** Entry point to C language function: <code> void {@native glDetachObjectARB}(GLhandleARB target, GLhandleARB id); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glDetachObjectARB(int target, int id);

  /** Entry point to C language function: <code> void {@native glDisableClientStateIndexedEXT}(GLenum target, GLuint id); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glDisableClientStateIndexedEXT(int target, int id);

  /** Entry point to C language function: <code> void {@native glDisableIndexedEXT}(GLenum target, GLuint index); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glDisableIndexed(int target, int index);

  /** Entry point to C language function: <code> void {@native glDisableVariantClientStateEXT}(GLuint mode); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glDisableVariantClientStateEXT(int mode);

  /** Entry point to C language function: <code> void {@native glDisableVertexAttribAPPLE}(GLuint index, GLenum pname); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glDisableVertexAttribAPPLE(int index, int pname);

  /** Entry point to C language function: <code> void {@native glDisableVertexAttribArrayARB}(GLuint mode); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glDisableVertexAttribArrayARB(int mode);

  /** Entry point to C language function: <code> void {@native glDrawBufferRegion}(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest); </code> <br>Part of <code>GL_KTX_buffer_region</code>   */
  public void glDrawBufferRegion(int region, int x, int y, int width, int height, int xDest, int yDest);

  /** Entry point to C language function: <code> void {@native glDrawBuffersATI}(GLsizei n, const GLenum *  ids); </code> <br>Part of <code>GL_ATI_draw_buffers</code>   */
  public void glDrawBuffersATI(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDrawBuffersATI}(GLsizei n, const GLenum *  ids); </code> <br>Part of <code>GL_ATI_draw_buffers</code>   */
  public void glDrawBuffersATI(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glDrawPixels}(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glDrawPixels(int width, int height, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glDrawPixels}(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glDrawPixels(int width, int height, int format, int type, long pixels_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glEdgeFlag}(GLboolean flag); </code>    */
  public void glEdgeFlag(boolean flag);

  /** Entry point to C language function: <code> void {@native glEdgeFlagPointer}(GLsizei stride, const GLvoid *  ptr); </code> <br>Part of <code>GL_VERSION_1_1</code>
      @param ptr a direct {@link java.nio.Buffer}   */
  public void glEdgeFlagPointer(int stride, java.nio.Buffer ptr);

  /** Entry point to C language function: <code> void {@native glEdgeFlagPointer}(GLsizei stride, const GLvoid *  ptr); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glEdgeFlagPointer(int stride, long ptr_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glEdgeFlagv}(const GLboolean *  flag); </code>    */
  public void glEdgeFlagv(java.nio.ByteBuffer flag);

  /** Interface to C language function: <br> <code> void {@native glEdgeFlagv}(const GLboolean *  flag); </code>    */
  public void glEdgeFlagv(byte[] flag, int flag_offset);

  /** Entry point to C language function: <code> void {@native glEnableClientStateIndexedEXT}(GLenum target, GLuint id); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glEnableClientStateIndexedEXT(int target, int id);

  /** Entry point to C language function: <code> void {@native glEnableIndexedEXT}(GLenum target, GLuint index); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glEnableIndexed(int target, int index);

  /** Entry point to C language function: <code> void {@native glEnableVariantClientStateEXT}(GLuint mode); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glEnableVariantClientStateEXT(int mode);

  /** Entry point to C language function: <code> void {@native glEnableVertexAttribAPPLE}(GLuint index, GLenum pname); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glEnableVertexAttribAPPLE(int index, int pname);

  /** Entry point to C language function: <code> void {@native glEnableVertexAttribArrayARB}(GLuint mode); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glEnableVertexAttribArrayARB(int mode);

  /** Interface to C language function: <br> <code> void {@native glEnd}(void); </code>    */
  public void glEnd();

  /** Interface to C language function: <br> <code> void {@native glEndList}(void); </code>    */
  public void glEndList();

  /** Entry point to C language function: <code> void {@native glEndOcclusionQueryNV}(void); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glEndOcclusionQueryNV();

  /** Entry point to C language function: <code> void {@native glEndVertexShaderEXT}(void); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glEndVertexShaderEXT();

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1d}(GLdouble u); </code>    */
  public void glEvalCoord1d(double u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1dv}(const GLdouble *  u); </code>    */
  public void glEvalCoord1dv(java.nio.DoubleBuffer u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1dv}(const GLdouble *  u); </code>    */
  public void glEvalCoord1dv(double[] u, int u_offset);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1f}(GLfloat u); </code>    */
  public void glEvalCoord1f(float u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1fv}(const GLfloat *  u); </code>    */
  public void glEvalCoord1fv(java.nio.FloatBuffer u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1fv}(const GLfloat *  u); </code>    */
  public void glEvalCoord1fv(float[] u, int u_offset);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2d}(GLdouble u, GLdouble v); </code>    */
  public void glEvalCoord2d(double u, double v);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2dv}(const GLdouble *  u); </code>    */
  public void glEvalCoord2dv(java.nio.DoubleBuffer u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2dv}(const GLdouble *  u); </code>    */
  public void glEvalCoord2dv(double[] u, int u_offset);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2f}(GLfloat u, GLfloat v); </code>    */
  public void glEvalCoord2f(float u, float v);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2fv}(const GLfloat *  u); </code>    */
  public void glEvalCoord2fv(java.nio.FloatBuffer u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2fv}(const GLfloat *  u); </code>    */
  public void glEvalCoord2fv(float[] u, int u_offset);

  /** Entry point to C language function: <code> void {@native glEvalMapsNV}(GLenum target, GLenum id); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glEvalMapsNV(int target, int id);

  /** Interface to C language function: <br> <code> void {@native glEvalMesh1}(GLenum mode, GLint i1, GLint i2); </code>    */
  public void glEvalMesh1(int mode, int i1, int i2);

  /** Interface to C language function: <br> <code> void {@native glEvalMesh2}(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2); </code>    */
  public void glEvalMesh2(int mode, int i1, int i2, int j1, int j2);

  /** Interface to C language function: <br> <code> void {@native glEvalPoint1}(GLint i); </code>    */
  public void glEvalPoint1(int i);

  /** Interface to C language function: <br> <code> void {@native glEvalPoint2}(GLint i, GLint j); </code>    */
  public void glEvalPoint2(int i, int j);

  /** Entry point to C language function: <code> void {@native glExtractComponentEXT}(GLuint red, GLuint green, GLuint blue); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glExtractComponentEXT(int red, int green, int blue);

  /** Interface to C language function: <br> <code> void {@native glFeedbackBuffer}(GLsizei size, GLenum type, GLfloat *  buffer); </code> 
      @param buffer a direct {@link java.nio.FloatBuffer}   */
  public void glFeedbackBuffer(int size, int type, java.nio.FloatBuffer buffer);

  /** Entry point to C language function: <code> void {@native glFinishFenceAPPLE}(GLuint mode); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glFinishFenceAPPLE(int mode);

  /** Entry point to C language function: <code> void {@native glFinishFenceNV}(GLuint mode); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glFinishFenceNV(int mode);

  /** Entry point to C language function: <code> void {@native glFinishObjectAPPLE}(GLenum target, GLint s); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glFinishObjectAPPLE(int target, int s);

  /** Entry point to C language function: <code> void {@native glFinishRenderAPPLE}(void); </code> <br>Part of <code>GL_APPLE_flush_render</code>   */
  public void glFinishRenderAPPLE();

  /** Entry point to C language function: <code> void {@native glFinishTextureSUNX}(void); </code> <br>Part of <code>GL_SUNX_constant_data</code>   */
  public void glFinishTextureSUNX();

  /** Entry point to C language function: <code> void {@native glFlushPixelDataRangeNV}(GLenum mode); </code> <br>Part of <code>GL_NV_pixel_data_range</code>   */
  public void glFlushPixelDataRangeNV(int mode);

  /** Entry point to C language function: <code> void {@native glFlushRenderAPPLE}(void); </code> <br>Part of <code>GL_APPLE_flush_render</code>   */
  public void glFlushRenderAPPLE();

  /** Entry point to C language function: <code> void {@native glFlushVertexArrayRangeAPPLE}(GLsizei length, GLvoid *  pointer); </code> <br>Part of <code>GL_APPLE_vertex_array_range</code>   */
  public void glFlushVertexArrayRangeAPPLE(int length, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glFlushVertexArrayRangeNV}(void); </code> <br>Part of <code>GL_NV_vertex_array_range</code>   */
  public void glFlushVertexArrayRangeNV();

  /** Entry point to C language function: <code> void {@native glFogCoordPointer}(GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_4</code>
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glFogCoordPointer(int type, int stride, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glFogCoordPointer}(GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glFogCoordPointer(int type, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> void {@native glFogCoordd}(GLdouble coord); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glFogCoordd(double coord);

  /** Entry point to C language function: <code> void {@native glFogCoorddv}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glFogCoorddv(java.nio.DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glFogCoorddv}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glFogCoorddv(double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glFogCoordf}(GLfloat coord); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glFogCoordf(float coord);

  /** Entry point to C language function: <code> void {@native glFogCoordfv}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glFogCoordfv(java.nio.FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glFogCoordfv}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glFogCoordfv(float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glFogCoordhNV}(GLhalfNV factor); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glFogCoordh(short factor);

  /** Entry point to C language function: <code> void {@native glFogCoordhvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glFogCoordhv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glFogCoordhvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glFogCoordhv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glFogi}(GLenum pname, GLint param); </code>    */
  public void glFogi(int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glFogiv}(GLenum pname, const GLint *  params); </code>    */
  public void glFogiv(int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glFogiv}(GLenum pname, const GLint *  params); </code>    */
  public void glFogiv(int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glFramebufferDrawBufferEXT}(GLuint target, GLenum id); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glFramebufferDrawBufferEXT(int target, int id);

  /** Entry point to C language function: <code> void {@native glFramebufferDrawBuffersEXT}(GLuint buffer, GLsizei drawbuffer, const GLenum *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glFramebufferDrawBuffersEXT(int buffer, int drawbuffer, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glFramebufferDrawBuffersEXT}(GLuint buffer, GLsizei drawbuffer, const GLenum *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glFramebufferDrawBuffersEXT(int buffer, int drawbuffer, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glFramebufferReadBufferEXT}(GLuint target, GLenum id); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glFramebufferReadBufferEXT(int target, int id);

  /** Entry point to C language function: <code> void {@native glGenFencesAPPLE}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glGenFencesAPPLE(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glGenFencesAPPLE}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glGenFencesAPPLE(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glGenFencesNV}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glGenFencesNV(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glGenFencesNV}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glGenFencesNV(int n, int[] ids, int ids_offset);

  /** Interface to C language function: <br> <code> GLuint {@native glGenLists}(GLsizei range); </code>    */
  public int glGenLists(int range);

  /** Entry point to C language function: <code> void {@native glGenOcclusionQueriesNV}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glGenOcclusionQueriesNV(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glGenOcclusionQueriesNV}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glGenOcclusionQueriesNV(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glGenProgramsARB}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGenProgramsARB(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glGenProgramsARB}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGenProgramsARB(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> GLuint {@native glGenSymbolsEXT}(GLenum datatype, GLenum storagetype, GLenum range, GLuint components); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glGenSymbolsEXT(int datatype, int storagetype, int range, int components);

  /** Entry point to C language function: <code> GLuint {@native glGenVertexShadersEXT}(GLuint type); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glGenVertexShadersEXT(int type);

  /** Entry point to C language function: <code> void {@native glGenerateMultiTexMipmapEXT}(GLenum target, GLenum id); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGenerateMultiTexMipmapEXT(int target, int id);

  /** Entry point to C language function: <code> void {@native glGenerateTextureMipmapEXT}(GLuint target, GLenum id); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGenerateTextureMipmapEXT(int target, int id);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformARB}(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLcharARB *  name); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetActiveUniformARB(int program, int index, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, java.nio.ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformARB}(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLcharARB *  name); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetActiveUniformARB(int program, int index, int bufSize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetAttachedObjectsARB}(GLhandleARB program, GLsizei maxCount, GLsizei *  count, GLhandleARB *  obj); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetAttachedObjectsARB(int program, int maxCount, java.nio.IntBuffer count, java.nio.IntBuffer obj);

  /** Entry point to C language function: <code> void {@native glGetAttachedObjectsARB}(GLhandleARB program, GLsizei maxCount, GLsizei *  count, GLhandleARB *  obj); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetAttachedObjectsARB(int program, int maxCount, int[] count, int count_offset, int[] obj, int obj_offset);

  /** Entry point to C language function: <code> void {@native glGetBooleanIndexedvEXT}(GLenum target, GLuint index, GLboolean *  data); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glGetBooleanIndexedv(int target, int index, java.nio.ByteBuffer data);

  /** Entry point to C language function: <code> void {@native glGetBooleanIndexedvEXT}(GLenum target, GLuint index, GLboolean *  data); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glGetBooleanIndexedv(int target, int index, byte[] data, int data_offset);

  /** Interface to C language function: <br> <code> void {@native glGetClipPlane}(GLenum plane, GLdouble *  equation); </code>    */
  public void glGetClipPlane(int plane, java.nio.DoubleBuffer equation);

  /** Interface to C language function: <br> <code> void {@native glGetClipPlane}(GLenum plane, GLdouble *  equation); </code>    */
  public void glGetClipPlane(int plane, double[] equation, int equation_offset);

  /** Entry point to C language function: <code> void {@native glGetColorTable}(GLenum target, GLenum format, GLenum type, GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetColorTable(int target, int format, int type, java.nio.Buffer table);

  /** Entry point to C language function: <code> void {@native glGetColorTable}(GLenum target, GLenum format, GLenum type, GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetColorTable(int target, int format, int type, long table_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetColorTableParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetColorTableParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetColorTableParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetColorTableParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetColorTableParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetColorTableParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetColorTableParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetColorTableParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetCompressedMultiTexImageEXT}(GLenum texture, GLenum target, GLint lod, GLvoid *  img); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetCompressedMultiTexImageEXT(int texture, int target, int lod, java.nio.Buffer img);

  /** Entry point to C language function: <code> void {@native glGetCompressedTextureImageEXT}(GLuint texture, GLenum target, GLint lod, GLvoid *  img); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetCompressedTextureImageEXT(int texture, int target, int lod, java.nio.Buffer img);

  /** Entry point to C language function: <code> void {@native glGetConvolutionFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetConvolutionFilter(int target, int format, int type, java.nio.Buffer table);

  /** Entry point to C language function: <code> void {@native glGetConvolutionFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetConvolutionFilter(int target, int format, int type, long table_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetConvolutionParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetConvolutionParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetConvolutionParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetConvolutionParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetConvolutionParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetConvolutionParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetConvolutionParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetConvolutionParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetDoubleIndexedvEXT}(GLenum index, GLuint pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetDoubleIndexedvEXT(int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetDoubleIndexedvEXT}(GLenum index, GLuint pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetDoubleIndexedvEXT(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetFenceivNV}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glGetFenceivNV(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetFenceivNV}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glGetFenceivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetFloatIndexedvEXT}(GLenum target, GLuint pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetFloatIndexedvEXT(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetFloatIndexedvEXT}(GLenum target, GLuint pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetFloatIndexedvEXT(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetFramebufferParameterivEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetFramebufferParameterivEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetFramebufferParameterivEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetFramebufferParameterivEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLhandleARB {@native glGetHandleARB}(GLenum type); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public int glGetHandleARB(int type);

  /** Entry point to C language function: <code> void {@native glGetHistogram}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetHistogram(int target, boolean reset, int format, int type, java.nio.Buffer values);

  /** Entry point to C language function: <code> void {@native glGetHistogram}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetHistogram(int target, boolean reset, int format, int type, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetHistogramParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetHistogramParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetHistogramParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetHistogramParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetHistogramParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetHistogramParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetHistogramParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetHistogramParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetInfoLogARB}(GLhandleARB program, GLsizei bufSize, GLsizei *  length, GLcharARB *  infoLog); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetInfoLogARB(int program, int bufSize, java.nio.IntBuffer length, java.nio.ByteBuffer infoLog);

  /** Entry point to C language function: <code> void {@native glGetInfoLogARB}(GLhandleARB program, GLsizei bufSize, GLsizei *  length, GLcharARB *  infoLog); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetInfoLogARB(int program, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point to C language function: <code> void {@native glGetIntegerIndexedvEXT}(GLenum target, GLuint index, GLint *  data); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glGetIntegerIndexedv(int target, int index, java.nio.IntBuffer data);

  /** Entry point to C language function: <code> void {@native glGetIntegerIndexedvEXT}(GLenum target, GLuint index, GLint *  data); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glGetIntegerIndexedv(int target, int index, int[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetInvariantBooleanvEXT}(GLuint target, GLenum index, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetInvariantBooleanvEXT(int target, int index, java.nio.ByteBuffer data);

  /** Entry point to C language function: <code> void {@native glGetInvariantBooleanvEXT}(GLuint target, GLenum index, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetInvariantBooleanvEXT(int target, int index, byte[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetInvariantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetInvariantFloatvEXT(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetInvariantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetInvariantFloatvEXT(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetInvariantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetInvariantIntegervEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetInvariantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetInvariantIntegervEXT(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetLightiv}(GLenum light, GLenum pname, GLint *  params); </code>    */
  public void glGetLightiv(int light, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetLightiv}(GLenum light, GLenum pname, GLint *  params); </code>    */
  public void glGetLightiv(int light, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantBooleanvEXT}(GLuint target, GLenum index, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetLocalConstantBooleanvEXT(int target, int index, java.nio.ByteBuffer data);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantBooleanvEXT}(GLuint target, GLenum index, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetLocalConstantBooleanvEXT(int target, int index, byte[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetLocalConstantFloatvEXT(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetLocalConstantFloatvEXT(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetLocalConstantIntegervEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetLocalConstantIntegervEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMapAttribParameterfvNV}(GLenum stage, GLuint portion, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapAttribParameterfvNV(int stage, int portion, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMapAttribParameterfvNV}(GLenum stage, GLuint portion, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapAttribParameterfvNV(int stage, int portion, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMapAttribParameterivNV}(GLenum target, GLuint attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapAttribParameterivNV(int target, int attachment, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMapAttribParameterivNV}(GLenum target, GLuint attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapAttribParameterivNV(int target, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMapControlPointsNV}(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *  points); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, boolean packed, java.nio.Buffer points);

  /** Entry point to C language function: <code> void {@native glGetMapParameterfvNV}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapParameterfvNV(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMapParameterfvNV}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapParameterfvNV(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMapParameterivNV}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapParameterivNV(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMapParameterivNV}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapParameterivNV(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetMapdv}(GLenum target, GLenum query, GLdouble *  v); </code>    */
  public void glGetMapdv(int target, int query, java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glGetMapdv}(GLenum target, GLenum query, GLdouble *  v); </code>    */
  public void glGetMapdv(int target, int query, double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glGetMapfv}(GLenum target, GLenum query, GLfloat *  v); </code>    */
  public void glGetMapfv(int target, int query, java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glGetMapfv}(GLenum target, GLenum query, GLfloat *  v); </code>    */
  public void glGetMapfv(int target, int query, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glGetMapiv}(GLenum target, GLenum query, GLint *  v); </code>    */
  public void glGetMapiv(int target, int query, java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glGetMapiv}(GLenum target, GLenum query, GLint *  v); </code>    */
  public void glGetMapiv(int target, int query, int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glGetMaterialiv}(GLenum face, GLenum pname, GLint *  params); </code>    */
  public void glGetMaterialiv(int face, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetMaterialiv}(GLenum face, GLenum pname, GLint *  params); </code>    */
  public void glGetMaterialiv(int face, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMinmax}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetMinmax(int target, boolean reset, int format, int type, java.nio.Buffer values);

  /** Entry point to C language function: <code> void {@native glGetMinmax}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetMinmax(int target, boolean reset, int format, int type, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetMinmaxParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetMinmaxParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMinmaxParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetMinmaxParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMinmaxParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetMinmaxParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMinmaxParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetMinmaxParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexEnvfvEXT}(GLenum stage, GLenum portion, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexEnvfvEXT(int stage, int portion, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexEnvfvEXT}(GLenum stage, GLenum portion, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexEnvfvEXT(int stage, int portion, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexEnvivEXT}(GLenum target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexEnvivEXT(int target, int attachment, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexEnvivEXT}(GLenum target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexEnvivEXT(int target, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGendvEXT}(GLenum target, GLenum index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexGendvEXT(int target, int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGendvEXT}(GLenum target, GLenum index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexGendvEXT(int target, int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGenfvEXT}(GLenum stage, GLenum portion, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexGenfvEXT(int stage, int portion, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGenfvEXT}(GLenum stage, GLenum portion, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexGenfvEXT(int stage, int portion, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGenivEXT}(GLenum target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexGenivEXT(int target, int attachment, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGenivEXT}(GLenum target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexGenivEXT(int target, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexImageEXT}(GLenum texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexImageEXT(int texture, int target, int level, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetMultiTexLevelParameterfvEXT}(GLenum texture, GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexLevelParameterfvEXT(int texture, int target, int level, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexLevelParameterfvEXT}(GLenum texture, GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexLevelParameterfvEXT(int texture, int target, int level, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexLevelParameterivEXT}(GLenum texture, GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexLevelParameterivEXT(int texture, int target, int level, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexLevelParameterivEXT}(GLenum texture, GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexLevelParameterivEXT(int texture, int target, int level, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterIivEXT}(GLenum target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterIivEXT(int target, int attachment, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterIivEXT}(GLenum target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterIivEXT(int target, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterIuivEXT}(GLenum program, GLenum target, GLenum index, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterIuivEXT(int program, int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterIuivEXT}(GLenum program, GLenum target, GLenum index, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterIuivEXT(int program, int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterfvEXT}(GLenum stage, GLenum portion, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterfvEXT(int stage, int portion, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterfvEXT}(GLenum stage, GLenum portion, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterfvEXT(int stage, int portion, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterivEXT}(GLenum target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterivEXT(int target, int attachment, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterivEXT}(GLenum target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterivEXT(int target, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterivEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedBufferParameterivEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterivEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedBufferParameterivEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferSubDataEXT}(GLuint target, ptrdiff_t offset, ptrdiff_t size, GLvoid *  data); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedBufferSubDataEXT(int target, int offset, int size, java.nio.Buffer data);

  /** Entry point to C language function: <code> void {@native glGetNamedFramebufferAttachmentParameterivEXT}(GLuint target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedFramebufferAttachmentParameterivEXT}(GLuint target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterIivEXT}(GLuint target, GLenum attachment, GLuint pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterIivEXT(int target, int attachment, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterIivEXT}(GLuint target, GLenum attachment, GLuint pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterIivEXT(int target, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterIuivEXT}(GLuint program, GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterIuivEXT(int program, int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterIuivEXT}(GLuint program, GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterIuivEXT(int program, int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterdvEXT}(GLuint target, GLenum index, GLuint pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterdvEXT(int target, int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterdvEXT}(GLuint target, GLenum index, GLuint pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterdvEXT(int target, int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterfvEXT}(GLuint stage, GLenum portion, GLuint pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterfvEXT(int stage, int portion, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterfvEXT}(GLuint stage, GLenum portion, GLuint pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterfvEXT(int stage, int portion, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramStringEXT}(GLuint target, GLenum format, GLenum type, GLvoid *  table); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramStringEXT(int target, int format, int type, java.nio.Buffer table);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramivEXT}(GLuint target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramivEXT(int target, int attachment, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramivEXT}(GLuint target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramivEXT(int target, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedRenderbufferParameterivEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedRenderbufferParameterivEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedRenderbufferParameterivEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedRenderbufferParameterivEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetObjectParameterfvARB}(GLhandleARB target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetObjectParameterfvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetObjectParameterfvARB}(GLhandleARB target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetObjectParameterfvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetObjectParameterivARB}(GLhandleARB target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetObjectParameterivARB(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetObjectParameterivARB}(GLhandleARB target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetObjectParameterivARB(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetOcclusionQueryivNV}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glGetOcclusionQueryivNV(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetOcclusionQueryivNV}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glGetOcclusionQueryivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetOcclusionQueryuivNV}(GLuint id, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glGetOcclusionQueryuivNV(int id, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetOcclusionQueryuivNV}(GLuint id, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glGetOcclusionQueryuivNV(int id, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapfv}(GLenum map, GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapfv(int map, java.nio.FloatBuffer values);

  /** Entry point to C language function: <code> void {@native glGetPixelMapfv}(GLenum map, GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapfv(int map, float[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapfv}(GLenum map, GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapfv(int map, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapuiv}(GLenum map, GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapuiv(int map, java.nio.IntBuffer values);

  /** Entry point to C language function: <code> void {@native glGetPixelMapuiv}(GLenum map, GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapuiv(int map, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapuiv}(GLenum map, GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapuiv(int map, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapusv}(GLenum map, GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapusv(int map, java.nio.ShortBuffer values);

  /** Entry point to C language function: <code> void {@native glGetPixelMapusv}(GLenum map, GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapusv(int map, short[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapusv}(GLenum map, GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapusv(int map, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetPolygonStipple}(GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPolygonStipple(java.nio.ByteBuffer mask);

  /** Entry point to C language function: <code> void {@native glGetPolygonStipple}(GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPolygonStipple(byte[] mask, int mask_offset);

  /** Entry point to C language function: <code> void {@native glGetPolygonStipple}(GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPolygonStipple(long mask_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramEnvParameterIivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramEnvParameterIivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramEnvParameterIuivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramEnvParameterIuivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterdvARB}(GLenum index, GLuint pname, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramEnvParameterdvARB(int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterdvARB}(GLenum index, GLuint pname, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramEnvParameterdvARB(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterfvARB}(GLenum target, GLuint pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramEnvParameterfvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterfvARB}(GLenum target, GLuint pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramEnvParameterfvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramLocalParameterIivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramLocalParameterIivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramLocalParameterIuivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramLocalParameterIuivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterdvARB}(GLenum index, GLuint pname, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramLocalParameterdvARB(int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterdvARB}(GLenum index, GLuint pname, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramLocalParameterdvARB(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterfvARB}(GLenum target, GLuint pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramLocalParameterfvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterfvARB}(GLenum target, GLuint pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramLocalParameterfvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramStringARB}(GLenum target, GLenum pname, GLvoid *  string); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param string a direct {@link java.nio.Buffer}   */
  public void glGetProgramStringARB(int target, int pname, java.nio.Buffer string);

  /** Entry point to C language function: <code> void {@native glGetProgramivARB}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramivARB(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramivARB}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramivARB(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjecti64vEXT}(GLuint id, GLenum pname, int64_t *  params); </code> <br>Part of <code>GL_EXT_timer_query</code>   */
  public void glGetQueryObjecti64vEXT(int id, int pname, com.sun.gluegen.runtime.PointerBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjecti64vEXT}(GLuint id, GLenum pname, int64_t *  params); </code> <br>Part of <code>GL_EXT_timer_query</code>   */
  public void glGetQueryObjecti64vEXT(int id, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectui64vEXT}(GLuint id, GLenum pname, uint64_t *  params); </code> <br>Part of <code>GL_EXT_timer_query</code>   */
  public void glGetQueryObjectui64vEXT(int id, int pname, com.sun.gluegen.runtime.PointerBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectui64vEXT}(GLuint id, GLenum pname, uint64_t *  params); </code> <br>Part of <code>GL_EXT_timer_query</code>   */
  public void glGetQueryObjectui64vEXT(int id, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetSeparableFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  row, GLvoid *  column, GLvoid *  span); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetSeparableFilter(int target, int format, int type, java.nio.Buffer row, java.nio.Buffer column, java.nio.Buffer span);

  /** Entry point to C language function: <code> void {@native glGetSeparableFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  row, GLvoid *  column, GLvoid *  span); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glGetSeparableFilter(int target, int format, int type, long row_buffer_offset, long column_buffer_offset, long span_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetShaderSourceARB}(GLhandleARB program, GLsizei bufSize, GLsizei *  length, GLcharARB *  infoLog); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetShaderSourceARB(int program, int bufSize, java.nio.IntBuffer length, java.nio.ByteBuffer infoLog);

  /** Entry point to C language function: <code> void {@native glGetShaderSourceARB}(GLhandleARB program, GLsizei bufSize, GLsizei *  length, GLcharARB *  infoLog); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetShaderSourceARB(int program, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexGendv}(GLenum coord, GLenum pname, GLdouble *  params); </code>    */
  public void glGetTexGendv(int coord, int pname, java.nio.DoubleBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexGendv}(GLenum coord, GLenum pname, GLdouble *  params); </code>    */
  public void glGetTexGendv(int coord, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureImageEXT}(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureImageEXT(int texture, int target, int level, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameterfvEXT}(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureLevelParameterfvEXT(int texture, int target, int level, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameterfvEXT}(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureLevelParameterfvEXT(int texture, int target, int level, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameterivEXT}(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureLevelParameterivEXT(int texture, int target, int level, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameterivEXT}(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureLevelParameterivEXT(int texture, int target, int level, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIivEXT}(GLuint target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterIivEXT(int target, int attachment, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIivEXT}(GLuint target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterIivEXT(int target, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIuivEXT}(GLuint program, GLenum target, GLenum index, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterIuivEXT(int program, int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIuivEXT}(GLuint program, GLenum target, GLenum index, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterIuivEXT(int program, int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterfvEXT}(GLuint stage, GLenum portion, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterfvEXT(int stage, int portion, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterfvEXT}(GLuint stage, GLenum portion, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterfvEXT(int stage, int portion, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterivEXT}(GLuint target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterivEXT(int target, int attachment, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterivEXT}(GLuint target, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterivEXT(int target, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLint {@native glGetUniformBufferSizeEXT}(GLuint program, GLint location); </code> <br>Part of <code>GL_EXT_bindable_uniform</code>   */
  public int glGetUniformBufferSizeEXT(int program, int location);

  /** Entry point to C language function: <code> GLint {@native glGetUniformLocationARB}(GLhandleARB program, const GLcharARB *  name); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public int glGetUniformLocationARB(int program, java.lang.String name);

  /** Entry point to C language function: <code> ptrdiff_t {@native glGetUniformOffsetEXT}(GLuint program, GLint location); </code> <br>Part of <code>GL_EXT_bindable_uniform</code>   */
  public int glGetUniformOffsetEXT(int program, int location);

  /** Entry point to C language function: <code> void {@native glGetUniformfvARB}(GLhandleARB program, GLint location, GLfloat *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetUniformfvARB(int program, int location, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformfvARB}(GLhandleARB program, GLint location, GLfloat *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetUniformfvARB(int program, int location, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformivARB}(GLhandleARB program, GLint location, GLint *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetUniformivARB(int program, int location, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformivARB}(GLhandleARB program, GLint location, GLint *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetUniformivARB(int program, int location, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVariantBooleanvEXT}(GLuint target, GLenum index, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetVariantBooleanvEXT(int target, int index, java.nio.ByteBuffer data);

  /** Entry point to C language function: <code> void {@native glGetVariantBooleanvEXT}(GLuint target, GLenum index, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetVariantBooleanvEXT(int target, int index, byte[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetVariantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetVariantFloatvEXT(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVariantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetVariantFloatvEXT(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVariantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetVariantIntegervEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVariantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetVariantIntegervEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdvARB}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetVertexAttribdvARB(int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdvARB}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetVertexAttribdvARB(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribfvARB}(GLuint target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetVertexAttribfvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribfvARB}(GLuint target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetVertexAttribfvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribivARB}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetVertexAttribivARB(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribivARB}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetVertexAttribivARB(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glHintPGI}(GLenum target, GLint s); </code> <br>Part of <code>GL_PGI_misc_hints</code>   */
  public void glHintPGI(int target, int s);

  /** Entry point to C language function: <code> void {@native glHistogram}(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glHistogram(int target, int width, int internalformat, boolean sink);

  /** Entry point to C language function: <code> void {@native glIndexFuncEXT}(GLenum target, GLclampf s); </code> <br>Part of <code>GL_EXT_index_func</code>   */
  public void glIndexFuncEXT(int target, float s);

  /** Interface to C language function: <br> <code> void {@native glIndexMask}(GLuint mask); </code>    */
  public void glIndexMask(int mask);

  /** Entry point to C language function: <code> void {@native glIndexMaterialEXT}(GLenum target, GLenum id); </code> <br>Part of <code>GL_EXT_index_material</code>   */
  public void glIndexMaterialEXT(int target, int id);

  /** Interface to C language function: <br> <code> void {@native glIndexPointer}(GLenum type, GLsizei stride, const GLvoid *  ptr); </code> 
      @param ptr a direct {@link java.nio.Buffer}   */
  public void glIndexPointer(int type, int stride, java.nio.Buffer ptr);

  /** Interface to C language function: <br> <code> void {@native glIndexd}(GLdouble c); </code>    */
  public void glIndexd(double c);

  /** Interface to C language function: <br> <code> void {@native glIndexdv}(const GLdouble *  c); </code>    */
  public void glIndexdv(java.nio.DoubleBuffer c);

  /** Interface to C language function: <br> <code> void {@native glIndexdv}(const GLdouble *  c); </code>    */
  public void glIndexdv(double[] c, int c_offset);

  /** Interface to C language function: <br> <code> void {@native glIndexf}(GLfloat c); </code>    */
  public void glIndexf(float c);

  /** Interface to C language function: <br> <code> void {@native glIndexfv}(const GLfloat *  c); </code>    */
  public void glIndexfv(java.nio.FloatBuffer c);

  /** Interface to C language function: <br> <code> void {@native glIndexfv}(const GLfloat *  c); </code>    */
  public void glIndexfv(float[] c, int c_offset);

  /** Interface to C language function: <br> <code> void {@native glIndexi}(GLint c); </code>    */
  public void glIndexi(int c);

  /** Interface to C language function: <br> <code> void {@native glIndexiv}(const GLint *  c); </code>    */
  public void glIndexiv(java.nio.IntBuffer c);

  /** Interface to C language function: <br> <code> void {@native glIndexiv}(const GLint *  c); </code>    */
  public void glIndexiv(int[] c, int c_offset);

  /** Interface to C language function: <br> <code> void {@native glIndexs}(GLshort c); </code>    */
  public void glIndexs(short c);

  /** Interface to C language function: <br> <code> void {@native glIndexsv}(const GLshort *  c); </code>    */
  public void glIndexsv(java.nio.ShortBuffer c);

  /** Interface to C language function: <br> <code> void {@native glIndexsv}(const GLshort *  c); </code>    */
  public void glIndexsv(short[] c, int c_offset);

  /** Interface to C language function: <br> <code> void {@native glIndexub}(GLubyte c); </code>    */
  public void glIndexub(byte c);

  /** Interface to C language function: <br> <code> void {@native glIndexubv}(const GLubyte *  c); </code>    */
  public void glIndexubv(java.nio.ByteBuffer c);

  /** Interface to C language function: <br> <code> void {@native glIndexubv}(const GLubyte *  c); </code>    */
  public void glIndexubv(byte[] c, int c_offset);

  /** Interface to C language function: <br> <code> void {@native glInitNames}(void); </code>    */
  public void glInitNames();

  /** Entry point to C language function: <code> void {@native glInsertComponentEXT}(GLuint red, GLuint green, GLuint blue); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glInsertComponentEXT(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glInterleavedArrays}(GLenum format, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glInterleavedArrays(int format, int stride, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glInterleavedArrays}(GLenum format, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glInterleavedArrays(int format, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsEnabledIndexedEXT}(GLenum target, GLuint index); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public boolean glIsEnabledIndexed(int target, int index);

  /** Entry point to C language function: <code> GLboolean {@native glIsFenceAPPLE}(GLuint id); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public boolean glIsFenceAPPLE(int id);

  /** Entry point to C language function: <code> GLboolean {@native glIsFenceNV}(GLuint id); </code> <br>Part of <code>GL_NV_fence</code>   */
  public boolean glIsFenceNV(int id);

  /** Interface to C language function: <br> <code> GLboolean {@native glIsList}(GLuint list); </code>    */
  public boolean glIsList(int list);

  /** Entry point to C language function: <code> GLboolean {@native glIsOcclusionQueryNV}(GLuint id); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public boolean glIsOcclusionQueryNV(int id);

  /** Entry point to C language function: <code> GLboolean {@native glIsProgramARB}(GLuint id); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public boolean glIsProgramARB(int id);

  /** Entry point to C language function: <code> GLboolean {@native glIsVariantEnabledEXT}(GLuint target, GLenum index); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public boolean glIsVariantEnabledEXT(int target, int index);

  /** Entry point to C language function: <code> GLboolean {@native glIsVertexAttribEnabledAPPLE}(GLuint index, GLenum pname); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public boolean glIsVertexAttribEnabledAPPLE(int index, int pname);

  /** Interface to C language function: <br> <code> void {@native glLightModeli}(GLenum pname, GLint param); </code>    */
  public void glLightModeli(int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glLightModeliv}(GLenum pname, const GLint *  params); </code>    */
  public void glLightModeliv(int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glLightModeliv}(GLenum pname, const GLint *  params); </code>    */
  public void glLightModeliv(int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glLighti}(GLenum light, GLenum pname, GLint param); </code>    */
  public void glLighti(int light, int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glLightiv}(GLenum light, GLenum pname, const GLint *  params); </code>    */
  public void glLightiv(int light, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glLightiv}(GLenum light, GLenum pname, const GLint *  params); </code>    */
  public void glLightiv(int light, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glLineStipple}(GLint factor, GLushort pattern); </code>    */
  public void glLineStipple(int factor, short pattern);

  /** Entry point to C language function: <code> void {@native glLinkProgramARB}(GLhandleARB mode); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glLinkProgramARB(int mode);

  /** Interface to C language function: <br> <code> void {@native glListBase}(GLuint base); </code>    */
  public void glListBase(int base);

  /** Interface to C language function: <br> <code> void {@native glLoadMatrixd}(const GLdouble *  m); </code>    */
  public void glLoadMatrixd(java.nio.DoubleBuffer m);

  /** Interface to C language function: <br> <code> void {@native glLoadMatrixd}(const GLdouble *  m); </code>    */
  public void glLoadMatrixd(double[] m, int m_offset);

  /** Interface to C language function: <br> <code> void {@native glLoadName}(GLuint name); </code>    */
  public void glLoadName(int name);

  /** Entry point to C language function: <code> void {@native glLoadTransposeMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glLoadTransposeMatrixd(java.nio.DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glLoadTransposeMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glLoadTransposeMatrixd(double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glLoadTransposeMatrixf}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glLoadTransposeMatrixf(java.nio.FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glLoadTransposeMatrixf}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glLoadTransposeMatrixf(float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glLockArraysEXT}(GLint x, GLsizei y); </code> <br>Part of <code>GL_EXT_compiled_vertex_array</code>   */
  public void glLockArraysEXT(int x, int y);

  /** Interface to C language function: <br> <code> void {@native glMap1d}(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code>    */
  public void glMap1d(int target, double u1, double u2, int stride, int order, java.nio.DoubleBuffer points);

  /** Interface to C language function: <br> <code> void {@native glMap1d}(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code>    */
  public void glMap1d(int target, double u1, double u2, int stride, int order, double[] points, int points_offset);

  /** Interface to C language function: <br> <code> void {@native glMap1f}(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code>    */
  public void glMap1f(int target, float u1, float u2, int stride, int order, java.nio.FloatBuffer points);

  /** Interface to C language function: <br> <code> void {@native glMap1f}(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code>    */
  public void glMap1f(int target, float u1, float u2, int stride, int order, float[] points, int points_offset);

  /** Interface to C language function: <br> <code> void {@native glMap2d}(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code>    */
  public void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, java.nio.DoubleBuffer points);

  /** Interface to C language function: <br> <code> void {@native glMap2d}(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code>    */
  public void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points, int points_offset);

  /** Interface to C language function: <br> <code> void {@native glMap2f}(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code>    */
  public void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, java.nio.FloatBuffer points);

  /** Interface to C language function: <br> <code> void {@native glMap2f}(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code>    */
  public void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMapControlPointsNV}(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *  points); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, boolean packed, java.nio.Buffer points);

  /** Interface to C language function: <br> <code> void {@native glMapGrid1d}(GLint un, GLdouble u1, GLdouble u2); </code>    */
  public void glMapGrid1d(int un, double u1, double u2);

  /** Interface to C language function: <br> <code> void {@native glMapGrid1f}(GLint un, GLfloat u1, GLfloat u2); </code>    */
  public void glMapGrid1f(int un, float u1, float u2);

  /** Interface to C language function: <br> <code> void {@native glMapGrid2d}(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2); </code>    */
  public void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);

  /** Interface to C language function: <br> <code> void {@native glMapGrid2f}(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2); </code>    */
  public void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);

  /** Entry point to C language function: <code> GLvoid *  {@native glMapNamedBufferEXT}(GLuint target, GLenum access); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public java.nio.ByteBuffer glMapNamedBufferEXT(int target, int access);

  /** Entry point to C language function: <code> void {@native glMapParameterfvNV}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glMapParameterfvNV(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glMapParameterfvNV}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glMapParameterfvNV(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMapParameterivNV}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glMapParameterivNV(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMapParameterivNV}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glMapParameterivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib1dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib1dAPPLE(int index, int size, double u1, double u2, int stride, int order, java.nio.DoubleBuffer points);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib1dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib1dAPPLE(int index, int size, double u1, double u2, int stride, int order, double[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib1fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib1fAPPLE(int index, int size, float u1, float u2, int stride, int order, java.nio.FloatBuffer points);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib1fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib1fAPPLE(int index, int size, float u1, float u2, int stride, int order, float[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib2dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib2dAPPLE(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, java.nio.DoubleBuffer points);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib2dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib2dAPPLE(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib2fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib2fAPPLE(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, java.nio.FloatBuffer points);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib2fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib2fAPPLE(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points, int points_offset);

  /** Interface to C language function: <br> <code> void {@native glMateriali}(GLenum face, GLenum pname, GLint param); </code>    */
  public void glMateriali(int face, int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glMaterialiv}(GLenum face, GLenum pname, const GLint *  params); </code>    */
  public void glMaterialiv(int face, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glMaterialiv}(GLenum face, GLenum pname, const GLint *  params); </code>    */
  public void glMaterialiv(int face, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMatrixFrustumEXT}(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixFrustumEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar);

  /** Entry point to C language function: <code> void {@native glMatrixIndexubvARB}(GLint size, const GLubyte *  weights); </code> <br>Part of <code>GL_ARB_matrix_palette</code>   */
  public void glMatrixIndexubvARB(int size, java.nio.ByteBuffer weights);

  /** Entry point to C language function: <code> void {@native glMatrixIndexubvARB}(GLint size, const GLubyte *  weights); </code> <br>Part of <code>GL_ARB_matrix_palette</code>   */
  public void glMatrixIndexubvARB(int size, byte[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glMatrixIndexuivARB}(GLint n, const GLuint *  ids); </code> <br>Part of <code>GL_ARB_matrix_palette</code>   */
  public void glMatrixIndexuivARB(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glMatrixIndexuivARB}(GLint n, const GLuint *  ids); </code> <br>Part of <code>GL_ARB_matrix_palette</code>   */
  public void glMatrixIndexuivARB(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glMatrixIndexusvARB}(GLint size, const GLushort *  weights); </code> <br>Part of <code>GL_ARB_matrix_palette</code>   */
  public void glMatrixIndexusvARB(int size, java.nio.ShortBuffer weights);

  /** Entry point to C language function: <code> void {@native glMatrixIndexusvARB}(GLint size, const GLushort *  weights); </code> <br>Part of <code>GL_ARB_matrix_palette</code>   */
  public void glMatrixIndexusvARB(int size, short[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glMatrixLoadIdentityEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoadIdentityEXT(int mode);

  /** Entry point to C language function: <code> void {@native glMatrixLoadTransposedEXT}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoadTransposedEXT(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMatrixLoadTransposedEXT}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoadTransposedEXT(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMatrixLoadTransposefEXT}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoadTransposefEXT(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMatrixLoadTransposefEXT}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoadTransposefEXT(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMatrixLoaddEXT}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoaddEXT(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMatrixLoaddEXT}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoaddEXT(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMatrixLoadfEXT}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoadfEXT(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMatrixLoadfEXT}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoadfEXT(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMatrixMultTransposedEXT}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultTransposedEXT(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMatrixMultTransposedEXT}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultTransposedEXT(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMatrixMultTransposefEXT}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultTransposefEXT(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMatrixMultTransposefEXT}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultTransposefEXT(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMatrixMultdEXT}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultdEXT(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMatrixMultdEXT}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultdEXT(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMatrixMultfEXT}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultfEXT(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMatrixMultfEXT}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultfEXT(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMatrixOrthoEXT}(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixOrthoEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar);

  /** Entry point to C language function: <code> void {@native glMatrixPopEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixPopEXT(int mode);

  /** Entry point to C language function: <code> void {@native glMatrixPushEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixPushEXT(int mode);

  /** Entry point to C language function: <code> void {@native glMatrixRotatedEXT}(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixRotatedEXT(int target, double s, double t, double r, double q);

  /** Entry point to C language function: <code> void {@native glMatrixRotatefEXT}(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixRotatefEXT(int target, float s, float t, float r, float q);

  /** Entry point to C language function: <code> void {@native glMatrixScaledEXT}(GLenum target, GLdouble s, GLdouble t, GLdouble r); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixScaledEXT(int target, double s, double t, double r);

  /** Entry point to C language function: <code> void {@native glMatrixScalefEXT}(GLenum target, GLfloat s, GLfloat t, GLfloat r); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixScalefEXT(int target, float s, float t, float r);

  /** Entry point to C language function: <code> void {@native glMatrixTranslatedEXT}(GLenum target, GLdouble s, GLdouble t, GLdouble r); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixTranslatedEXT(int target, double s, double t, double r);

  /** Entry point to C language function: <code> void {@native glMatrixTranslatefEXT}(GLenum target, GLfloat s, GLfloat t, GLfloat r); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixTranslatefEXT(int target, float s, float t, float r);

  /** Entry point to C language function: <code> void {@native glMinmax}(GLenum target, GLenum internalformat, GLboolean sink); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glMinmax(int target, int internalformat, boolean sink);

  /** Interface to C language function: <br> <code> void {@native glMultMatrixd}(const GLdouble *  m); </code>    */
  public void glMultMatrixd(java.nio.DoubleBuffer m);

  /** Interface to C language function: <br> <code> void {@native glMultMatrixd}(const GLdouble *  m); </code>    */
  public void glMultMatrixd(double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMultTransposeMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultTransposeMatrixd(java.nio.DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glMultTransposeMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultTransposeMatrixd(double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMultTransposeMatrixf}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultTransposeMatrixf(java.nio.FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glMultTransposeMatrixf}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultTransposeMatrixf(float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexBufferEXT}(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLuint dfactorAlpha); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexBufferEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1d}(GLenum target, GLdouble s); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1d(int target, double s);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1dv(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1f}(GLenum target, GLfloat s); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1f(int target, float s);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1fv(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1fv(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1hNV}(GLenum target, GLhalfNV s); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord1h(int target, short s);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1hvNV}(GLenum index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord1hv(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1hvNV}(GLenum index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord1hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1i}(GLenum target, GLint s); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1i(int target, int s);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1iv(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1s}(GLenum target, GLshort s); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1s(int target, short s);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1sv(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord1sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2d}(GLenum target, GLdouble s, GLdouble t); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2d(int target, double s, double t);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2dv(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2f}(GLenum target, GLfloat s, GLfloat t); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2f(int target, float s, float t);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2fv(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2fv(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2hNV}(GLenum target, GLhalfNV s, GLhalfNV t); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord2h(int target, short s, short t);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2hvNV}(GLenum index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord2hv(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2hvNV}(GLenum index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord2hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2i}(GLenum target, GLint s, GLint t); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2i(int target, int s, int t);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2iv(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2s}(GLenum target, GLshort s, GLshort t); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2s(int target, short s, short t);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2sv(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord2sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3d}(GLenum target, GLdouble s, GLdouble t, GLdouble r); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3d(int target, double s, double t, double r);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3dv(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3f}(GLenum target, GLfloat s, GLfloat t, GLfloat r); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3f(int target, float s, float t, float r);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3fv(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3fv(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3hNV}(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord3h(int target, short s, short t, short r);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3hvNV}(GLenum index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord3hv(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3hvNV}(GLenum index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord3hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3i}(GLenum target, GLint s, GLint t, GLint r); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3i(int target, int s, int t, int r);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3iv(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3s}(GLenum target, GLshort s, GLshort t, GLshort r); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3s(int target, short s, short t, short r);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3sv(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord3sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4d}(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord4d(int target, double s, double t, double r, double q);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord4dv(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord4dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord4fv(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord4fv(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4hNV}(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord4h(int target, short s, short t, short r, short q);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4hvNV}(GLenum index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord4hv(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4hvNV}(GLenum index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord4hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4i}(GLenum target, GLint start, GLint x, GLint y, GLint width); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord4i(int target, int start, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord4iv(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord4iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4s}(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord4s(int target, short s, short t, short r, short q);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord4sv(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glMultiTexCoord4sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordPointerEXT}(GLenum index, GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexCoordPointerEXT(int index, int size, int type, int stride, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glMultiTexEnvfEXT}(GLenum texture, GLenum target, GLenum pname, GLfloat param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexEnvfEXT(int texture, int target, int pname, float param);

  /** Entry point to C language function: <code> void {@native glMultiTexEnvfvEXT}(GLenum target, GLenum index, GLenum count, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexEnvfvEXT(int target, int index, int count, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexEnvfvEXT}(GLenum target, GLenum index, GLenum count, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexEnvfvEXT(int target, int index, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexEnviEXT}(GLenum target, GLenum attachment, GLenum texture, GLint level); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexEnviEXT(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glMultiTexEnvivEXT}(GLenum texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexEnvivEXT(int texture, int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexEnvivEXT}(GLenum texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexEnvivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexGendEXT}(GLenum texunit, GLenum coord, GLenum pname, GLdouble param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGendEXT(int texunit, int coord, int pname, double param);

  /** Entry point to C language function: <code> void {@native glMultiTexGendvEXT}(GLenum target, GLenum index, GLenum count, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGendvEXT(int target, int index, int count, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexGendvEXT}(GLenum target, GLenum index, GLenum count, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGendvEXT(int target, int index, int count, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexGenfEXT}(GLenum texture, GLenum target, GLenum pname, GLfloat param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGenfEXT(int texture, int target, int pname, float param);

  /** Entry point to C language function: <code> void {@native glMultiTexGenfvEXT}(GLenum target, GLenum index, GLenum count, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGenfvEXT(int target, int index, int count, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexGenfvEXT}(GLenum target, GLenum index, GLenum count, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGenfvEXT(int target, int index, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexGeniEXT}(GLenum target, GLenum attachment, GLenum texture, GLint level); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGeniEXT(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glMultiTexGenivEXT}(GLenum texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGenivEXT(int texture, int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexGenivEXT}(GLenum texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGenivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexImage1DEXT}(GLenum texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexImage1DEXT(int texture, int target, int level, int internalformat, int width, int border, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glMultiTexImage2DEXT}(GLenum texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexImage2DEXT(int texture, int target, int level, int internalformat, int width, int height, int border, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glMultiTexImage3DEXT}(GLenum texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexImage3DEXT(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterIivEXT}(GLenum texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterIivEXT(int texture, int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterIivEXT}(GLenum texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterIivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterIuivEXT}(GLenum program, GLenum target, GLenum index, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterIuivEXT(int program, int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterIuivEXT}(GLenum program, GLenum target, GLenum index, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterIuivEXT(int program, int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterfEXT}(GLenum texture, GLenum target, GLenum pname, GLfloat param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterfEXT(int texture, int target, int pname, float param);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterfvEXT}(GLenum target, GLenum index, GLenum count, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterfvEXT(int target, int index, int count, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterfvEXT}(GLenum target, GLenum index, GLenum count, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterfvEXT(int target, int index, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexParameteriEXT}(GLenum target, GLenum attachment, GLenum texture, GLint level); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameteriEXT(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterivEXT}(GLenum texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterivEXT(int texture, int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterivEXT}(GLenum texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexRenderbufferEXT}(GLenum red, GLenum green, GLuint blue); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexRenderbufferEXT(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glMultiTexSubImage1DEXT}(GLenum texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexSubImage1DEXT(int texture, int target, int level, int xoffset, int width, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glMultiTexSubImage2DEXT}(GLenum texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glMultiTexSubImage3DEXT}(GLenum texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glNamedBufferDataEXT}(GLuint target, ptrdiff_t size, const GLvoid *  data, GLenum usage); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedBufferDataEXT(int target, int size, java.nio.Buffer data, int usage);

  /** Entry point to C language function: <code> void {@native glNamedBufferSubDataEXT}(GLuint target, ptrdiff_t offset, ptrdiff_t size, const GLvoid *  data); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedBufferSubDataEXT(int target, int offset, int size, java.nio.Buffer data);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferRenderbufferEXT}(GLuint sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLuint dfactorAlpha); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferRenderbufferEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTexture1DEXT}(GLuint target, GLenum attachment, GLenum textarget, GLuint texture, GLint level); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTexture1DEXT(int target, int attachment, int textarget, int texture, int level);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTexture2DEXT}(GLuint target, GLenum attachment, GLenum textarget, GLuint texture, GLint level); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTexture2DEXT(int target, int attachment, int textarget, int texture, int level);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTexture3DEXT}(GLuint target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTexture3DEXT(int target, int attachment, int textarget, int texture, int level, int zoffset);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTextureEXT}(GLuint target, GLenum attachment, GLuint texture, GLint level); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTextureEXT(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTextureFaceEXT}(GLuint target, GLenum attachment, GLuint texture, GLint level, GLenum face); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTextureFaceEXT(int target, int attachment, int texture, int level, int face);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTextureLayerEXT}(GLuint target, GLenum index, GLuint buffer, GLint offset, GLint size); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTextureLayerEXT(int target, int index, int buffer, int offset, int size);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4dEXT}(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameter4dEXT(int program, int target, int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4dvEXT}(GLuint target, GLenum index, GLuint count, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameter4dvEXT(int target, int index, int count, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4dvEXT}(GLuint target, GLenum index, GLuint count, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameter4dvEXT(int target, int index, int count, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4fEXT}(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameter4fEXT(int program, int target, int index, float x, float y, float z, float w);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4fvEXT}(GLuint target, GLenum index, GLuint count, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameter4fvEXT(int target, int index, int count, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4fvEXT}(GLuint target, GLenum index, GLuint count, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameter4fvEXT(int target, int index, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4iEXT}(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameterI4iEXT(int program, int target, int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4ivEXT}(GLuint texture, GLenum target, GLuint pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameterI4ivEXT(int texture, int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4ivEXT}(GLuint texture, GLenum target, GLuint pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameterI4ivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4uiEXT}(GLuint op, GLenum dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameterI4uiEXT(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4uivEXT}(GLuint program, GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameterI4uivEXT(int program, int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4uivEXT}(GLuint program, GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameterI4uivEXT(int program, int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameters4fvEXT}(GLuint target, GLenum buffer, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameters4fvEXT(int target, int buffer, int index, int count, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameters4fvEXT}(GLuint target, GLenum buffer, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameters4fvEXT(int target, int buffer, int index, int count, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParametersI4ivEXT}(GLuint target, GLenum buffer, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParametersI4ivEXT(int target, int buffer, int index, int count, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParametersI4ivEXT}(GLuint target, GLenum buffer, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParametersI4ivEXT(int target, int buffer, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParametersI4uivEXT}(GLuint target, GLenum buffer, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParametersI4uivEXT(int target, int buffer, int index, int count, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParametersI4uivEXT}(GLuint target, GLenum buffer, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParametersI4uivEXT(int target, int buffer, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramStringEXT}(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *  string); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramStringEXT(int program, int target, int format, int len, java.nio.Buffer string);

  /** Entry point to C language function: <code> void {@native glNamedRenderbufferStorageEXT}(GLuint target, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedRenderbufferStorageEXT(int target, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glNamedRenderbufferStorageMultisampleCoverageEXT}(GLuint target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedRenderbufferStorageMultisampleCoverageEXT(int target, int coverageSamples, int colorSamples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glNamedRenderbufferStorageMultisampleEXT}(GLuint target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedRenderbufferStorageMultisampleEXT(int target, int samples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> GLuint {@native glNewBufferRegion}(GLenum type); </code> <br>Part of <code>GL_KTX_buffer_region</code>   */
  public int glNewBufferRegion(int type);

  /** Interface to C language function: <br> <code> void {@native glNewList}(GLuint list, GLenum mode); </code>    */
  public void glNewList(int list, int mode);

  /** Interface to C language function: <br> <code> void {@native glNormal3b}(GLbyte nx, GLbyte ny, GLbyte nz); </code>    */
  public void glNormal3b(byte nx, byte ny, byte nz);

  /** Interface to C language function: <br> <code> void {@native glNormal3bv}(const GLbyte *  v); </code>    */
  public void glNormal3bv(java.nio.ByteBuffer v);

  /** Interface to C language function: <br> <code> void {@native glNormal3bv}(const GLbyte *  v); </code>    */
  public void glNormal3bv(byte[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glNormal3d}(GLdouble nx, GLdouble ny, GLdouble nz); </code>    */
  public void glNormal3d(double nx, double ny, double nz);

  /** Interface to C language function: <br> <code> void {@native glNormal3dv}(const GLdouble *  v); </code>    */
  public void glNormal3dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glNormal3dv}(const GLdouble *  v); </code>    */
  public void glNormal3dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glNormal3fv}(const GLfloat *  v); </code>    */
  public void glNormal3fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glNormal3fv}(const GLfloat *  v); </code>    */
  public void glNormal3fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glNormal3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glNormal3h(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glNormal3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glNormal3hv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glNormal3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glNormal3hv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glNormal3i}(GLint nx, GLint ny, GLint nz); </code>    */
  public void glNormal3i(int nx, int ny, int nz);

  /** Interface to C language function: <br> <code> void {@native glNormal3iv}(const GLint *  v); </code>    */
  public void glNormal3iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glNormal3iv}(const GLint *  v); </code>    */
  public void glNormal3iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glNormal3s}(GLshort nx, GLshort ny, GLshort nz); </code>    */
  public void glNormal3s(short nx, short ny, short nz);

  /** Interface to C language function: <br> <code> void {@native glNormal3sv}(const GLshort *  v); </code>    */
  public void glNormal3sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glNormal3sv}(const GLshort *  v); </code>    */
  public void glNormal3sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glPNTrianglesfATI}(GLenum target, GLfloat s); </code> <br>Part of <code>GL_ATI_pn_triangles</code>   */
  public void glPNTrianglesfATI(int target, float s);

  /** Entry point to C language function: <code> void {@native glPNTrianglesiATI}(GLenum target, GLint s); </code> <br>Part of <code>GL_ATI_pn_triangles</code>   */
  public void glPNTrianglesiATI(int target, int s);

  /** Interface to C language function: <br> <code> void {@native glPassThrough}(GLfloat token); </code>    */
  public void glPassThrough(float token);

  /** Entry point to C language function: <code> void {@native glPixelDataRangeNV}(GLenum target, GLsizei level, GLvoid *  img); </code> <br>Part of <code>GL_NV_pixel_data_range</code>
      @param img a direct {@link java.nio.Buffer}   */
  public void glPixelDataRangeNV(int target, int level, java.nio.Buffer img);

  /** Entry point to C language function: <code> void {@native glPixelMapfv}(GLenum map, GLint mapsize, const GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapfv(int map, int mapsize, java.nio.FloatBuffer values);

  /** Entry point to C language function: <code> void {@native glPixelMapfv}(GLenum map, GLint mapsize, const GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapfv(int map, int mapsize, float[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glPixelMapfv}(GLenum map, GLint mapsize, const GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapfv(int map, int mapsize, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glPixelMapuiv}(GLenum map, GLint mapsize, const GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapuiv(int map, int mapsize, java.nio.IntBuffer values);

  /** Entry point to C language function: <code> void {@native glPixelMapuiv}(GLenum map, GLint mapsize, const GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapuiv(int map, int mapsize, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glPixelMapuiv}(GLenum map, GLint mapsize, const GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapuiv(int map, int mapsize, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glPixelMapusv}(GLenum map, GLint mapsize, const GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapusv(int map, int mapsize, java.nio.ShortBuffer values);

  /** Entry point to C language function: <code> void {@native glPixelMapusv}(GLenum map, GLint mapsize, const GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapusv(int map, int mapsize, short[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glPixelMapusv}(GLenum map, GLint mapsize, const GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapusv(int map, int mapsize, long values_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glPixelTransferf}(GLenum pname, GLfloat param); </code>    */
  public void glPixelTransferf(int pname, float param);

  /** Interface to C language function: <br> <code> void {@native glPixelTransferi}(GLenum pname, GLint param); </code>    */
  public void glPixelTransferi(int pname, int param);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameterfEXT}(GLenum target, GLenum pname, GLfloat params); </code> <br>Part of <code>GL_EXT_pixel_transform</code>   */
  public void glPixelTransformParameterfEXT(int target, int pname, float params);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameterfvEXT}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_pixel_transform</code>   */
  public void glPixelTransformParameterfvEXT(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameterfvEXT}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_pixel_transform</code>   */
  public void glPixelTransformParameterfvEXT(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameteriEXT}(GLenum target, GLenum pname, GLint params); </code> <br>Part of <code>GL_EXT_pixel_transform</code>   */
  public void glPixelTransformParameteriEXT(int target, int pname, int params);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameterivEXT}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_pixel_transform</code>   */
  public void glPixelTransformParameterivEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameterivEXT}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_pixel_transform</code>   */
  public void glPixelTransformParameterivEXT(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glPixelZoom}(GLfloat xfactor, GLfloat yfactor); </code>    */
  public void glPixelZoom(float xfactor, float yfactor);

  /** Entry point to C language function: <code> void {@native glPolygonStipple}(const GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPolygonStipple(java.nio.ByteBuffer mask);

  /** Entry point to C language function: <code> void {@native glPolygonStipple}(const GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPolygonStipple(byte[] mask, int mask_offset);

  /** Entry point to C language function: <code> void {@native glPolygonStipple}(const GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPolygonStipple(long mask_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glPopAttrib}(void); </code>    */
  public void glPopAttrib();

  /** Interface to C language function: <br> <code> void {@native glPopClientAttrib}(void); </code>    */
  public void glPopClientAttrib();

  /** Interface to C language function: <br> <code> void {@native glPopName}(void); </code>    */
  public void glPopName();

  /** Entry point to C language function: <code> void {@native glPrimitiveRestartNV}(void); </code> <br>Part of <code>GL_NV_primitive_restart</code>   */
  public void glPrimitiveRestart();

  /** Interface to C language function: <br> <code> void {@native glPrioritizeTextures}(GLsizei n, const GLuint *  textures, const GLclampf *  priorities); </code>    */
  public void glPrioritizeTextures(int n, java.nio.IntBuffer textures, java.nio.FloatBuffer priorities);

  /** Interface to C language function: <br> <code> void {@native glPrioritizeTextures}(GLsizei n, const GLuint *  textures, const GLclampf *  priorities); </code>    */
  public void glPrioritizeTextures(int n, int[] textures, int textures_offset, float[] priorities, int priorities_offset);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersIivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>   */
  public void glProgramBufferParametersIivNV(int target, int buffer, int index, int count, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersIivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>   */
  public void glProgramBufferParametersIivNV(int target, int buffer, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersIuivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>   */
  public void glProgramBufferParametersIuivNV(int target, int buffer, int index, int count, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersIuivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>   */
  public void glProgramBufferParametersIuivNV(int target, int buffer, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersfvNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>   */
  public void glProgramBufferParametersfvNV(int target, int buffer, int index, int count, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersfvNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>   */
  public void glProgramBufferParametersfvNV(int target, int buffer, int index, int count, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4dARB}(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramEnvParameter4dARB(int target, int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramEnvParameter4dvARB(int target, int index, java.nio.DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramEnvParameter4dvARB(int target, int index, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4fARB}(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramEnvParameter4fARB(int target, int index, float x, float y, float z, float w);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4fvARB}(GLenum target, GLuint pname, const GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramEnvParameter4fvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4fvARB}(GLenum target, GLuint pname, const GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramEnvParameter4fvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4iNV}(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParameterI4iNV(int target, int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParameterI4ivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParameterI4ivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4uiNV}(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParameterI4uiNV(int target, int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParameterI4uivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParameterI4uivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameters4fvEXT}(GLenum target, GLuint filter, GLsizei n, const GLfloat *  weights); </code> <br>Part of <code>GL_EXT_gpu_program_parameters</code>   */
  public void glProgramEnvParameters4fvEXT(int target, int filter, int n, java.nio.FloatBuffer weights);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameters4fvEXT}(GLenum target, GLuint filter, GLsizei n, const GLfloat *  weights); </code> <br>Part of <code>GL_EXT_gpu_program_parameters</code>   */
  public void glProgramEnvParameters4fvEXT(int target, int filter, int n, float[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParametersI4ivNV(int target, int index, int count, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParametersI4ivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParametersI4uivNV(int target, int index, int count, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParametersI4uivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4dARB}(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramLocalParameter4dARB(int target, int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramLocalParameter4dvARB(int target, int index, java.nio.DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramLocalParameter4dvARB(int target, int index, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4fARB}(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramLocalParameter4fARB(int target, int index, float x, float y, float z, float w);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4fvARB}(GLenum target, GLuint pname, const GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramLocalParameter4fvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4fvARB}(GLenum target, GLuint pname, const GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramLocalParameter4fvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4iNV}(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParameterI4iNV(int target, int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParameterI4ivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParameterI4ivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4uiNV}(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParameterI4uiNV(int target, int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParameterI4uivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParameterI4uivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameters4fvEXT}(GLenum target, GLuint filter, GLsizei n, const GLfloat *  weights); </code> <br>Part of <code>GL_EXT_gpu_program_parameters</code>   */
  public void glProgramLocalParameters4fvEXT(int target, int filter, int n, java.nio.FloatBuffer weights);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameters4fvEXT}(GLenum target, GLuint filter, GLsizei n, const GLfloat *  weights); </code> <br>Part of <code>GL_EXT_gpu_program_parameters</code>   */
  public void glProgramLocalParameters4fvEXT(int target, int filter, int n, float[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParametersI4ivNV(int target, int index, int count, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParametersI4ivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParametersI4uivNV(int target, int index, int count, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParametersI4uivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramStringARB}(GLenum target, GLenum format, GLsizei len, const GLvoid *  string); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramStringARB(int target, int format, int len, java.lang.String string);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fEXT}(GLuint program, GLint location, GLfloat v0); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1fEXT(int program, int location, float v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1fvEXT(int program, int location, int count, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1fvEXT(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1iEXT}(GLuint target, GLint s, GLint t); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1iEXT(int target, int s, int t);

  /** Entry point to C language function: <code> void {@native glProgramUniform1ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1ivEXT(int program, int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1ivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uiEXT}(GLuint program, GLint location, GLuint buffer); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1uiEXT(int program, int location, int buffer);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1uivEXT(int program, int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1uivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fEXT}(GLuint program, GLint location, GLfloat v0, GLfloat v1); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2fEXT(int program, int location, float v0, float v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2fvEXT(int program, int location, int count, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2fvEXT(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2iEXT}(GLuint target, GLint s, GLint t, GLint r); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2iEXT(int target, int s, int t, int r);

  /** Entry point to C language function: <code> void {@native glProgramUniform2ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2ivEXT(int program, int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2ivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uiEXT}(GLuint program, GLint location, GLuint v0, GLuint v1); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2uiEXT(int program, int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2uivEXT(int program, int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2uivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fEXT}(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3fEXT(int program, int location, float v0, float v1, float v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3fvEXT(int program, int location, int count, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3fvEXT(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3iEXT}(GLuint target, GLint start, GLint x, GLint y, GLint width); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3iEXT(int target, int start, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glProgramUniform3ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3ivEXT(int program, int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3ivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uiEXT}(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3uiEXT(int program, int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3uivEXT(int program, int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3uivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fEXT}(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4fEXT(int program, int location, float v0, float v1, float v2, float v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4fvEXT(int program, int location, int count, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4fvEXT(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4iEXT}(GLuint target, GLint level, GLint xoffset, GLint x, GLint y, GLint width); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4iEXT(int target, int level, int xoffset, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glProgramUniform4ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4ivEXT(int program, int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4ivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uiEXT}(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4uiEXT(int program, int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4uivEXT(int program, int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4uivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2fvEXT(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2x3fvEXT(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2x3fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2x4fvEXT(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2x4fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3fvEXT(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3x2fvEXT(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3x2fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3x4fvEXT(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3x4fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4fvEXT(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4x2fvEXT(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4x2fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4x3fvEXT(int program, int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4x3fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramVertexLimitNV}(GLenum target, GLint limit); </code> <br>Part of <code>GL_NV_geometry_program4</code>   */
  public void glProgramVertexLimitNV(int target, int limit);

  /** Interface to C language function: <br> <code> void {@native glPushAttrib}(GLbitfield mask); </code>    */
  public void glPushAttrib(int mask);

  /** Interface to C language function: <br> <code> void {@native glPushClientAttrib}(GLbitfield mask); </code>    */
  public void glPushClientAttrib(int mask);

  /** Entry point to C language function: <code> void {@native glPushClientAttribDefaultEXT}(GLbitfield mode); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glPushClientAttribDefaultEXT(int mode);

  /** Interface to C language function: <br> <code> void {@native glPushName}(GLuint name); </code>    */
  public void glPushName(int name);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2d}(GLdouble x, GLdouble y); </code>    */
  public void glRasterPos2d(double x, double y);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2dv}(const GLdouble *  v); </code>    */
  public void glRasterPos2dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2dv}(const GLdouble *  v); </code>    */
  public void glRasterPos2dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2f}(GLfloat x, GLfloat y); </code>    */
  public void glRasterPos2f(float x, float y);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2fv}(const GLfloat *  v); </code>    */
  public void glRasterPos2fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2fv}(const GLfloat *  v); </code>    */
  public void glRasterPos2fv(float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2i}(GLint x, GLint y); </code>    */
  public void glRasterPos2i(int x, int y);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2iv}(const GLint *  v); </code>    */
  public void glRasterPos2iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2iv}(const GLint *  v); </code>    */
  public void glRasterPos2iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2s}(GLshort x, GLshort y); </code>    */
  public void glRasterPos2s(short x, short y);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2sv}(const GLshort *  v); </code>    */
  public void glRasterPos2sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2sv}(const GLshort *  v); </code>    */
  public void glRasterPos2sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3d}(GLdouble x, GLdouble y, GLdouble z); </code>    */
  public void glRasterPos3d(double x, double y, double z);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3dv}(const GLdouble *  v); </code>    */
  public void glRasterPos3dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3dv}(const GLdouble *  v); </code>    */
  public void glRasterPos3dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3f}(GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glRasterPos3f(float x, float y, float z);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3fv}(const GLfloat *  v); </code>    */
  public void glRasterPos3fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3fv}(const GLfloat *  v); </code>    */
  public void glRasterPos3fv(float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3i}(GLint x, GLint y, GLint z); </code>    */
  public void glRasterPos3i(int x, int y, int z);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3iv}(const GLint *  v); </code>    */
  public void glRasterPos3iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3iv}(const GLint *  v); </code>    */
  public void glRasterPos3iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3s}(GLshort x, GLshort y, GLshort z); </code>    */
  public void glRasterPos3s(short x, short y, short z);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3sv}(const GLshort *  v); </code>    */
  public void glRasterPos3sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3sv}(const GLshort *  v); </code>    */
  public void glRasterPos3sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4d}(GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code>    */
  public void glRasterPos4d(double x, double y, double z, double w);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4dv}(const GLdouble *  v); </code>    */
  public void glRasterPos4dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4dv}(const GLdouble *  v); </code>    */
  public void glRasterPos4dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4f}(GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glRasterPos4f(float x, float y, float z, float w);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4fv}(const GLfloat *  v); </code>    */
  public void glRasterPos4fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4fv}(const GLfloat *  v); </code>    */
  public void glRasterPos4fv(float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4i}(GLint x, GLint y, GLint z, GLint w); </code>    */
  public void glRasterPos4i(int x, int y, int z, int w);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4iv}(const GLint *  v); </code>    */
  public void glRasterPos4iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4iv}(const GLint *  v); </code>    */
  public void glRasterPos4iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4s}(GLshort x, GLshort y, GLshort z, GLshort w); </code>    */
  public void glRasterPos4s(short x, short y, short z, short w);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4sv}(const GLshort *  v); </code>    */
  public void glRasterPos4sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4sv}(const GLshort *  v); </code>    */
  public void glRasterPos4sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glReadBufferRegion}(GLuint target, GLint start, GLint x, GLsizei y, GLsizei width); </code> <br>Part of <code>GL_KTX_buffer_region</code>   */
  public void glReadBufferRegion(int target, int start, int x, int y, int width);

  /** Interface to C language function: <br> <code> void {@native glRectd}(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2); </code>    */
  public void glRectd(double x1, double y1, double x2, double y2);

  /** Interface to C language function: <br> <code> void {@native glRectdv}(const GLdouble *  v1, const GLdouble *  v2); </code>    */
  public void glRectdv(java.nio.DoubleBuffer v1, java.nio.DoubleBuffer v2);

  /** Interface to C language function: <br> <code> void {@native glRectdv}(const GLdouble *  v1, const GLdouble *  v2); </code>    */
  public void glRectdv(double[] v1, int v1_offset, double[] v2, int v2_offset);

  /** Interface to C language function: <br> <code> void {@native glRectf}(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2); </code>    */
  public void glRectf(float x1, float y1, float x2, float y2);

  /** Interface to C language function: <br> <code> void {@native glRectfv}(const GLfloat *  v1, const GLfloat *  v2); </code>    */
  public void glRectfv(java.nio.FloatBuffer v1, java.nio.FloatBuffer v2);

  /** Interface to C language function: <br> <code> void {@native glRectfv}(const GLfloat *  v1, const GLfloat *  v2); </code>    */
  public void glRectfv(float[] v1, int v1_offset, float[] v2, int v2_offset);

  /** Interface to C language function: <br> <code> void {@native glRecti}(GLint x1, GLint y1, GLint x2, GLint y2); </code>    */
  public void glRecti(int x1, int y1, int x2, int y2);

  /** Interface to C language function: <br> <code> void {@native glRectiv}(const GLint *  v1, const GLint *  v2); </code>    */
  public void glRectiv(java.nio.IntBuffer v1, java.nio.IntBuffer v2);

  /** Interface to C language function: <br> <code> void {@native glRectiv}(const GLint *  v1, const GLint *  v2); </code>    */
  public void glRectiv(int[] v1, int v1_offset, int[] v2, int v2_offset);

  /** Interface to C language function: <br> <code> void {@native glRects}(GLshort x1, GLshort y1, GLshort x2, GLshort y2); </code>    */
  public void glRects(short x1, short y1, short x2, short y2);

  /** Interface to C language function: <br> <code> void {@native glRectsv}(const GLshort *  v1, const GLshort *  v2); </code>    */
  public void glRectsv(java.nio.ShortBuffer v1, java.nio.ShortBuffer v2);

  /** Interface to C language function: <br> <code> void {@native glRectsv}(const GLshort *  v1, const GLshort *  v2); </code>    */
  public void glRectsv(short[] v1, int v1_offset, short[] v2, int v2_offset);

  /** Interface to C language function: <br> <code> GLint {@native glRenderMode}(GLenum mode); </code>    */
  public int glRenderMode(int mode);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisampleCoverageNV}(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_NV_framebuffer_multisample_coverage</code>   */
  public void glRenderbufferStorageMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glResetHistogram}(GLenum mode); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glResetHistogram(int mode);

  /** Entry point to C language function: <code> void {@native glResetMinmax}(GLenum mode); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glResetMinmax(int mode);

  /** Interface to C language function: <br> <code> void {@native glRotated}(GLdouble angle, GLdouble x, GLdouble y, GLdouble z); </code>    */
  public void glRotated(double angle, double x, double y, double z);

  /** Interface to C language function: <br> <code> void {@native glScaled}(GLdouble x, GLdouble y, GLdouble z); </code>    */
  public void glScaled(double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3b}(GLbyte red, GLbyte green, GLbyte blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3b(byte red, byte green, byte blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3bv}(const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3bv(java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3bv}(const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3bv(byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3d}(GLdouble red, GLdouble green, GLdouble blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3d(double red, double green, double blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3dv}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3dv(java.nio.DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3dv}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3dv(double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3f}(GLfloat red, GLfloat green, GLfloat blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3f(float red, float green, float blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3fv}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3fv(java.nio.FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3fv}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3fv(float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glSecondaryColor3h(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glSecondaryColor3hv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glSecondaryColor3hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3i}(GLint red, GLint green, GLint blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3i(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3iv(java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3s}(GLshort red, GLshort green, GLshort blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3s(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3sv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3ub}(GLubyte red, GLubyte green, GLubyte blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3ub(byte red, byte green, byte blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3ubv}(const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3ubv(java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3ubv}(const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3ubv(byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3ui}(GLuint red, GLuint green, GLuint blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3ui(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3uiv}(const GLuint *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3uiv(java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3uiv}(const GLuint *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3uiv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3us}(GLushort red, GLushort green, GLushort blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3us(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3usv}(const GLushort *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3usv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3usv}(const GLushort *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColor3usv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColorPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_4</code>
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glSecondaryColorPointer(int size, int type, int stride, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glSecondaryColorPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glSecondaryColorPointer(int size, int type, int stride, long pointer_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glSelectBuffer}(GLsizei size, GLuint *  buffer); </code> 
      @param buffer a direct {@link java.nio.IntBuffer}   */
  public void glSelectBuffer(int size, java.nio.IntBuffer buffer);

  /** Entry point to C language function: <code> void {@native glSeparableFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  row, const GLvoid *  column); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, java.nio.Buffer row, java.nio.Buffer column);

  /** Entry point to C language function: <code> void {@native glSeparableFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  row, const GLvoid *  column); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, long row_buffer_offset, long column_buffer_offset);

  /** Entry point to C language function: <code> void {@native glSetFenceAPPLE}(GLuint mode); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glSetFenceAPPLE(int mode);

  /** Entry point to C language function: <code> void {@native glSetFenceNV}(GLuint target, GLenum id); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glSetFenceNV(int target, int id);

  /** Entry point to C language function: <code> void {@native glSetInvariantEXT}(GLuint id, GLenum type, const GLvoid *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glSetInvariantEXT(int id, int type, java.nio.Buffer addr);

  /** Entry point to C language function: <code> void {@native glSetLocalConstantEXT}(GLuint id, GLenum type, const GLvoid *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glSetLocalConstantEXT(int id, int type, java.nio.Buffer addr);

  /** Entry point to C language function: <code> void {@native glShaderOp1EXT}(GLenum red, GLuint green, GLuint blue); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glShaderOp1EXT(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glShaderOp2EXT}(GLenum sfactorRGB, GLuint dfactorRGB, GLuint sfactorAlpha, GLuint dfactorAlpha); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glShaderOp2EXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point to C language function: <code> void {@native glShaderOp3EXT}(GLenum index, GLuint x, GLuint y, GLuint z, GLuint w); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glShaderOp3EXT(int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glShaderSourceARB}(GLhandleARB shader, GLsizei count, const GLcharARB *  *  string, const GLint *  length); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glShaderSourceARB(int shader, int count, java.lang.String[] string, java.nio.IntBuffer length);

  /** Entry point to C language function: <code> void {@native glShaderSourceARB}(GLhandleARB shader, GLsizei count, const GLcharARB *  *  string, const GLint *  length); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glShaderSourceARB(int shader, int count, java.lang.String[] string, int[] length, int length_offset);

  /** Entry point to C language function: <code> void {@native glStencilClearTagEXT}(GLsizei location, GLuint v0); </code> <br>Part of <code>GL_EXT_stencil_clear_tag</code>   */
  public void glStencilClearTagEXT(int location, int v0);

  /** Entry point to C language function: <code> void {@native glStringMarkerGREMEDY}(GLsizei length, const GLvoid *  pointer); </code> <br>Part of <code>GL_GREMEDY_string_marker</code>   */
  public void glStringMarkerGREMEDY(int length, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glSwapAPPLE}(void); </code> <br>Part of <code>GL_APPLE_flush_render</code>   */
  public void glSwapAPPLE();

  /** Entry point to C language function: <code> void {@native glSwizzleEXT}(GLuint stage, GLuint portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glSwizzleEXT(int stage, int portion, int variable, int input, int mapping, int componentUsage);

  /** Entry point to C language function: <code> GLboolean {@native glTestFenceAPPLE}(GLuint id); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public boolean glTestFenceAPPLE(int id);

  /** Entry point to C language function: <code> GLboolean {@native glTestFenceNV}(GLuint id); </code> <br>Part of <code>GL_NV_fence</code>   */
  public boolean glTestFenceNV(int id);

  /** Entry point to C language function: <code> GLboolean {@native glTestObjectAPPLE}(GLenum target, GLuint index); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public boolean glTestObjectAPPLE(int target, int index);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1d}(GLdouble s); </code>    */
  public void glTexCoord1d(double s);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1dv}(const GLdouble *  v); </code>    */
  public void glTexCoord1dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1dv}(const GLdouble *  v); </code>    */
  public void glTexCoord1dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1f}(GLfloat s); </code>    */
  public void glTexCoord1f(float s);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1fv}(const GLfloat *  v); </code>    */
  public void glTexCoord1fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1fv}(const GLfloat *  v); </code>    */
  public void glTexCoord1fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord1hNV}(GLhalfNV factor); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord1h(short factor);

  /** Entry point to C language function: <code> void {@native glTexCoord1hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord1hv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord1hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord1hv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1i}(GLint s); </code>    */
  public void glTexCoord1i(int s);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1iv}(const GLint *  v); </code>    */
  public void glTexCoord1iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1iv}(const GLint *  v); </code>    */
  public void glTexCoord1iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1s}(GLshort s); </code>    */
  public void glTexCoord1s(short s);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1sv}(const GLshort *  v); </code>    */
  public void glTexCoord1sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1sv}(const GLshort *  v); </code>    */
  public void glTexCoord1sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2d}(GLdouble s, GLdouble t); </code>    */
  public void glTexCoord2d(double s, double t);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2dv}(const GLdouble *  v); </code>    */
  public void glTexCoord2dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2dv}(const GLdouble *  v); </code>    */
  public void glTexCoord2dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2f}(GLfloat s, GLfloat t); </code>    */
  public void glTexCoord2f(float s, float t);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2fv}(const GLfloat *  v); </code>    */
  public void glTexCoord2fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2fv}(const GLfloat *  v); </code>    */
  public void glTexCoord2fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord2hNV}(GLhalfNV x, GLhalfNV y); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord2h(short x, short y);

  /** Entry point to C language function: <code> void {@native glTexCoord2hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord2hv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord2hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord2hv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2i}(GLint s, GLint t); </code>    */
  public void glTexCoord2i(int s, int t);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2iv}(const GLint *  v); </code>    */
  public void glTexCoord2iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2iv}(const GLint *  v); </code>    */
  public void glTexCoord2iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2s}(GLshort s, GLshort t); </code>    */
  public void glTexCoord2s(short s, short t);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2sv}(const GLshort *  v); </code>    */
  public void glTexCoord2sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2sv}(const GLshort *  v); </code>    */
  public void glTexCoord2sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3d}(GLdouble s, GLdouble t, GLdouble r); </code>    */
  public void glTexCoord3d(double s, double t, double r);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3dv}(const GLdouble *  v); </code>    */
  public void glTexCoord3dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3dv}(const GLdouble *  v); </code>    */
  public void glTexCoord3dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3f}(GLfloat s, GLfloat t, GLfloat r); </code>    */
  public void glTexCoord3f(float s, float t, float r);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3fv}(const GLfloat *  v); </code>    */
  public void glTexCoord3fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3fv}(const GLfloat *  v); </code>    */
  public void glTexCoord3fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord3h(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glTexCoord3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord3hv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord3hv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3i}(GLint s, GLint t, GLint r); </code>    */
  public void glTexCoord3i(int s, int t, int r);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3iv}(const GLint *  v); </code>    */
  public void glTexCoord3iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3iv}(const GLint *  v); </code>    */
  public void glTexCoord3iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3s}(GLshort s, GLshort t, GLshort r); </code>    */
  public void glTexCoord3s(short s, short t, short r);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3sv}(const GLshort *  v); </code>    */
  public void glTexCoord3sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3sv}(const GLshort *  v); </code>    */
  public void glTexCoord3sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4d}(GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code>    */
  public void glTexCoord4d(double s, double t, double r, double q);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4dv}(const GLdouble *  v); </code>    */
  public void glTexCoord4dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4dv}(const GLdouble *  v); </code>    */
  public void glTexCoord4dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4f}(GLfloat s, GLfloat t, GLfloat r, GLfloat q); </code>    */
  public void glTexCoord4f(float s, float t, float r, float q);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4fv}(const GLfloat *  v); </code>    */
  public void glTexCoord4fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4fv}(const GLfloat *  v); </code>    */
  public void glTexCoord4fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord4hNV}(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord4h(short x, short y, short z, short w);

  /** Entry point to C language function: <code> void {@native glTexCoord4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord4hv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord4hv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4i}(GLint s, GLint t, GLint r, GLint q); </code>    */
  public void glTexCoord4i(int s, int t, int r, int q);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4iv}(const GLint *  v); </code>    */
  public void glTexCoord4iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4iv}(const GLint *  v); </code>    */
  public void glTexCoord4iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4s}(GLshort s, GLshort t, GLshort r, GLshort q); </code>    */
  public void glTexCoord4s(short s, short t, short r, short q);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4sv}(const GLshort *  v); </code>    */
  public void glTexCoord4sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4sv}(const GLshort *  v); </code>    */
  public void glTexCoord4sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexGend}(GLenum coord, GLenum pname, GLdouble param); </code>    */
  public void glTexGend(int coord, int pname, double param);

  /** Interface to C language function: <br> <code> void {@native glTexGendv}(GLenum coord, GLenum pname, const GLdouble *  params); </code>    */
  public void glTexGendv(int coord, int pname, java.nio.DoubleBuffer params);

  /** Interface to C language function: <br> <code> void {@native glTexGendv}(GLenum coord, GLenum pname, const GLdouble *  params); </code>    */
  public void glTexGendv(int coord, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTextureBufferEXT}(GLuint sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLuint dfactorAlpha); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureBufferEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point to C language function: <code> void {@native glTextureImage1DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureImage1DEXT(int texture, int target, int level, int internalformat, int width, int border, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureImage2DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureImage2DEXT(int texture, int target, int level, int internalformat, int width, int height, int border, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureImage3DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureImage3DEXT(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureLightEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_light_texture</code>   */
  public void glTextureLightEXT(int mode);

  /** Entry point to C language function: <code> void {@native glTextureMaterialEXT}(GLenum target, GLenum id); </code> <br>Part of <code>GL_EXT_light_texture</code>   */
  public void glTextureMaterialEXT(int target, int id);

  /** Entry point to C language function: <code> void {@native glTextureNormalEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_texture_perturb_normal</code>   */
  public void glTextureNormalEXT(int mode);

  /** Entry point to C language function: <code> void {@native glTextureParameterIivEXT}(GLuint texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterIivEXT(int texture, int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTextureParameterIivEXT}(GLuint texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterIivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTextureParameterIuivEXT}(GLuint program, GLenum target, GLenum index, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterIuivEXT(int program, int target, int index, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTextureParameterIuivEXT}(GLuint program, GLenum target, GLenum index, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterIuivEXT(int program, int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTextureParameterfEXT}(GLuint texture, GLenum target, GLenum pname, GLfloat param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterfEXT(int texture, int target, int pname, float param);

  /** Entry point to C language function: <code> void {@native glTextureParameterfvEXT}(GLuint target, GLenum index, GLenum count, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterfvEXT(int target, int index, int count, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glTextureParameterfvEXT}(GLuint target, GLenum index, GLenum count, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterfvEXT(int target, int index, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTextureParameteriEXT}(GLuint target, GLenum attachment, GLenum texture, GLint level); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameteriEXT(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glTextureParameterivEXT}(GLuint texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterivEXT(int texture, int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTextureParameterivEXT}(GLuint texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTextureRangeAPPLE}(GLenum target, GLsizei length, const GLvoid *  pointer); </code> <br>Part of <code>GL_APPLE_texture_range</code>   */
  public void glTextureRangeAPPLE(int target, int length, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glTextureRenderbufferEXT}(GLuint red, GLenum green, GLuint blue); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureRenderbufferEXT(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glTextureSubImage1DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureSubImage1DEXT(int texture, int target, int level, int xoffset, int width, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureSubImage2DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureSubImage3DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, java.nio.Buffer pixels);

  /** Interface to C language function: <br> <code> void {@native glTranslated}(GLdouble x, GLdouble y, GLdouble z); </code>    */
  public void glTranslated(double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glUniform1fARB}(GLint location, GLfloat v0); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform1fARB(int location, float v0);

  /** Entry point to C language function: <code> void {@native glUniform1fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform1fvARB(int location, int count, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform1fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform1fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform1iARB}(GLint x, GLint y); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform1iARB(int x, int y);

  /** Entry point to C language function: <code> void {@native glUniform1ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform1ivARB(int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform1ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform1ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform2fARB}(GLint location, GLfloat v0, GLfloat v1); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform2fARB(int location, float v0, float v1);

  /** Entry point to C language function: <code> void {@native glUniform2fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform2fvARB(int location, int count, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform2fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform2fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform2iARB}(GLint red, GLint green, GLint blue); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform2iARB(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glUniform2ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform2ivARB(int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform2ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform2ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform3fARB}(GLint location, GLfloat v0, GLfloat v1, GLfloat v2); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform3fARB(int location, float v0, float v1, float v2);

  /** Entry point to C language function: <code> void {@native glUniform3fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform3fvARB(int location, int count, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform3fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform3fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform3iARB}(GLint location, GLint v0, GLint v1, GLint v2); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform3iARB(int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glUniform3ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform3ivARB(int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform3ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform3ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform4fARB}(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform4fARB(int location, float v0, float v1, float v2, float v3);

  /** Entry point to C language function: <code> void {@native glUniform4fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform4fvARB(int location, int count, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform4fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform4fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform4iARB}(GLint location, GLint v0, GLint v1, GLint v2, GLint v3); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform4iARB(int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glUniform4ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform4ivARB(int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform4ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform4ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformBufferEXT}(GLuint program, GLint location, GLuint buffer); </code> <br>Part of <code>GL_EXT_bindable_uniform</code>   */
  public void glUniformBufferEXT(int program, int location, int buffer);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniformMatrix2fvARB(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniformMatrix2fvARB(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniformMatrix3fvARB(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniformMatrix3fvARB(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniformMatrix4fvARB(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniformMatrix4fvARB(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUnlockArraysEXT}(void); </code> <br>Part of <code>GL_EXT_compiled_vertex_array</code>   */
  public void glUnlockArraysEXT();

  /** Entry point to C language function: <code> GLboolean {@native glUnmapNamedBufferEXT}(GLuint id); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public boolean glUnmapNamedBufferEXT(int id);

  /** Entry point to C language function: <code> void {@native glUseProgramObjectARB}(GLhandleARB mode); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUseProgramObjectARB(int mode);

  /** Entry point to C language function: <code> void {@native glValidateProgramARB}(GLhandleARB mode); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glValidateProgramARB(int mode);

  /** Entry point to C language function: <code> void {@native glVariantPointerEXT}(GLuint id, GLenum type, GLuint stride, const GLvoid *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantPointerEXT(int id, int type, int stride, java.nio.Buffer addr);

  /** Entry point to C language function: <code> void {@native glVariantPointerEXT}(GLuint id, GLenum type, GLuint stride, const GLvoid *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantPointerEXT(int id, int type, int stride, long addr_buffer_offset);

  /** Entry point to C language function: <code> void {@native glVariantbvEXT}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantbvEXT(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVariantbvEXT}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantbvEXT(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVariantdvEXT}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantdvEXT(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVariantdvEXT}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantdvEXT(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVariantfvEXT}(GLuint target, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantfvEXT(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVariantfvEXT}(GLuint target, const GLfloat *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantfvEXT(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVariantivEXT}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantivEXT(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVariantivEXT}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantivEXT(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVariantsvEXT}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantsvEXT(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVariantsvEXT}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantsvEXT(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVariantubvEXT}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantubvEXT(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVariantubvEXT}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantubvEXT(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVariantuivEXT}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantuivEXT(int index, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVariantuivEXT}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantuivEXT(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVariantusvEXT}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantusvEXT(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVariantusvEXT}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantusvEXT(int index, short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex2d}(GLdouble x, GLdouble y); </code>    */
  public void glVertex2d(double x, double y);

  /** Interface to C language function: <br> <code> void {@native glVertex2dv}(const GLdouble *  v); </code>    */
  public void glVertex2dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex2dv}(const GLdouble *  v); </code>    */
  public void glVertex2dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex2f}(GLfloat x, GLfloat y); </code>    */
  public void glVertex2f(float x, float y);

  /** Interface to C language function: <br> <code> void {@native glVertex2fv}(const GLfloat *  v); </code>    */
  public void glVertex2fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex2fv}(const GLfloat *  v); </code>    */
  public void glVertex2fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex2hNV}(GLhalfNV x, GLhalfNV y); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex2h(short x, short y);

  /** Entry point to C language function: <code> void {@native glVertex2hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex2hv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex2hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex2hv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex2i}(GLint x, GLint y); </code>    */
  public void glVertex2i(int x, int y);

  /** Interface to C language function: <br> <code> void {@native glVertex2iv}(const GLint *  v); </code>    */
  public void glVertex2iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex2iv}(const GLint *  v); </code>    */
  public void glVertex2iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex2s}(GLshort x, GLshort y); </code>    */
  public void glVertex2s(short x, short y);

  /** Interface to C language function: <br> <code> void {@native glVertex2sv}(const GLshort *  v); </code>    */
  public void glVertex2sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex2sv}(const GLshort *  v); </code>    */
  public void glVertex2sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex3d}(GLdouble x, GLdouble y, GLdouble z); </code>    */
  public void glVertex3d(double x, double y, double z);

  /** Interface to C language function: <br> <code> void {@native glVertex3dv}(const GLdouble *  v); </code>    */
  public void glVertex3dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex3dv}(const GLdouble *  v); </code>    */
  public void glVertex3dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex3f}(GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glVertex3f(float x, float y, float z);

  /** Interface to C language function: <br> <code> void {@native glVertex3fv}(const GLfloat *  v); </code>    */
  public void glVertex3fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex3fv}(const GLfloat *  v); </code>    */
  public void glVertex3fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex3h(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glVertex3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex3hv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex3hv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex3i}(GLint x, GLint y, GLint z); </code>    */
  public void glVertex3i(int x, int y, int z);

  /** Interface to C language function: <br> <code> void {@native glVertex3iv}(const GLint *  v); </code>    */
  public void glVertex3iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex3iv}(const GLint *  v); </code>    */
  public void glVertex3iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex3s}(GLshort x, GLshort y, GLshort z); </code>    */
  public void glVertex3s(short x, short y, short z);

  /** Interface to C language function: <br> <code> void {@native glVertex3sv}(const GLshort *  v); </code>    */
  public void glVertex3sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex3sv}(const GLshort *  v); </code>    */
  public void glVertex3sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex4d}(GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code>    */
  public void glVertex4d(double x, double y, double z, double w);

  /** Interface to C language function: <br> <code> void {@native glVertex4dv}(const GLdouble *  v); </code>    */
  public void glVertex4dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex4dv}(const GLdouble *  v); </code>    */
  public void glVertex4dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex4f}(GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glVertex4f(float x, float y, float z, float w);

  /** Interface to C language function: <br> <code> void {@native glVertex4fv}(const GLfloat *  v); </code>    */
  public void glVertex4fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex4fv}(const GLfloat *  v); </code>    */
  public void glVertex4fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex4hNV}(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex4h(short x, short y, short z, short w);

  /** Entry point to C language function: <code> void {@native glVertex4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex4hv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex4hv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex4i}(GLint x, GLint y, GLint z, GLint w); </code>    */
  public void glVertex4i(int x, int y, int z, int w);

  /** Interface to C language function: <br> <code> void {@native glVertex4iv}(const GLint *  v); </code>    */
  public void glVertex4iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex4iv}(const GLint *  v); </code>    */
  public void glVertex4iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex4s}(GLshort x, GLshort y, GLshort z, GLshort w); </code>    */
  public void glVertex4s(short x, short y, short z, short w);

  /** Interface to C language function: <br> <code> void {@native glVertex4sv}(const GLshort *  v); </code>    */
  public void glVertex4sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex4sv}(const GLshort *  v); </code>    */
  public void glVertex4sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexArrayParameteriAPPLE}(GLenum target, GLint s); </code> <br>Part of <code>GL_APPLE_vertex_array_range</code>   */
  public void glVertexArrayParameteriAPPLE(int target, int s);

  /** Entry point to C language function: <code> void {@native glVertexArrayRangeAPPLE}(GLsizei length, GLvoid *  pointer); </code> <br>Part of <code>GL_APPLE_vertex_array_range</code>   */
  public void glVertexArrayRangeAPPLE(int length, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexArrayRangeNV}(GLsizei length, const GLvoid *  pointer); </code> <br>Part of <code>GL_NV_vertex_array_range</code>
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glVertexArrayRangeNV(int length, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dARB}(GLuint target, GLdouble s); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1dARB(int target, double s);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dvARB}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1dvARB(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dvARB}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1dvARB(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1fARB}(GLuint target, GLfloat s); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1fARB(int target, float s);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1fvARB}(GLuint target, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1fvARB(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1fvARB}(GLuint target, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1fvARB(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1hNV}(GLuint target, GLhalfNV s); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib1h(int target, short s);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib1hv(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib1hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1sARB}(GLuint target, GLshort s); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1sARB(int target, short s);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1svARB}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1svARB(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1svARB}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1svARB(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dARB}(GLuint target, GLdouble s, GLdouble t); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2dARB(int target, double s, double t);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dvARB}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2dvARB(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dvARB}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2dvARB(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2fARB}(GLuint target, GLfloat s, GLfloat t); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2fARB(int target, float s, float t);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2fvARB}(GLuint target, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2fvARB(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2fvARB}(GLuint target, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2fvARB(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2hNV}(GLuint target, GLhalfNV s, GLhalfNV t); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib2h(int target, short s, short t);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib2hv(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib2hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2sARB}(GLuint target, GLshort s, GLshort t); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2sARB(int target, short s, short t);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2svARB}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2svARB(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2svARB}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2svARB(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dARB}(GLuint target, GLdouble s, GLdouble t, GLdouble r); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3dARB(int target, double s, double t, double r);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dvARB}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3dvARB(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dvARB}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3dvARB(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3fARB}(GLuint target, GLfloat s, GLfloat t, GLfloat r); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3fARB(int target, float s, float t, float r);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3fvARB}(GLuint target, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3fvARB(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3fvARB}(GLuint target, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3fvARB(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3hNV}(GLuint target, GLhalfNV s, GLhalfNV t, GLhalfNV r); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib3h(int target, short s, short t, short r);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib3hv(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib3hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3sARB}(GLuint target, GLshort s, GLshort t, GLshort r); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3sARB(int target, short s, short t, short r);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3svARB}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3svARB(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3svARB}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3svARB(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NbvARB}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NbvARB(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NbvARB}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NbvARB(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NivARB}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NivARB(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NivARB}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NivARB(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NsvARB}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NsvARB(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NsvARB}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NsvARB(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NubARB}(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NubARB(int index, byte x, byte y, byte z, byte w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NubvARB}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NubvARB(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NubvARB}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NubvARB(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NuivARB}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NuivARB(int index, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NuivARB}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NuivARB(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NusvARB}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NusvARB(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NusvARB}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NusvARB(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bvARB}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4bvARB(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bvARB}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4bvARB(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dARB}(GLuint target, GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4dARB(int target, double s, double t, double r, double q);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dvARB}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4dvARB(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dvARB}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4dvARB(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4fARB}(GLuint target, GLfloat s, GLfloat t, GLfloat r, GLfloat q); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4fARB(int target, float s, float t, float r, float q);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4fvARB}(GLuint target, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4fvARB(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4fvARB}(GLuint target, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4fvARB(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4hNV}(GLuint target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib4h(int target, short s, short t, short r, short q);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib4hv(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib4hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ivARB}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4ivARB(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ivARB}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4ivARB(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4sARB}(GLuint target, GLshort s, GLshort t, GLshort r, GLshort q); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4sARB(int target, short s, short t, short r, short q);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4svARB}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4svARB(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4svARB}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4svARB(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubvARB}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4ubvARB(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubvARB}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4ubvARB(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uivARB}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4uivARB(int index, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uivARB}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4uivARB(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usvARB}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4usvARB(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usvARB}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4usvARB(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribDivisor}(GLuint target, GLuint id); </code> <br>Part of <code>GL_ARB_instanced_arrays</code>   */
  public void glVertexAttribDivisor(int target, int id);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1i}(GLuint target, GLint s); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1i(int target, int s);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1iv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1iv(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1iv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1ui}(GLuint target, GLuint id); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1ui(int target, int id);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1uiv(int index, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2i}(GLuint target, GLint s, GLint t); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2i(int target, int s, int t);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2iv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2iv(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2iv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2ui}(GLuint red, GLuint green, GLuint blue); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2ui(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2uiv(int index, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3i}(GLuint target, GLint s, GLint t, GLint r); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3i(int target, int s, int t, int r);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3iv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3iv(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3iv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3ui}(GLuint sfactorRGB, GLuint dfactorRGB, GLuint sfactorAlpha, GLuint dfactorAlpha); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3ui(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3uiv(int index, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4bv(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4bv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4i}(GLuint target, GLint start, GLint x, GLint y, GLint width); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4i(int target, int start, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4iv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4iv(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4iv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4sv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4sv(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4sv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4ubv(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4ubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ui}(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4ui(int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4uiv(int index, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4usv(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4usv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribPointerARB}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glVertexAttribPointerARB(int index, int size, int type, boolean normalized, int stride, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexAttribPointerARB}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttribPointerARB(int index, int size, int type, boolean normalized, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribs1hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs1hv(int index, int n, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribs1hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs1hv(int index, int n, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribs2hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs2hv(int index, int n, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribs2hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs2hv(int index, int n, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribs3hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs3hv(int index, int n, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribs3hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs3hv(int index, int n, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribs4hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs4hv(int index, int n, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribs4hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs4hv(int index, int n, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexBlendARB}(GLint count); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glVertexBlendARB(int count);

  /** Entry point to C language function: <code> void {@native glVertexWeightPointerEXT}(GLsizei size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_EXT_vertex_weighting</code>
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glVertexWeightPointerEXT(int size, int type, int stride, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexWeightPointerEXT}(GLsizei size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_EXT_vertex_weighting</code>   */
  public void glVertexWeightPointerEXT(int size, int type, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> void {@native glVertexWeightfEXT}(GLfloat coord); </code> <br>Part of <code>GL_EXT_vertex_weighting</code>   */
  public void glVertexWeightfEXT(float coord);

  /** Entry point to C language function: <code> void {@native glVertexWeightfvEXT}(const GLfloat *  m); </code> <br>Part of <code>GL_EXT_vertex_weighting</code>   */
  public void glVertexWeightfvEXT(java.nio.FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glVertexWeightfvEXT}(const GLfloat *  m); </code> <br>Part of <code>GL_EXT_vertex_weighting</code>   */
  public void glVertexWeightfvEXT(float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glVertexWeighthNV}(GLhalfNV factor); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexWeighth(short factor);

  /** Entry point to C language function: <code> void {@native glVertexWeighthvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexWeighthv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexWeighthvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexWeighthv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWeightbvARB}(GLint size, const GLbyte *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightbvARB(int size, java.nio.ByteBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightbvARB}(GLint size, const GLbyte *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightbvARB(int size, byte[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightdvARB}(GLint size, const GLdouble *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightdvARB(int size, java.nio.DoubleBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightdvARB}(GLint size, const GLdouble *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightdvARB(int size, double[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightfvARB}(GLint size, const GLfloat *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightfvARB(int size, java.nio.FloatBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightfvARB}(GLint size, const GLfloat *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightfvARB(int size, float[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightivARB}(GLint size, const GLint *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightivARB(int size, java.nio.IntBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightivARB}(GLint size, const GLint *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightivARB(int size, int[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightsvARB}(GLint size, const GLshort *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightsvARB(int size, java.nio.ShortBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightsvARB}(GLint size, const GLshort *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightsvARB(int size, short[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightubvARB}(GLint size, const GLubyte *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightubvARB(int size, java.nio.ByteBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightubvARB}(GLint size, const GLubyte *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightubvARB(int size, byte[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightuivARB}(GLint n, const GLuint *  ids); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightuivARB(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glWeightuivARB}(GLint n, const GLuint *  ids); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightuivARB(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glWeightusvARB}(GLint size, const GLushort *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightusvARB(int size, java.nio.ShortBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightusvARB}(GLint size, const GLushort *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightusvARB(int size, short[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos2d}(GLdouble x, GLdouble y); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2d(double x, double y);

  /** Entry point to C language function: <code> void {@native glWindowPos2dv}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2dv(java.nio.DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glWindowPos2dv}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2dv(double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos2f}(GLfloat x, GLfloat y); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2f(float x, float y);

  /** Entry point to C language function: <code> void {@native glWindowPos2fv}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2fv(java.nio.FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glWindowPos2fv}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2fv(float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos2i}(GLint x, GLint y); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2i(int x, int y);

  /** Entry point to C language function: <code> void {@native glWindowPos2iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2iv(java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos2iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos2s}(GLshort x, GLshort y); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2s(short x, short y);

  /** Entry point to C language function: <code> void {@native glWindowPos2sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2sv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos2sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos2sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos3d}(GLdouble red, GLdouble green, GLdouble blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3d(double red, double green, double blue);

  /** Entry point to C language function: <code> void {@native glWindowPos3dv}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3dv(java.nio.DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glWindowPos3dv}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3dv(double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos3f}(GLfloat red, GLfloat green, GLfloat blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3f(float red, float green, float blue);

  /** Entry point to C language function: <code> void {@native glWindowPos3fv}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3fv(java.nio.FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glWindowPos3fv}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3fv(float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos3i}(GLint red, GLint green, GLint blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3i(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glWindowPos3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3iv(java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos3s}(GLshort red, GLshort green, GLshort blue); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3s(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glWindowPos3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3sv(java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glWindowPos3sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWriteMaskEXT}(GLuint stage, GLuint portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glWriteMaskEXT(int stage, int portion, int variable, int input, int mapping, int componentUsage);


  // --- Begin CustomJavaCode .cfg declarations
     public boolean glIsPBOPackEnabled();
     public boolean glIsPBOUnpackEnabled();
  
  /** Missed in the GL_EXT_gpu_shader4 promotion to 3.0 core */
  public static final int GL_SAMPLER_BUFFER_EXT = 0x8DC2;
  /** Missed in the GL_EXT_gpu_shader4 promotion to 3.0 core */
  public static final int GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
  /** Missed in the GL_EXT_gpu_shader4 promotion to 3.0 core */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
  /** Missed in the GL_EXT_gpu_shader4 promotion to 3.0 core */
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
  /** Missed in the GL_EXT_gpu_shader4 promotion to 3.0 core */
  public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
  
  /** Missed in the GL_EXT_packed_float promotion to 3.0 core */
  public static final int GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
  
  /** Missed in the GL_EXT_framebuffer_sRGB promotion to 3.0 core */
  public static final int GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
  
  
  // ---- End CustomJavaCode .cfg declarations

} // end of class GL2
