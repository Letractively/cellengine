/* !---- DO NOT EDIT: This file autogenerated by com\sun\gluegen\opengl\GLEmitter.java on Sun Jan 24 02:13:43 PST 2010 ----! */

package javax.media.opengl;

import java.nio.*;
import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import com.sun.opengl.impl.*;
import java.io.PrintStream;
import com.sun.gluegen.runtime.*;

 /**
  * <P> 
  * Interface containing the common subset of core GL3 (OpenGL 3.1+) and GL2 (OpenGL 3.0), 
  * also known as the OpenGL 3.0 forward compatible, non deprecated subset.<br>
  * This interface reflects only the programmable shader functionality of desktop OpenGL<br>
  * </P>
  */
public interface GL2GL3 extends GLBase, GL, GL2ES2
{

  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DOUBLE = 0x140A;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT_SIZE_GRANULARITY = 0x0B13;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT_SIZE_RANGE = 0x0B12;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_WIDTH_GRANULARITY = 0x0B23;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_WIDTH_RANGE = 0x0B22;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT = 0x1B00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE = 0x1B01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FILL = 0x1B02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_SMOOTH = 0x0B41;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_OFFSET_POINT = 0x2A01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_OFFSET_LINE = 0x2A02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LEFT = 0x0406;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RIGHT = 0x0407;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FRONT_LEFT = 0x0400;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FRONT_RIGHT = 0x0401;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BACK_LEFT = 0x0402;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BACK_RIGHT = 0x0403;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RED = 0x1903;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_GREEN = 0x1904;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BLUE = 0x1905;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_READ_BUFFER = 0x0C02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DRAW_BUFFER = 0x0C01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DOUBLEBUFFER = 0x0C32;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STEREO = 0x0C33;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR = 0x1800;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH = 0x1801;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL = 0x1802;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_SMOOTH_HINT = 0x0C53;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_LSB_FIRST = 0x0D01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_ROW_LENGTH = 0x0D02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_SKIP_PIXELS = 0x0D04;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_SKIP_ROWS = 0x0D03;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_SWAP_BYTES = 0x0D00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_UNPACK_LSB_FIRST = 0x0CF1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_UNPACK_ROW_LENGTH = 0x0CF2;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_UNPACK_SKIP_PIXELS = 0x0CF4;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_UNPACK_SKIP_ROWS = 0x0CF3;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_UNPACK_SWAP_BYTES = 0x0CF0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_1D = 0x0DE0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_BORDER_COLOR = 0x1004;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_WIDTH = 0x1000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_HEIGHT = 0x1001;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_BORDER = 0x1005;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_RED_SIZE = 0x805C;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_GREEN_SIZE = 0x805D;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_BLUE_SIZE = 0x805E;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_ALPHA_SIZE = 0x805F;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_PROXY_TEXTURE_1D = 0x8063;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_PROXY_TEXTURE_2D = 0x8064;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_TEXTURE_BINDING_1D = 0x8068;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_R3_G3_B2 = 0x2A10;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB4 = 0x804F;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB5 = 0x8050;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB10 = 0x8052;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB12 = 0x8053;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB16 = 0x8054;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGBA2 = 0x8055;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB10_A2 = 0x8059;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGBA12 = 0x805A;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGBA16 = 0x805B;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_BINDING_3D = 0x806A;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_PACK_SKIP_IMAGES = 0x806B;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_PACK_IMAGE_HEIGHT = 0x806C;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNPACK_SKIP_IMAGES = 0x806D;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNPACK_IMAGE_HEIGHT = 0x806E;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_3D = 0x806F;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_PROXY_TEXTURE_3D = 0x8070;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_DEPTH = 0x8071;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_WRAP_R = 0x8072;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_MAX_3D_TEXTURE_SIZE = 0x8073;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_BGR = 0x80E0;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_BGRA = 0x80E1;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_MAX_ELEMENTS_VERTICES = 0x80E8;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_MAX_ELEMENTS_INDICES = 0x80E9;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_MIN_LOD = 0x813A;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_MAX_LOD = 0x813B;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_BASE_LEVEL = 0x813C;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_MAX_LEVEL = 0x813D;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_MIN = 0x8007;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_MAX = 0x8008;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_COMPRESSED_RGB = 0x84ED;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_COMPRESSED_RGBA = 0x84EE;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_COMPRESSED = 0x86A1;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_CLAMP_TO_BORDER = 0x812D;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_TEXTURE_LOD_BIAS = 0x8501;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_TEXTURE_DEPTH_SIZE = 0x884A;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_TEXTURE_COMPARE_MODE = 0x884C;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_TEXTURE_COMPARE_FUNC = 0x884D;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_QUERY_COUNTER_BITS = 0x8864;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_CURRENT_QUERY = 0x8865;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_QUERY_RESULT = 0x8866;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_QUERY_RESULT_AVAILABLE = 0x8867;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_READ_ONLY = 0x88B8;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_READ_WRITE = 0x88BA;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_STREAM_READ = 0x88E1;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_STREAM_COPY = 0x88E2;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_STATIC_READ = 0x88E5;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_STATIC_COPY = 0x88E6;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_DYNAMIC_READ = 0x88E9;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_DYNAMIC_COPY = 0x88EA;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_SAMPLES_PASSED = 0x8914;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_DRAW_BUFFERS = 0x8824;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER0 = 0x8825;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER1 = 0x8826;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER2 = 0x8827;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER3 = 0x8828;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER4 = 0x8829;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER5 = 0x882A;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER6 = 0x882B;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER7 = 0x882C;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER8 = 0x882D;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER9 = 0x882E;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER10 = 0x882F;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER11 = 0x8830;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER12 = 0x8831;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER13 = 0x8832;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER14 = 0x8833;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DRAW_BUFFER15 = 0x8834;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_VARYING_FLOATS = 0x8B4B;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SAMPLER_1D = 0x8B5D;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SAMPLER_3D = 0x8B5F;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SAMPLER_1D_SHADOW = 0x8B61;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SAMPLER_2D_SHADOW = 0x8B62;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_LOWER_LEFT = 0x8CA1;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_UPPER_LEFT = 0x8CA2;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_PIXEL_PACK_BUFFER = 0x88EB;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_PIXEL_UNPACK_BUFFER = 0x88EC;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT2x3 = 0x8B65;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT2x4 = 0x8B66;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT3x2 = 0x8B67;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT3x4 = 0x8B68;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT4x2 = 0x8B69;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT4x3 = 0x8B6A;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_SRGB = 0x8C40;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_SRGB8 = 0x8C41;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_SRGB_ALPHA = 0x8C42;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_SRGB8_ALPHA8 = 0x8C43;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_COMPRESSED_SRGB = 0x8C48;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE0 = 0x3000;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE1 = 0x3001;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE2 = 0x3002;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE3 = 0x3003;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE4 = 0x3004;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE5 = 0x3005;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAX_CLIP_DISTANCES = 0x0D32;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAJOR_VERSION = 0x821B;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MINOR_VERSION = 0x821C;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_NUM_EXTENSIONS = 0x821D;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CONTEXT_FLAGS = 0x821E;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_DEPTH_BUFFER = 0x8223;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_STENCIL_BUFFER = 0x8224;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_COMPRESSED_RED = 0x8225;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_COMPRESSED_RG = 0x8226;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x0001;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGBA32F = 0x8814;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGB32F = 0x8815;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGBA16F = 0x881A;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGB16F = 0x881B;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLAMP_READ_COLOR = 0x891C;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_FIXED_ONLY = 0x891D;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAX_VARYING_COMPONENTS = 0x8B4B;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TEXTURE_RED_TYPE = 0x8C10;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TEXTURE_GREEN_TYPE = 0x8C11;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TEXTURE_BLUE_TYPE = 0x8C12;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TEXTURE_ALPHA_TYPE = 0x8C13;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TEXTURE_DEPTH_TYPE = 0x8C16;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_UNSIGNED_NORMALIZED = 0x8C17;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TEXTURE_1D_ARRAY = 0x8C18;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGB9_E5 = 0x8C3D;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TEXTURE_SHARED_SIZE = 0x8C3F;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_PRIMITIVES_GENERATED = 0x8C87;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RASTERIZER_DISCARD = 0x8C89;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_INTERLEAVED_ATTRIBS = 0x8C8C;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_SEPARATE_ATTRIBS = 0x8C8D;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGBA32UI = 0x8D70;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGB32UI = 0x8D71;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGBA16UI = 0x8D76;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGB16UI = 0x8D77;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGBA8UI = 0x8D7C;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGB8UI = 0x8D7D;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGBA32I = 0x8D82;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGB32I = 0x8D83;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGBA16I = 0x8D88;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGB16I = 0x8D89;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGBA8I = 0x8D8E;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGB8I = 0x8D8F;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RED_INTEGER = 0x8D94;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_GREEN_INTEGER = 0x8D95;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_BLUE_INTEGER = 0x8D96;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGB_INTEGER = 0x8D98;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_RGBA_INTEGER = 0x8D99;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_BGR_INTEGER = 0x8D9A;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_BGRA_INTEGER = 0x8D9B;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_SAMPLER_1D_ARRAY = 0x8DC0;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_UNSIGNED_INT_VEC2 = 0x8DC6;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_UNSIGNED_INT_VEC3 = 0x8DC7;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_UNSIGNED_INT_VEC4 = 0x8DC8;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_INT_SAMPLER_1D = 0x8DC9;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_INT_SAMPLER_2D = 0x8DCA;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_INT_SAMPLER_3D = 0x8DCB;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_INT_SAMPLER_CUBE = 0x8DCC;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_QUERY_WAIT = 0x8E13;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_QUERY_NO_WAIT = 0x8E14;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_QUERY_BY_REGION_WAIT = 0x8E15;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
  /** Part of <code>GL_ARB_texture_rectangle</code> */
  public static final int GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
  /** Part of <code>GL_ARB_texture_rectangle</code> */
  public static final int GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
  /** Part of <code>GL_ARB_texture_rectangle</code> */
  public static final int GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
  /** Part of <code>GL_ARB_texture_rectangle</code> */
  public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
  /** Part of <code>GL_EXT_texture_rectangle</code> */
  public static final int GL_TEXTURE_RECTANGLE = 0x84F5;
  /** Part of <code>GL_EXT_texture_rectangle</code> */
  public static final int GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
  /** Part of <code>GL_EXT_texture_rectangle</code> */
  public static final int GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
  /** Part of <code>GL_EXT_texture_rectangle</code> */
  public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
  /** Part of <code>GL_ARB_depth_buffer_float</code> */
  public static final int GL_DEPTH_COMPONENT32F = 0x8CAC;
  /** Part of <code>GL_ARB_depth_buffer_float</code> */
  public static final int GL_DEPTH32F_STENCIL8 = 0x8CAD;
  /** Part of <code>GL_ARB_depth_buffer_float</code> */
  public static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_DEFAULT = 0x8218;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_UNDEFINED = 0x8219;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_DEPTH_STENCIL = 0x84F9;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_UNSIGNED_INT_24_8 = 0x84FA;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_DEPTH24_STENCIL8 = 0x88F0;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_TEXTURE_STENCIL_SIZE = 0x88F1;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_READ_FRAMEBUFFER = 0x8CA8;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_DRAW_FRAMEBUFFER = 0x8CA9;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_SAMPLES = 0x8CAB;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT1 = 0x8CE1;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT2 = 0x8CE2;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT3 = 0x8CE3;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT4 = 0x8CE4;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT5 = 0x8CE5;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT6 = 0x8CE6;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT7 = 0x8CE7;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT8 = 0x8CE8;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT9 = 0x8CE9;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT10 = 0x8CEA;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT11 = 0x8CEB;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT12 = 0x8CEC;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT13 = 0x8CED;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT14 = 0x8CEE;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT15 = 0x8CEF;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_STENCIL_INDEX16 = 0x8D49;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_MAX_SAMPLES = 0x8D57;
  /** Part of <code>GL_ARB_framebuffer_sRGB</code> */
  public static final int GL_FRAMEBUFFER_SRGB = 0x8DB9;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_LINES_ADJACENCY = 0x000A;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_LINE_STRIP_ADJACENCY = 0x000B;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_TRIANGLES_ADJACENCY = 0x000C;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_PROGRAM_POINT_SIZE = 0x8642;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT = 0x8DA9;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_SHADER = 0x8DD9;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_VERTICES_OUT = 0x8DDA;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_INPUT_TYPE = 0x8DDB;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_OUTPUT_TYPE = 0x8DDC;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_VARYING_COMPONENTS = 0x8DDD;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_VERTEX_VARYING_COMPONENTS = 0x8DDE;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_READ_BIT = 0x0001;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_WRITE_BIT = 0x0002;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
  /** Part of <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_TEXTURE_BUFFER = 0x8C2A;
  /** Part of <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
  /** Part of <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
  /** Part of <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
  /** Part of <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_TEXTURE_BUFFER_FORMAT = 0x8C2E;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code> */
  public static final int GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code> */
  public static final int GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code> */
  public static final int GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code> */
  public static final int GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG = 0x8227;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG_INTEGER = 0x8228;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R8 = 0x8229;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R16 = 0x822A;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG8 = 0x822B;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG16 = 0x822C;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R16F = 0x822D;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R32F = 0x822E;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG16F = 0x822F;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG32F = 0x8230;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R8I = 0x8231;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R8UI = 0x8232;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R16I = 0x8233;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R16UI = 0x8234;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R32I = 0x8235;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R32UI = 0x8236;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG8I = 0x8237;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG8UI = 0x8238;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG16I = 0x8239;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG16UI = 0x823A;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG32I = 0x823B;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG32UI = 0x823C;
  /** Part of <code>GL_ARB_vertex_array_object</code> */
  public static final int GL_VERTEX_ARRAY_BINDING = 0x85B5;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_HALF_APPLE = 0x140B;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_COLOR_FLOAT_APPLE = 0x8A0F;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_RGBA_FLOAT32_APPLE = 0x8814;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_RGB_FLOAT32_APPLE = 0x8815;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_ALPHA_FLOAT32_APPLE = 0x8816;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_INTENSITY_FLOAT32_APPLE = 0x8817;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_RGBA_FLOAT16_APPLE = 0x881A;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_RGB_FLOAT16_APPLE = 0x881B;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_ALPHA_FLOAT16_APPLE = 0x881C;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_INTENSITY_FLOAT16_APPLE = 0x881D;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_RGBA_FLOAT32_ATI = 0x8814;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_RGB_FLOAT32_ATI = 0x8815;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_ALPHA_FLOAT32_ATI = 0x8816;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_INTENSITY_FLOAT32_ATI = 0x8817;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_LUMINANCE_FLOAT32_ATI = 0x8818;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_RGBA_FLOAT16_ATI = 0x881A;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_RGB_FLOAT16_ATI = 0x881B;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_ALPHA_FLOAT16_ATI = 0x881C;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_INTENSITY_FLOAT16_ATI = 0x881D;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_LUMINANCE_FLOAT16_ATI = 0x881E;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_R_NV = 0x8880;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RG_NV = 0x8881;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGB_NV = 0x8882;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGBA_NV = 0x8883;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_R16_NV = 0x8884;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_R32_NV = 0x8885;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RG16_NV = 0x8886;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RG32_NV = 0x8887;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGB16_NV = 0x8888;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGB32_NV = 0x8889;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGBA16_NV = 0x888A;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGBA32_NV = 0x888B;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGBA_MODE_NV = 0x888E;
  /** Part of <code>GL_NV_primitive_restart</code> */
  public static final int GL_PRIMITIVE_RESTART = 0x8558;
  /** Part of <code>GL_NV_primitive_restart</code> */
  public static final int GL_PRIMITIVE_RESTART_INDEX = 0x8559;
  /** Part of <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_SAMPLER_BUFFER = 0x8DC2;
  /** Part of <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_2D_RECT = 0x8DCD;
  /** Part of <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_BUFFER = 0x8DD0;
  /** Part of <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
  /** Part of <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
  /** Part of <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_SAMPLER_BUFFER_AMD = 0x9001;
  /** Part of <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
  /** Part of <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
  /** Part of <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_DISCRETE_AMD = 0x9006;
  /** Part of <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_CONTINUOUS_AMD = 0x9007;
  /** Part of <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_TESSELLATION_MODE_AMD = 0x9004;
  /** Part of <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_TESSELLATION_FACTOR_AMD = 0x9005;
  /** Part of <code>GL_NV_shader_buffer_load</code> */
  public static final int GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
  /** Part of <code>GL_NV_shader_buffer_load</code> */
  public static final int GL_GPU_ADDRESS_NV = 0x8F34;
  /** Part of <code>GL_NV_shader_buffer_load</code> */
  public static final int GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;

  /** Entry point to C language function: <code> void {@native glBeginConditionalRender}(GLuint target, GLenum id); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glBeginConditionalRender(int target, int id);

  /** Entry point to C language function: <code> void {@native glBeginQuery}(GLenum target, GLuint id); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glBeginQuery(int target, int id);

  /** Entry point to C language function: <code> void {@native glBeginTransformFeedback}(GLenum mode); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glBeginTransformFeedback(int mode);

  /** Entry point to C language function: <code> void {@native glBindBufferBase}(GLenum red, GLuint green, GLuint blue); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glBindBufferBase(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glBindBufferRange}(GLenum target, GLuint index, GLuint buffer, ptrdiff_t offset, ptrdiff_t size); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glBindBufferRange(int target, int index, int buffer, int offset, int size);

  /** Entry point to C language function: <code> void {@native glBindFragDataLocation}(GLuint program, GLuint index, const GLchar *  name); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glBindFragDataLocation(int program, int index, java.lang.String name);

  /** Entry point to C language function: <code> void {@native glBindVertexArray}(GLuint mode); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>   */
  public void glBindVertexArray(int mode);

  /** Entry point to C language function: <code> void {@native glBlitFramebuffer}(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter); </code> <br>Part of <code>GL_ARB_framebuffer_object</code>   */
  public void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);

  /** Entry point to C language function: <code> void {@native glBufferAddressRangeNV}(GLenum pname, GLuint index, uint64_t address, ptrdiff_t length); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glBufferAddressRangeNV(int pname, int index, long address, int length);

  /** Entry point to C language function: <code> void {@native glClampColor}(GLenum target, GLenum id); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClampColor(int target, int id);

  /** Entry point to C language function: <code> void {@native glClearBufferfi}(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClearBufferfi(int buffer, int drawbuffer, float depth, int stencil);

  /** Entry point to C language function: <code> void {@native glClearBufferfv}(GLenum buffer, GLint drawbuffer, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClearBufferfv(int buffer, int drawbuffer, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glClearBufferfv}(GLenum buffer, GLint drawbuffer, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClearBufferfv(int buffer, int drawbuffer, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glClearBufferiv}(GLenum buffer, GLint drawbuffer, const GLint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClearBufferiv(int buffer, int drawbuffer, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glClearBufferiv}(GLenum buffer, GLint drawbuffer, const GLint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClearBufferiv(int buffer, int drawbuffer, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glClearBufferuiv}(GLenum buffer, GLint drawbuffer, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClearBufferuiv(int buffer, int drawbuffer, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glClearBufferuiv}(GLenum buffer, GLint drawbuffer, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClearBufferuiv(int buffer, int drawbuffer, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glColorFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glColorFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glColorMaski}(GLuint index, GLboolean x, GLboolean y, GLboolean z, GLboolean w); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glColorMaski(int index, boolean x, boolean y, boolean z, boolean w);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, java.nio.Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage3D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, java.nio.Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage3D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, java.nio.Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, java.nio.Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCopyTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glCopyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border);

  /** Entry point to C language function: <code> void {@native glCopyTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glDeleteQueries}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glDeleteQueries(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDeleteQueries}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glDeleteQueries(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glDeleteVertexArrays}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>   */
  public void glDeleteVertexArrays(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDeleteVertexArrays}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>   */
  public void glDeleteVertexArrays(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glDisableClientState}(GLenum cap); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glDisableClientState(int cap);

  /** Entry point to C language function: <code> void {@native glDisablei}(GLenum target, GLuint id); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glDisablei(int target, int id);

  /** Entry point to C language function: <code> void {@native glDrawArraysInstancedARB}(GLenum target, GLint s, GLsizei t, GLsizei r); </code> <br>Part of <code>GL_ARB_draw_instanced</code>   */
  public void glDrawArraysInstanced(int target, int s, int t, int r);

  /** Entry point to C language function: <code> void {@native glDrawBuffer}(GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glDrawBuffer(int mode);

  /** Entry point to C language function: <code> void {@native glDrawBuffers}(GLsizei n, const GLenum *  ids); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glDrawBuffers(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDrawBuffers}(GLsizei n, const GLenum *  ids); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glDrawBuffers(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedARB}(GLenum mode, GLsizei count, GLenum type, const GLvoid *  indices, GLsizei primcount); </code> <br>Part of <code>GL_ARB_draw_instanced</code>   */
  public void glDrawElementsInstanced(int mode, int count, int type, java.nio.Buffer indices, int primcount);

  /** Entry point to C language function: <code> void {@native glDrawRangeElements}(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *  indices); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glDrawRangeElements(int mode, int start, int end, int count, int type, java.nio.Buffer indices);

  /** Entry point to C language function: <code> void {@native glDrawRangeElements}(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *  indices); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glDrawRangeElements(int mode, int start, int end, int count, int type, long indices_buffer_offset);

  /** Entry point to C language function: <code> void {@native glEdgeFlagFormatNV}(GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glEdgeFlagFormatNV(int stride);

  /** Entry point to C language function: <code> void {@native glEnableClientState}(GLenum cap); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glEnableClientState(int cap);

  /** Entry point to C language function: <code> void {@native glEnablei}(GLenum target, GLuint id); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glEnablei(int target, int id);

  /** Entry point to C language function: <code> void {@native glEndConditionalRender}(void); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glEndConditionalRender();

  /** Entry point to C language function: <code> void {@native glEndQuery}(GLenum mode); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glEndQuery(int mode);

  /** Entry point to C language function: <code> void {@native glEndTransformFeedback}(void); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glEndTransformFeedback();

  /** Entry point to C language function: <code> void {@native glFlushMappedBufferRange}(GLenum target, ptrdiff_t s, ptrdiff_t t); </code> <br>Part of <code>GL_ARB_map_buffer_range</code>   */
  public void glFlushMappedBufferRange(int target, int s, int t);

  /** Entry point to C language function: <code> void {@native glFogCoordFormatNV}(GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glFogCoordFormatNV(int type, int stride);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture1D}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level); </code> <br>Part of <code>GL_ARB_framebuffer_object</code>   */
  public void glFramebufferTexture1D(int target, int attachment, int textarget, int texture, int level);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture3D}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset); </code> <br>Part of <code>GL_ARB_framebuffer_object</code>   */
  public void glFramebufferTexture3D(int target, int attachment, int textarget, int texture, int level, int zoffset);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureARB}(GLenum target, GLenum attachment, GLuint texture, GLint level); </code> <br>Part of <code>GL_ARB_geometry_shader4</code>   */
  public void glFramebufferTexture(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureFaceARB}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face); </code> <br>Part of <code>GL_ARB_geometry_shader4</code>   */
  public void glFramebufferTextureFace(int target, int attachment, int texture, int level, int face);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureLayer}(GLenum target, GLenum index, GLuint buffer, GLint offset, GLint size); </code> <br>Part of <code>GL_ARB_framebuffer_object</code>   */
  public void glFramebufferTextureLayer(int target, int index, int buffer, int offset, int size);

  /** Entry point to C language function: <code> void {@native glGenQueries}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glGenQueries(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glGenQueries}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glGenQueries(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glGenVertexArrays}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>   */
  public void glGenVertexArrays(int n, java.nio.IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glGenVertexArrays}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>   */
  public void glGenVertexArrays(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glGetBooleani_v}(GLenum target, GLuint index, GLboolean *  data); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetBooleani_v(int target, int index, java.nio.ByteBuffer data);

  /** Entry point to C language function: <code> void {@native glGetBooleani_v}(GLenum target, GLuint index, GLboolean *  data); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetBooleani_v(int target, int index, byte[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetBufferParameterui64vNV}(GLenum target, GLenum pname, uint64_t *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetBufferParameterui64vNV(int target, int pname, com.sun.gluegen.runtime.PointerBuffer params);

  /** Entry point to C language function: <code> void {@native glGetBufferParameterui64vNV}(GLenum target, GLenum pname, uint64_t *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetBufferParameterui64vNV(int target, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetBufferSubData}(GLenum target, ptrdiff_t offset, ptrdiff_t size, GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glGetBufferSubData(int target, int offset, int size, java.nio.Buffer data);

  /** Entry point to C language function: <code> void {@native glGetCompressedTexImage}(GLenum target, GLint level, GLvoid *  img); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glGetCompressedTexImage(int target, int level, java.nio.Buffer img);

  /** Entry point to C language function: <code> void {@native glGetCompressedTexImage}(GLenum target, GLint level, GLvoid *  img); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glGetCompressedTexImage(int target, int level, long img_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetDoublev}(GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetDoublev(int pname, java.nio.DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetDoublev}(GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetDoublev(int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> GLint {@native glGetFragDataLocation}(GLuint program, const GLchar *  name); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public int glGetFragDataLocation(int program, java.lang.String name);

  /** Entry point to C language function: <code> void {@native glGetIntegeri_v}(GLenum target, GLuint pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetIntegeri_v(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetIntegeri_v}(GLenum target, GLuint pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetIntegeri_v(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64i_vNV}(GLenum value, GLuint index, uint64_t *  result); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glGetIntegerui64i_vNV(int value, int index, com.sun.gluegen.runtime.PointerBuffer result);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64i_vNV}(GLenum value, GLuint index, uint64_t *  result); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glGetIntegerui64i_vNV(int value, int index, long[] result, int result_offset);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64vNV}(GLenum value, uint64_t *  result); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetIntegerui64vNV(int value, com.sun.gluegen.runtime.PointerBuffer result);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64vNV}(GLenum value, uint64_t *  result); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetIntegerui64vNV(int value, long[] result, int result_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterui64vNV}(GLuint buffer, GLenum pname, uint64_t *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetNamedBufferParameterui64vNV(int buffer, int pname, com.sun.gluegen.runtime.PointerBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterui64vNV}(GLuint buffer, GLenum pname, uint64_t *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetNamedBufferParameterui64vNV(int buffer, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectiv}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glGetQueryObjectiv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectiv}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glGetQueryObjectiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectuiv}(GLuint id, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glGetQueryObjectuiv(int id, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectuiv}(GLuint id, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glGetQueryObjectuiv(int id, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryiv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glGetQueryiv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryiv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glGetQueryiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> const GLubyte *  {@native glGetStringi}(GLenum name, GLuint index); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public java.lang.String glGetStringi(int name, int index);

  /** Entry point to C language function: <code> void {@native glGetTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexImage(int target, int level, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexImage(int target, int level, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameterfv}(GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexLevelParameterfv(int target, int level, int pname, java.nio.FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameterfv}(GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexLevelParameterfv(int target, int level, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameteriv}(GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexLevelParameteriv(int target, int level, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameteriv}(GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexLevelParameteriv(int target, int level, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIiv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetTexParameterIiv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIiv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetTexParameterIiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIuiv}(GLenum id, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetTexParameterIuiv(int id, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIuiv}(GLenum id, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetTexParameterIuiv(int id, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTransformFeedbackVarying}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLsizei *  size, GLenum *  type, GLchar *  name); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetTransformFeedbackVarying(int program, int index, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, java.nio.ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetTransformFeedbackVarying}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLsizei *  size, GLenum *  type, GLchar *  name); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetTransformFeedbackVarying(int program, int index, int bufSize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformui64vNV}(GLuint program, GLint location, uint64_t *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetUniformui64vNV(int program, int location, com.sun.gluegen.runtime.PointerBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformui64vNV}(GLuint program, GLint location, uint64_t *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetUniformui64vNV(int program, int location, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformuiv}(GLuint program, GLint location, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetUniformuiv(int program, int location, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformuiv}(GLuint program, GLint location, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetUniformuiv(int program, int location, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIiv}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetVertexAttribIiv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIiv}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetVertexAttribIiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIuiv}(GLuint id, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetVertexAttribIuiv(int id, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIuiv}(GLuint id, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetVertexAttribIuiv(int id, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdv}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glGetVertexAttribdv(int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdv}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glGetVertexAttribdv(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glIndexFormatNV}(GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glIndexFormatNV(int type, int stride);

  /** Entry point to C language function: <code> GLboolean {@native glIsBufferResidentNV}(GLenum target); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public boolean glIsBufferResidentNV(int target);

  /** Entry point to C language function: <code> GLboolean {@native glIsEnabledi}(GLenum target, GLuint index); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public boolean glIsEnabledi(int target, int index);

  /** Entry point to C language function: <code> GLboolean {@native glIsNamedBufferResidentNV}(GLuint buffer); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public boolean glIsNamedBufferResidentNV(int buffer);

  /** Entry point to C language function: <code> GLboolean {@native glIsQuery}(GLuint id); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public boolean glIsQuery(int id);

  /** Entry point to C language function: <code> GLboolean {@native glIsVertexArray}(GLuint id); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>   */
  public boolean glIsVertexArray(int id);

  /** Entry point to C language function: <code> void {@native glLogicOp}(GLenum opcode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glLogicOp(int opcode);

  /** Entry point to C language function: <code> void {@native glMakeBufferNonResidentNV}(GLenum target); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glMakeBufferNonResidentNV(int target);

  /** Entry point to C language function: <code> void {@native glMakeBufferResidentNV}(GLenum target, GLenum access); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glMakeBufferResidentNV(int target, int access);

  /** Entry point to C language function: <code> GLvoid *  {@native glMapBufferRange}(GLenum target, ptrdiff_t offset, ptrdiff_t length, GLbitfield access); </code> <br>Part of <code>GL_ARB_map_buffer_range</code>   */
  public java.nio.ByteBuffer glMapBufferRange(int target, int offset, int length, int access);

  /** Entry point to C language function: <code> void {@native glMultiDrawArrays}(GLenum mode, GLint *  first, GLsizei *  count, GLsizei primcount); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glMultiDrawArrays(int mode, java.nio.IntBuffer first, java.nio.IntBuffer count, int primcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawArrays}(GLenum mode, GLint *  first, GLsizei *  count, GLsizei primcount); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glMultiDrawArrays(int mode, int[] first, int first_offset, int[] count, int count_offset, int primcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawElements}(GLenum mode, const GLsizei *  count, GLenum type, const GLvoid *  *  indices, GLsizei primcount); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glMultiDrawElements(int mode, java.nio.IntBuffer count, int type, java.nio.Buffer[] indices, int primcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawElements}(GLenum mode, const GLsizei *  count, GLenum type, const GLvoid *  *  indices, GLsizei primcount); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glMultiDrawElements(int mode, int[] count, int count_offset, int type, java.nio.Buffer[] indices, int primcount);

  /** Entry point to C language function: <code> void {@native glNamedMakeBufferNonResidentNV}(GLuint buffer); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glNamedMakeBufferNonResidentNV(int buffer);

  /** Entry point to C language function: <code> void {@native glNamedMakeBufferResidentNV}(GLuint buffer, GLenum access); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glNamedMakeBufferResidentNV(int buffer, int access);

  /** Entry point to C language function: <code> void {@native glNormalFormatNV}(GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glNormalFormatNV(int type, int stride);

  /** Entry point to C language function: <code> void {@native glPixelStoref}(GLenum pname, GLfloat param); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelStoref(int pname, float param);

  /** Entry point to C language function: <code> void {@native glPointParameterf}(GLenum target, GLfloat s); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameterf(int target, float s);

  /** Entry point to C language function: <code> void {@native glPointParameterfv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameterfv(int target, java.nio.FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glPointParameterfv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameterfv(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glPointParameteri}(GLenum target, GLint s); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameteri(int target, int s);

  /** Entry point to C language function: <code> void {@native glPointParameteriv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameteriv(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glPointParameteriv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameteriv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glPointSize}(GLfloat size); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPointSize(float size);

  /** Entry point to C language function: <code> void {@native glPolygonMode}(GLenum face, GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPolygonMode(int face, int mode);

  /** Entry point to C language function: <code> void {@native glPrimitiveRestartIndexNV}(GLuint mode); </code> <br>Part of <code>GL_NV_primitive_restart</code>   */
  public void glPrimitiveRestartIndex(int mode);

  /** Entry point to C language function: <code> void {@native glProgramParameteriARB}(GLuint target, GLenum pname, GLint params); </code> <br>Part of <code>GL_ARB_geometry_shader4</code>   */
  public void glProgramParameteri(int target, int pname, int params);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64NV}(GLuint program, GLint location, uint64_t value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glProgramUniformui64NV(int program, int location, long value);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64vNV}(GLuint program, GLint location, GLsizei count, uint64_t *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glProgramUniformui64vNV(int program, int location, int count, com.sun.gluegen.runtime.PointerBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64vNV}(GLuint program, GLint location, GLsizei count, uint64_t *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glProgramUniformui64vNV(int program, int location, int count, long[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glReadBuffer}(GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glReadBuffer(int mode);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisample}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_ARB_framebuffer_object</code>   */
  public void glRenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glSecondaryColorFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glSecondaryColorFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glTessellationFactorAMD}(GLfloat factor); </code> <br>Part of <code>GL_AMD_vertex_shader_tessellator</code>   */
  public void glTessellationFactorAMD(float factor);

  /** Entry point to C language function: <code> void {@native glTessellationModeAMD}(GLenum mode); </code> <br>Part of <code>GL_AMD_vertex_shader_tessellator</code>   */
  public void glTessellationModeAMD(int mode);

  /** Entry point to C language function: <code> void {@native glTexBufferARB}(GLenum red, GLenum green, GLuint blue); </code> <br>Part of <code>GL_ARB_texture_buffer_object</code>   */
  public void glTexBuffer(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glTexCoordFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glTexCoordFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glTexImage1D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexImage1D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTexImage3D}(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexImage3D}(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTexParameterIiv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glTexParameterIiv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTexParameterIiv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glTexParameterIiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTexParameterIuiv}(GLenum target, GLenum pname, const GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glTexParameterIuiv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTexParameterIuiv}(GLenum target, GLenum pname, const GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glTexParameterIuiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTransformFeedbackVaryings}(GLuint program, GLsizei count, const GLchar *  *  locations, GLenum bufferMode); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glTransformFeedbackVaryings(int program, int count, java.lang.String[] locations, int bufferMode);

  /** Entry point to C language function: <code> void {@native glUniform1ui}(GLint location, GLuint v0); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform1ui(int location, int v0);

  /** Entry point to C language function: <code> void {@native glUniform1uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform1uiv(int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform1uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform1uiv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform2ui}(GLint location, GLuint v0, GLuint v1); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform2ui(int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glUniform2uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform2uiv(int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform2uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform2uiv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform3ui}(GLint location, GLuint v0, GLuint v1, GLuint v2); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform3ui(int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glUniform3uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform3uiv(int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform3uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform3uiv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform4ui}(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform4ui(int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glUniform4uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform4uiv(int location, int count, java.nio.IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform4uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glUniform4uiv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix2x3fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix2x3fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix2x4fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix2x4fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix3x2fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix3x2fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix3x4fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix3x4fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix4x2fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix4x2fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix4x3fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix4x3fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformui64NV}(GLint location, uint64_t value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glUniformui64NV(int location, long value);

  /** Entry point to C language function: <code> void {@native glUniformui64vNV}(GLint location, GLsizei count, uint64_t *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glUniformui64vNV(int location, int count, com.sun.gluegen.runtime.PointerBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformui64vNV}(GLint location, GLsizei count, uint64_t *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glUniformui64vNV(int location, int count, long[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1d}(GLuint target, GLdouble s); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1d(int target, double s);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dv}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1dv(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dv}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1s}(GLuint target, GLshort s); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1s(int target, short s);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1sv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1sv(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1sv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2d}(GLuint target, GLdouble s, GLdouble t); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2d(int target, double s, double t);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dv}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2dv(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dv}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2s}(GLuint target, GLshort s, GLshort t); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2s(int target, short s, short t);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2sv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2sv(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2sv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3d}(GLuint target, GLdouble s, GLdouble t, GLdouble r); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3d(int target, double s, double t, double r);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dv}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3dv(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dv}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3s}(GLuint target, GLshort s, GLshort t, GLshort r); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3s(int target, short s, short t, short r);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3sv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3sv(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3sv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nbv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nbv(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nbv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nbv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Niv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Niv(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Niv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Niv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nsv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nsv(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nsv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nsv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nub}(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nub(int index, byte x, byte y, byte z, byte w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nubv(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nuiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nuiv(int index, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nuiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nuiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nusv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nusv(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nusv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nusv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4bv(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4bv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4d}(GLuint target, GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4d(int target, double s, double t, double r, double q);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dv}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4dv(int target, java.nio.DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dv}(GLuint target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4iv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4iv(int target, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4iv}(GLuint target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4s}(GLuint target, GLshort s, GLshort t, GLshort r, GLshort q); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4s(int target, short s, short t, short r, short q);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4sv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4sv(int target, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4sv}(GLuint target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4ubv(int index, java.nio.ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4ubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4uiv(int index, java.nio.IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4usv(int index, java.nio.ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4usv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribFormatNV}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glVertexAttribFormatNV(int index, int size, int type, boolean normalized, int stride);

  /** Entry point to C language function: <code> void {@native glVertexAttribIFormatNV}(GLuint index, GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glVertexAttribIFormatNV(int index, int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glVertexAttribIPointer}(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribIPointer(int index, int size, int type, int stride, java.nio.Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glVertexFormatNV(int size, int type, int stride);


  // --- Begin CustomJavaCode .cfg declarations
   /**
    * Provides platform-independent access to the <code>wglAllocateMemoryNV</code> /
    * <code>glXAllocateMemoryNV</code> extension.
    */
   public java.nio.ByteBuffer glAllocateMemoryNV(int arg0, float arg1, float arg2, float arg3);
  // ---- End CustomJavaCode .cfg declarations

} // end of class GL2GL3
