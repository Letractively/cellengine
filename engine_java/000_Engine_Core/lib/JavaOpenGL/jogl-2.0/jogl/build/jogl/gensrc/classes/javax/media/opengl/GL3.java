/* !---- DO NOT EDIT: This file autogenerated by com\sun\gluegen\opengl\GLEmitter.java on Sun Jan 24 02:14:02 PST 2010 ----! */

package javax.media.opengl;

import java.nio.*;
import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import com.sun.opengl.impl.*;
import javax.media.opengl.GLES2;
import javax.media.opengl.GL3;
import javax.media.opengl.GLArrayData;
import javax.media.opengl.GLUniformData;
import com.sun.opengl.impl.InternalBufferUtil;
import java.io.PrintStream;
import com.sun.gluegen.runtime.*;

 /**
  * <P> 
  * This interface contains all core, forward compatible, OpenGL methods starting from 3.1,
  * inclusive, as well as most of it's extensions defined at the time of this specification.<br>
  * Note: OpenGL 3.0 forward compatible, non deprecated functionality is included in the 
  * 3.1 specification, hence the {@link GL2GL3} implemented interface.<br>
  * Note: OpenGL 3.1 forward compatible no more includes fixed point functionality.
  * </P>
  */
public interface GL3 extends GLBase, GL, GL2ES2, GL2GL3
{

  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_COMPARE_REF_TO_TEXTURE = 0x884E;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_SAMPLER_2D_RECT = 0x8B63;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RED_SNORM = 0x8F90;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RG_SNORM = 0x8F91;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RGB_SNORM = 0x8F92;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RGBA_SNORM = 0x8F93;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_R8_SNORM = 0x8F94;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RG8_SNORM = 0x8F95;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RGB8_SNORM = 0x8F96;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RGBA8_SNORM = 0x8F97;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_R16_SNORM = 0x8F98;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RG16_SNORM = 0x8F99;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RGB16_SNORM = 0x8F9A;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RGBA16_SNORM = 0x8F9B;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_SIGNED_NORMALIZED = 0x8F9C;
  /** Part of <code>GL_ARB_copy_buffer</code> */
  public static final int GL_COPY_READ_BUFFER = 0x8F36;
  /** Part of <code>GL_ARB_copy_buffer</code> */
  public static final int GL_COPY_WRITE_BUFFER = 0x8F37;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BUFFER = 0x8A11;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BUFFER_BINDING = 0x8A28;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BUFFER_START = 0x8A29;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_TYPE = 0x8A37;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_SIZE = 0x8A38;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_NAME_LENGTH = 0x8A39;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_OFFSET = 0x8A3B;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
  /** Part of <code>GL_ARB_provoking_vertex</code> */
  public static final int GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
  /** Part of <code>GL_ARB_provoking_vertex</code> */
  public static final int GL_LAST_VERTEX_CONVENTION = 0x8E4E;
  /** Part of <code>GL_ARB_provoking_vertex</code> */
  public static final int GL_PROVOKING_VERTEX = 0x8E4F;
  /** Part of <code>GL_ARB_provoking_vertex</code> */
  public static final int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
  /** Part of <code>GL_ARB_seamless_cube_map</code> */
  public static final int GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_SAMPLE_POSITION = 0x8E50;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_SAMPLE_MASK = 0x8E51;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_SAMPLE_MASK_VALUE = 0x8E52;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_MAX_INTEGER_SAMPLES = 0x9110;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_SAMPLES = 0x9106;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
  /** Part of <code>GL_ARB_depth_clamp</code> */
  public static final int GL_DEPTH_CLAMP = 0x864F;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_OBJECT_TYPE = 0x9112;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_CONDITION = 0x9113;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_STATUS = 0x9114;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_FLAGS = 0x9115;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_FENCE = 0x9116;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_UNSIGNALED = 0x9118;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SIGNALED = 0x9119;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_ALREADY_SIGNALED = 0x911A;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_TIMEOUT_EXPIRED = 0x911B;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_CONDITION_SATISFIED = 0x911C;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_WAIT_FAILED = 0x911D;

  /** Entry point to C language function: <code> GLenum {@native glClientWaitSync}(GLsync sync, GLbitfield flags, uint64_t timeout); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public int glClientWaitSync(long sync, int flags, long timeout);

  /** Entry point to C language function: <code> void {@native glCopyBufferSubData}(GLenum, GLenum, ptrdiff_t, ptrdiff_t, ptrdiff_t); </code> <br>Part of <code>GL_ARB_copy_buffer</code>   */
  public void glCopyBufferSubData(int arg0, int arg1, int arg2, int arg3, int arg4);

  /** Entry point to C language function: <code> void {@native glDeleteSync}(GLsync sync); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public void glDeleteSync(long sync);

  /** Entry point to C language function: <code> void {@native glDrawElementsBaseVertex}(GLenum mode, GLsizei count, GLenum type, GLvoid *  indices, GLint basevertex); </code> <br>Part of <code>GL_ARB_draw_elements_base_vertex</code>   */
  public void glDrawElementsBaseVertex(int mode, int count, int type, java.nio.Buffer indices, int basevertex);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedBaseVertex}(GLenum mode, GLsizei count, GLenum type, const GLvoid *  indices, GLsizei primcount, GLint basevertex); </code> <br>Part of <code>GL_ARB_draw_elements_base_vertex</code>   */
  public void glDrawElementsInstancedBaseVertex(int mode, int count, int type, java.nio.Buffer indices, int primcount, int basevertex);

  /** Entry point to C language function: <code> void {@native glDrawRangeElementsBaseVertex}(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *  indices, GLint basevertex); </code> <br>Part of <code>GL_ARB_draw_elements_base_vertex</code>   */
  public void glDrawRangeElementsBaseVertex(int mode, int start, int end, int count, int type, java.nio.Buffer indices, int basevertex);

  /** Entry point to C language function: <code> GLsync {@native glFenceSync}(GLenum condition, GLbitfield flags); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public long glFenceSync(int condition, int flags);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformBlockName}(GLuint, GLuint, GLsizei, GLsizei * , GLchar * ); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformBlockName(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.ByteBuffer arg4);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformBlockName}(GLuint, GLuint, GLsizei, GLsizei * , GLchar * ); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformBlockName(int arg0, int arg1, int arg2, int[] arg3, int arg3_offset, byte[] arg4, int arg4_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformBlockiv}(GLuint, GLuint, GLenum, GLint * ); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformBlockiv(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformBlockiv}(GLuint, GLuint, GLenum, GLint * ); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformBlockiv(int arg0, int arg1, int arg2, int[] arg3, int arg3_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformName}(GLuint, GLuint, GLsizei, GLsizei * , GLchar * ); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformName(int arg0, int arg1, int arg2, java.nio.IntBuffer arg3, java.nio.ByteBuffer arg4);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformName}(GLuint, GLuint, GLsizei, GLsizei * , GLchar * ); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformName(int arg0, int arg1, int arg2, int[] arg3, int arg3_offset, byte[] arg4, int arg4_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformsiv}(GLuint, GLsizei, const GLuint * , GLenum, GLint * ); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformsiv(int arg0, int arg1, java.nio.IntBuffer arg2, int arg3, java.nio.IntBuffer arg4);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformsiv}(GLuint, GLsizei, const GLuint * , GLenum, GLint * ); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformsiv(int arg0, int arg1, int[] arg2, int arg2_offset, int arg3, int[] arg4, int arg4_offset);

  /** Entry point to C language function: <code> void {@native glGetInteger64v}(GLenum pname, int64_t *  params); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public void glGetInteger64v(int pname, com.sun.gluegen.runtime.PointerBuffer params);

  /** Entry point to C language function: <code> void {@native glGetInteger64v}(GLenum pname, int64_t *  params); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public void glGetInteger64v(int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultisamplefv}(GLenum pname, GLuint index, GLfloat *  val); </code> <br>Part of <code>GL_ARB_texture_multisample</code>   */
  public void glGetMultisamplefv(int pname, int index, java.nio.FloatBuffer val);

  /** Entry point to C language function: <code> void {@native glGetMultisamplefv}(GLenum pname, GLuint index, GLfloat *  val); </code> <br>Part of <code>GL_ARB_texture_multisample</code>   */
  public void glGetMultisamplefv(int pname, int index, float[] val, int val_offset);

  /** Entry point to C language function: <code> void {@native glGetSynciv}(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *  length, GLint *  values); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public void glGetSynciv(long sync, int pname, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer values);

  /** Entry point to C language function: <code> void {@native glGetSynciv}(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *  length, GLint *  values); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public void glGetSynciv(long sync, int pname, int bufSize, int[] length, int length_offset, int[] values, int values_offset);

  /** Entry point to C language function: <code> GLuint {@native glGetUniformBlockIndex}(GLuint, const GLchar * ); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public int glGetUniformBlockIndex(int arg0, java.lang.String arg1);

  /** Entry point to C language function: <code> void {@native glGetUniformIndices}(GLuint, GLsizei, const GLchar *  * , GLuint * ); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetUniformIndices(int arg0, int arg1, java.lang.String[] arg2, java.nio.IntBuffer arg3);

  /** Entry point to C language function: <code> void {@native glGetUniformIndices}(GLuint, GLsizei, const GLchar *  * , GLuint * ); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetUniformIndices(int arg0, int arg1, java.lang.String[] arg2, int[] arg3, int arg3_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsSync}(GLsync sync); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public boolean glIsSync(long sync);

  /** Entry point to C language function: <code> void {@native glProvokingVertex}(GLenum mode); </code> <br>Part of <code>GL_ARB_provoking_vertex</code>   */
  public void glProvokingVertex(int mode);

  /** Entry point to C language function: <code> void {@native glSampleMaski}(GLuint index, GLbitfield mask); </code> <br>Part of <code>GL_ARB_texture_multisample</code>   */
  public void glSampleMaski(int index, int mask);

  /** Entry point to C language function: <code> void {@native glTexImage2DMultisample}(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations); </code> <br>Part of <code>GL_ARB_texture_multisample</code>   */
  public void glTexImage2DMultisample(int target, int samples, int internalformat, int width, int height, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTexImage3DMultisample}(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations); </code> <br>Part of <code>GL_ARB_texture_multisample</code>   */
  public void glTexImage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glUniformBlockBinding}(GLuint, GLuint, GLuint); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glUniformBlockBinding(int arg0, int arg1, int arg2);

  /** Entry point to C language function: <code> void {@native glWaitSync}(GLsync sync, GLbitfield flags, uint64_t timeout); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public void glWaitSync(long sync, int flags, long timeout);


  // --- Begin CustomJavaCode .cfg declarations
  
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_INVALID_INDEX = 0xFFFFFFFF ;
  
  /** Part of <code>GL_ARB_sync</code> */
  public static final long GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFL ;
  
  
  // ---- End CustomJavaCode .cfg declarations

} // end of class GL3
