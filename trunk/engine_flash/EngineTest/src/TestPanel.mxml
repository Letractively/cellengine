<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="600" chromeColor="#7E7E7E" enterFrame="group1_enterFrameHandler(event)" exitFrame="group1_exitFrameHandler(event)">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<fx:Script>
		<![CDATA[
			import com.net.client.Client;
			import com.net.client.ClientEvent;
			import com.net.client.ServerSession;
			import com.net.client.ServerSessionListener;
			import com.net.flash.test.MessageCodec;
			import com.net.flash.test.Messages.Data;
			import com.net.flash.test.Messages.Echo2Request;
			import com.net.flash.test.Messages.Echo2Response;
			import com.net.flash.test.Messages.EchoNotify;
			import com.net.flash.test.Messages.EchoRequest;
			import com.net.flash.test.Messages.EchoResponse;
			
			import flash.sampler.getGetterInvocationCount;
			
			import mx.events.FlexEvent;
			
			private var client : Client;
			
			private var start_time : Date;
			
			public function setClient(client : Client) : void
			{
				this.client = client;
				// 监听客户端连接情况
				this.client.addEventListener(ClientEvent.CONNECTED, 		client_connected);
				this.client.addEventListener(ClientEvent.DISCONNECTED,	client_disconnected);
				// 监听服务器主动发送过来的通知
				this.client.addNotifyListener(client_notify);
			}
			
			protected function btn_connect_clickHandler(event:MouseEvent):void
			{
				if (!client.isConnected()) {
					txt_info.appendText("connecting...\n");
					client.connect(txt_host.text, new int(txt_port.text));
				}
			}

			protected function btn_disconnect_clickHandler(event:MouseEvent):void
			{
				client.disconnect();
			}
			
			
			protected function btn_send_clickHandler(event:MouseEvent):void
			{
				start_time = new Date();
				client.sendRequest(new EchoRequest(txt_message.text), client_response);
			}
			
			protected function btn_send_big_clickHandler(event:MouseEvent):void
			{
				start_time = new Date();
				for (var i:int=0; i<10; i++) {
					client.sendRequest(new EchoRequest(txt_message.text), client_response);
				}
			}

			//-------------------------------------------------------------------------------------------------
			//网络事件
			protected function client_connected(event:ClientEvent) : void
			{
				txt_info.appendText("connected !\n");
			}
			protected function client_disconnected(event:ClientEvent) : void
			{
				txt_info.appendText("disconnected ! " + event.getReason() + "\n");
			}
			// 监听回馈消息
			protected function client_response(event:ClientEvent)
			{
				var ping : Number = 0;
				if (start_time != null) {
					var cur_time : Date = new Date();
					ping = (cur_time.time - start_time.time);
				}
				if (event.getResponse() is EchoResponse) {
					var response1 : EchoResponse = event.getResponse() as EchoResponse;
					txt_info.appendText("response : " + response1.message + 
						" : ping=" + ping + "(ms)\n");
				}
				else if (event.getResponse() is Echo2Response) {
					var response2 : Echo2Response = event.getResponse() as Echo2Response;
					txt_info.appendText("response : " + response2.message + 
						" : ping=" + ping + "(ms)\n");
				}
			}
			// 监听通知消息
			protected function client_notify(event:ClientEvent)
			{
				if (event.getResponse() is EchoNotify) {
					var notify : EchoNotify = event.getNotify() as EchoNotify;
					txt_info.appendText("notify : " + notify.message + "\n");
				}
			}
			//-------------------------------------------------------------------------------------------------

			

			protected function group1_enterFrameHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				trace("enter frame");
				
				
			}


			protected function group1_exitFrameHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				trace("exit frame");
			}


			protected function txt_info_enterFrameHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				trace("txt enter frame");
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:TextInput x="59" y="10" id="txt_host" text="127.0.0.1"/>
	<s:Label x="10" y="10" text="地址" width="45" height="23" verticalAlign="middle" textAlign="center"/>
	<s:Button x="294" y="10" label="链接" height="21" id="btn_connect" click="btn_connect_clickHandler(event)"/>
	<s:Button x="372" y="10" label="断开" height="21" id="btn_disconnect" click="btn_disconnect_clickHandler(event)"/>
	<s:TextInput x="21" y="417" width="376" id="txt_message"/>
	<s:Button x="405" y="418" label="发送" id="btn_send" click="btn_send_clickHandler(event)"/>
	<s:TextInput x="195" y="10" width="91" text="19820" id="txt_port"/>
	<s:TextArea x="19" y="36" width="456" height="373" id="txt_info" enterFrame="txt_info_enterFrameHandler(event)"/>
	<s:Button x="405" y="447" label="发送10" id="btn_send_big" click="btn_send_big_clickHandler(event)"/>
</s:Group>
