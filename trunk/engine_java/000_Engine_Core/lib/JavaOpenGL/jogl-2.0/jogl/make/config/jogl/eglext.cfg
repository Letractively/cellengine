# This .cfg file is used to generate the interface to the EGL routines
# used internally by the EGLContext implementation.
JavaOutputDir gensrc/classes
NativeOutputDir gensrc/native/jogl/egl

Package com.sun.opengl.impl.egl
Style InterfaceAndImpl
JavaClass EGLExt
ImplPackage com.sun.opengl.impl.egl
ImplJavaClass EGLExtImpl
# Shouldn't matter which one of these we pick up
Include egl-common.cfg

ExtendedInterfaceSymbolsIgnore ../build-temp/gensrc/classes/com/sun/opengl/impl/egl/EGL.java

HierarchicalNativeOutput false

# Use a ProcAddressTable so we dynamically look up the routines
EmitProcAddressTable true
ProcAddressTableClassName EGLExtProcAddressTable
GetProcAddressTableExpr _context.getEGLExtProcAddressTable()

CustomCCode /* Define EGL_EGLEXT_PROTOTYPES so that the EGL extension prototypes in
CustomCCode    "eglext.h" are parsed. */
CustomCCode #define EGL_EGLEXT_PROTOTYPES
CustomCCode
CustomCCode #include <EGL/eglext.h>

Include ../intptr.cfg

# There are some #defines in eglext.h that GlueGen and PCPP don't currently handle
CustomJavaCode EGLExt      /** Part of <code>EGL_KHR_image</code> */
CustomJavaCode EGLExt      public static final long EGL_NO_IMAGE = 0;
CustomJavaCode EGLExt      /** Part of <code>EGL_NV_perfmon</code> */
CustomJavaCode EGLExt      public static final long EGL_NO_PERFMONITOR = 0;
CustomJavaCode EGLExt      /** Part of <code>EGL_NV_perfmon</code> */
CustomJavaCode EGLExt      public static final long EGL_DEFAULT_PERFMARKER = 0;
CustomJavaCode EGLExt      /** Part of <code>EGL_KHR_sync</code> */
CustomJavaCode EGLExt      public static final long EGL_FOREVER_KHR = 0xFFFFFFFFFFFFFFFFL ;
CustomJavaCode EGLExt      public boolean isFunctionAvailable(String glFunctionName);
CustomJavaCode EGLExt      public boolean isExtensionAvailable(String glExtensionName);

CustomJavaCode EGLExtImpl  public EGLExtImpl(EGLContext context) {
CustomJavaCode EGLExtImpl    this._context = context; 
CustomJavaCode EGLExtImpl  }

CustomJavaCode EGLExtImpl  public boolean isFunctionAvailable(String glFunctionName)
CustomJavaCode EGLExtImpl  {
CustomJavaCode EGLExtImpl    return _context.isFunctionAvailable(glFunctionName);
CustomJavaCode EGLExtImpl  }

CustomJavaCode EGLExtImpl  public boolean isExtensionAvailable(String glExtensionName)
CustomJavaCode EGLExtImpl  {
CustomJavaCode EGLExtImpl    return _context.isExtensionAvailable(glExtensionName);
CustomJavaCode EGLExtImpl  }

CustomJavaCode EGLExtImpl  private EGLContext _context;

