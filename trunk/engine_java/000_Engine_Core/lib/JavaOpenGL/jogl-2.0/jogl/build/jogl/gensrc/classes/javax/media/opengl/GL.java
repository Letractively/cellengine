/* !---- DO NOT EDIT: This file autogenerated by com\sun\gluegen\opengl\GLEmitter.java on Sun Jan 24 02:13:20 PST 2010 ----! */

package javax.media.opengl;

import java.nio.*;
import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import com.sun.opengl.impl.*;
import javax.media.opengl.GLES1;
import javax.media.opengl.GLES2;
import javax.media.opengl.GL2;
import com.sun.gluegen.runtime.*;

 /**
  * <P> Common interface containing the subset of all profiles, GL3bc, GL3, GL2, GLES1 and GLES2.<br>
  * This interface reflects common data types, texture and framebuffer functionality.</P>
  */
public interface GL extends GLBase
{

  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_BUFFER_BIT = 0x00000100;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_BUFFER_BIT = 0x00000400;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR_BUFFER_BIT = 0x00004000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FALSE = 0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TRUE = 1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_NONE = 0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POINTS = 0x0000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINES = 0x0001;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_LOOP = 0x0002;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_STRIP = 0x0003;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TRIANGLES = 0x0004;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TRIANGLE_STRIP = 0x0005;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TRIANGLE_FAN = 0x0006;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ZERO = 0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ONE = 1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SRC_COLOR = 0x0300;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ONE_MINUS_SRC_COLOR = 0x0301;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SRC_ALPHA = 0x0302;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ONE_MINUS_SRC_ALPHA = 0x0303;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DST_ALPHA = 0x0304;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ONE_MINUS_DST_ALPHA = 0x0305;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DST_COLOR = 0x0306;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ONE_MINUS_DST_COLOR = 0x0307;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SRC_ALPHA_SATURATE = 0x0308;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_FUNC_ADD = 0x8006;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_BLEND_EQUATION = 0x8009;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_BLEND_EQUATION_RGB = 0x8009;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_BLEND_EQUATION_ALPHA = 0x883D;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_FUNC_SUBTRACT = 0x800A;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_FUNC_REVERSE_SUBTRACT = 0x800B;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_BLEND_DST_RGB = 0x80C8;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_BLEND_SRC_RGB = 0x80C9;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_BLEND_DST_ALPHA = 0x80CA;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_BLEND_SRC_ALPHA = 0x80CB;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_ARRAY_BUFFER = 0x8892;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_ELEMENT_ARRAY_BUFFER = 0x8893;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_ARRAY_BUFFER_BINDING = 0x8894;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_STATIC_DRAW = 0x88E4;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_DYNAMIC_DRAW = 0x88E8;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_BUFFER_SIZE = 0x8764;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_BUFFER_USAGE = 0x8765;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FRONT = 0x0404;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BACK = 0x0405;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FRONT_AND_BACK = 0x0408;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_2D = 0x0DE1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CULL_FACE = 0x0B44;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BLEND = 0x0BE2;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DITHER = 0x0BD0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_TEST = 0x0B90;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_TEST = 0x0B71;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SCISSOR_TEST = 0x0C11;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_OFFSET_FILL = 0x8037;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SAMPLE_COVERAGE = 0x80A0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_NO_ERROR = 0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INVALID_ENUM = 0x0500;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INVALID_VALUE = 0x0501;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INVALID_OPERATION = 0x0502;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_OUT_OF_MEMORY = 0x0505;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CW = 0x0900;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CCW = 0x0901;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_WIDTH = 0x0B21;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CULL_FACE_MODE = 0x0B45;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FRONT_FACE = 0x0B46;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_RANGE = 0x0B70;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_WRITEMASK = 0x0B72;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_CLEAR_VALUE = 0x0B73;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_FUNC = 0x0B74;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_CLEAR_VALUE = 0x0B91;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_FUNC = 0x0B92;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_FAIL = 0x0B94;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_REF = 0x0B97;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_VALUE_MASK = 0x0B93;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_WRITEMASK = 0x0B98;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_VIEWPORT = 0x0BA2;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SCISSOR_BOX = 0x0C10;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR_CLEAR_VALUE = 0x0C22;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR_WRITEMASK = 0x0C23;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_UNPACK_ALIGNMENT = 0x0CF5;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_ALIGNMENT = 0x0D05;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_TEXTURE_SIZE = 0x0D33;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_VIEWPORT_DIMS = 0x0D3A;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SUBPIXEL_BITS = 0x0D50;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RED_BITS = 0x0D52;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_GREEN_BITS = 0x0D53;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BLUE_BITS = 0x0D54;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ALPHA_BITS = 0x0D55;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_BITS = 0x0D56;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_BITS = 0x0D57;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_OFFSET_UNITS = 0x2A00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_OFFSET_FACTOR = 0x8038;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_TEXTURE_BINDING_2D = 0x8069;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SAMPLE_BUFFERS = 0x80A8;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SAMPLES = 0x80A9;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DONT_CARE = 0x1100;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FASTEST = 0x1101;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_NICEST = 0x1102;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_GENERATE_MIPMAP_HINT = 0x8192;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BYTE = 0x1400;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_UNSIGNED_BYTE = 0x1401;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SHORT = 0x1402;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_UNSIGNED_SHORT = 0x1403;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FLOAT = 0x1406;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_FIXED = 0x140C;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ALPHA = 0x1906;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RGB = 0x1907;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RGBA = 0x1908;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LUMINANCE = 0x1909;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LUMINANCE_ALPHA = 0x190A;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_NEVER = 0x0200;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LESS = 0x0201;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_EQUAL = 0x0202;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LEQUAL = 0x0203;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_GREATER = 0x0204;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_NOTEQUAL = 0x0205;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_GEQUAL = 0x0206;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ALWAYS = 0x0207;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_KEEP = 0x1E00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_REPLACE = 0x1E01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INCR = 0x1E02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DECR = 0x1E03;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INVERT = 0x150A;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_INCR_WRAP = 0x8507;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_DECR_WRAP = 0x8508;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_VENDOR = 0x1F00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RENDERER = 0x1F01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_VERSION = 0x1F02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_EXTENSIONS = 0x1F03;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_NEAREST = 0x2600;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINEAR = 0x2601;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_NEAREST_MIPMAP_NEAREST = 0x2700;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINEAR_MIPMAP_NEAREST = 0x2701;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_NEAREST_MIPMAP_LINEAR = 0x2702;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINEAR_MIPMAP_LINEAR = 0x2703;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_MAG_FILTER = 0x2800;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_MIN_FILTER = 0x2801;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_WRAP_S = 0x2802;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_WRAP_T = 0x2803;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE = 0x1702;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_CUBE_MAP = 0x8513;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE0 = 0x84C0;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE1 = 0x84C1;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE2 = 0x84C2;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE3 = 0x84C3;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE4 = 0x84C4;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE5 = 0x84C5;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE6 = 0x84C6;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE7 = 0x84C7;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE8 = 0x84C8;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE9 = 0x84C9;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE10 = 0x84CA;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE11 = 0x84CB;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE12 = 0x84CC;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE13 = 0x84CD;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE14 = 0x84CE;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE15 = 0x84CF;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE16 = 0x84D0;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE17 = 0x84D1;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE18 = 0x84D2;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE19 = 0x84D3;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE20 = 0x84D4;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE21 = 0x84D5;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE22 = 0x84D6;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE23 = 0x84D7;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE24 = 0x84D8;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE25 = 0x84D9;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE26 = 0x84DA;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE27 = 0x84DB;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE28 = 0x84DC;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE29 = 0x84DD;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE30 = 0x84DE;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE31 = 0x84DF;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_ACTIVE_TEXTURE = 0x84E0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_REPEAT = 0x2901;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_CLAMP_TO_EDGE = 0x812F;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_MIRRORED_REPEAT = 0x8370;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER = 0x8D40;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER = 0x8D41;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGBA4 = 0x8056;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB5_A1 = 0x8057;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_RGB565 = 0x8D62;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_DEPTH_COMPONENT16 = 0x81A5;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_STENCIL_INDEX8 = 0x8D48;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_WIDTH = 0x8D42;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_HEIGHT = 0x8D43;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_RED_SIZE = 0x8D50;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_COLOR_ATTACHMENT0 = 0x8CE0;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_DEPTH_ATTACHMENT = 0x8D00;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_STENCIL_ATTACHMENT = 0x8D20;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_FORMATS = 0x8CDA;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_BINDING = 0x8CA6;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_BINDING = 0x8CA7;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
  /** Part of <code>GL_ARB_half_float_vertex, GL_OES_texture_half_float</code> */
  public static final int GL_HALF_FLOAT = 0x8D61;
  /** Part of <code>GL_VERSION_1_5, GL_OES_mapbuffer</code> */
  public static final int GL_BUFFER_MAPPED = 0x88BC;
  /** Part of <code>GL_VERSION_1_5, GL_OES_mapbuffer</code> */
  public static final int GL_BUFFER_MAP_POINTER = 0x88BD;
  /** Part of <code>GL_VERSION_1_1, GL_OES_rgb8_rgba8</code> */
  public static final int GL_RGB8 = 0x8051;
  /** Part of <code>GL_VERSION_1_1, GL_OES_rgb8_rgba8</code> */
  public static final int GL_RGBA8 = 0x8058;
  /** Part of <code>GL_VERSION_3_0, GL_EXT_packed_float</code> */
  public static final int GL_R11F_G11F_B10F = 0x8C3A;
  /** Part of <code>GL_VERSION_3_0, GL_EXT_packed_float</code> */
  public static final int GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
  /** Part of <code>GL_EXT_packed_float</code> */
  public static final int GL_RGBA_SIGNED_COMPONENTS = 0x8C3C;
  /** Part of <code>GL_VERSION_3_0, GL_EXT_texture_array</code> */
  public static final int GL_TEXTURE_2D_ARRAY = 0x8C1A;
  /** Part of <code>GL_VERSION_3_0, GL_EXT_gpu_shader4</code> */
  public static final int GL_SAMPLER_2D_ARRAY = 0x8DC1;
  /** Part of <code>GL_VERSION_3_0, GL_EXT_texture_array</code> */
  public static final int GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
  /** Part of <code>GL_VERSION_3_0, GL_EXT_texture_array</code> */
  public static final int GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
  /** Part of <code>GL_ARB_framebuffer_object, GL_EXT_geometry_shader4</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
  /** Part of <code>GL_EXT_texture_compression_s3tc</code> */
  public static final int GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
  /** Part of <code>GL_EXT_texture_compression_s3tc</code> */
  public static final int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
  /** Part of <code>GL_EXT_texture_compression_s3tc</code> */
  public static final int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
  /** Part of <code>GL_EXT_texture_compression_s3tc</code> */
  public static final int GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
  /** Part of <code>GL_EXT_texture_filter_anisotropic</code> */
  public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
  /** Part of <code>GL_EXT_texture_filter_anisotropic</code> */
  public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;

  /** Interface to C language function: <br> <code> void {@native glActiveTexture}(GLenum texture); </code>    */
  public void glActiveTexture(int texture);

  /** Interface to C language function: <br> <code> void {@native glBindBuffer}(GLenum target, GLuint buffer); </code>    */
  public void glBindBuffer(int target, int buffer);

  /** Interface to C language function: <br> <code> void {@native glBindFramebuffer}(GLenum target, GLuint framebuffer); </code>    */
  public void glBindFramebuffer(int target, int framebuffer);

  /** Interface to C language function: <br> <code> void {@native glBindRenderbuffer}(GLenum target, GLuint renderbuffer); </code>    */
  public void glBindRenderbuffer(int target, int renderbuffer);

  /** Interface to C language function: <br> <code> void {@native glBindTexture}(GLenum target, GLuint texture); </code>    */
  public void glBindTexture(int target, int texture);

  /** Interface to C language function: <br> <code> void {@native glBlendEquation}(GLenum mode); </code>    */
  public void glBlendEquation(int mode);

  /** Interface to C language function: <br> <code> void {@native glBlendEquationSeparate}(GLenum modeRGB, GLenum modeAlpha); </code>    */
  public void glBlendEquationSeparate(int modeRGB, int modeAlpha);

  /** Interface to C language function: <br> <code> void {@native glBlendFunc}(GLenum sfactor, GLenum dfactor); </code>    */
  public void glBlendFunc(int sfactor, int dfactor);

  /** Interface to C language function: <br> <code> void {@native glBlendFuncSeparate}(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha); </code>    */
  public void glBlendFuncSeparate(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

  /** Interface to C language function: <br> <code> void {@native glBufferData}(GLenum target, GLsizeiptr size, const void *  data, GLenum usage); </code>    */
  public void glBufferData(int target, int size, java.nio.Buffer data, int usage);

  /** Interface to C language function: <br> <code> void {@native glBufferSubData}(GLenum target, GLintptr offset, GLsizeiptr size, const void *  data); </code>    */
  public void glBufferSubData(int target, int offset, int size, java.nio.Buffer data);

  /** Interface to C language function: <br> <code> GLenum {@native glCheckFramebufferStatus}(GLenum target); </code>    */
  public int glCheckFramebufferStatus(int target);

  /** Interface to C language function: <br> <code> void {@native glClear}(GLbitfield mask); </code>    */
  public void glClear(int mask);

  /** Interface to C language function: <br> <code> void {@native glClearColor}(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha); </code>    */
  public void glClearColor(float red, float green, float blue, float alpha);

  /** Interface to C language function: <br> <code> void {@native glClearDepthf}(GLclampf depth); </code>    */
  public void glClearDepthf(float depth);

  /** Interface to C language function: <br> <code> void {@native glClearStencil}(GLint s); </code>    */
  public void glClearStencil(int s);

  /** Interface to C language function: <br> <code> void {@native glColorMask}(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha); </code>    */
  public void glColorMask(boolean red, boolean green, boolean blue, boolean alpha);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage2D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, java.nio.Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage2D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage2D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, java.nio.Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage2D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, long data_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glCopyTexImage2D}(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border); </code>    */
  public void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border);

  /** Interface to C language function: <br> <code> void {@native glCopyTexSubImage2D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code>    */
  public void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

  /** Interface to C language function: <br> <code> void {@native glCullFace}(GLenum mode); </code>    */
  public void glCullFace(int mode);

  /** Interface to C language function: <br> <code> void {@native glDeleteBuffers}(GLsizei n, const GLuint *  buffers); </code>    */
  public void glDeleteBuffers(int n, java.nio.IntBuffer buffers);

  /** Interface to C language function: <br> <code> void {@native glDeleteBuffers}(GLsizei n, const GLuint *  buffers); </code>    */
  public void glDeleteBuffers(int n, int[] buffers, int buffers_offset);

  /** Interface to C language function: <br> <code> void {@native glDeleteFramebuffers}(GLsizei n, const GLuint *  framebuffers); </code>    */
  public void glDeleteFramebuffers(int n, java.nio.IntBuffer framebuffers);

  /** Interface to C language function: <br> <code> void {@native glDeleteFramebuffers}(GLsizei n, const GLuint *  framebuffers); </code>    */
  public void glDeleteFramebuffers(int n, int[] framebuffers, int framebuffers_offset);

  /** Interface to C language function: <br> <code> void {@native glDeleteRenderbuffers}(GLsizei n, const GLuint *  renderbuffers); </code>    */
  public void glDeleteRenderbuffers(int n, java.nio.IntBuffer renderbuffers);

  /** Interface to C language function: <br> <code> void {@native glDeleteRenderbuffers}(GLsizei n, const GLuint *  renderbuffers); </code>    */
  public void glDeleteRenderbuffers(int n, int[] renderbuffers, int renderbuffers_offset);

  /** Interface to C language function: <br> <code> void {@native glDeleteTextures}(GLsizei n, const GLuint *  textures); </code>    */
  public void glDeleteTextures(int n, java.nio.IntBuffer textures);

  /** Interface to C language function: <br> <code> void {@native glDeleteTextures}(GLsizei n, const GLuint *  textures); </code>    */
  public void glDeleteTextures(int n, int[] textures, int textures_offset);

  /** Interface to C language function: <br> <code> void {@native glDepthFunc}(GLenum func); </code>    */
  public void glDepthFunc(int func);

  /** Interface to C language function: <br> <code> void {@native glDepthMask}(GLboolean flag); </code>    */
  public void glDepthMask(boolean flag);

  /** Interface to C language function: <br> <code> void {@native glDepthRangef}(GLclampf zNear, GLclampf zFar); </code>    */
  public void glDepthRangef(float zNear, float zFar);

  /** Interface to C language function: <br> <code> void {@native glDisable}(GLenum cap); </code>    */
  public void glDisable(int cap);

  /** Interface to C language function: <br> <code> void {@native glDrawArrays}(GLenum mode, GLint first, GLsizei count); </code>    */
  public void glDrawArrays(int mode, int first, int count);

  /** Entry point to C language function: <code> void {@native glDrawElements}(GLenum mode, GLsizei count, GLenum type, const void *  indices); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glDrawElements(int mode, int count, int type, java.nio.Buffer indices);

  /** Entry point to C language function: <code> void {@native glDrawElements}(GLenum mode, GLsizei count, GLenum type, const void *  indices); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glDrawElements(int mode, int count, int type, long indices_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glEnable}(GLenum cap); </code>    */
  public void glEnable(int cap);

  /** Interface to C language function: <br> <code> void {@native glFinish}(void); </code>    */
  public void glFinish();

  /** Interface to C language function: <br> <code> void {@native glFlush}(void); </code>    */
  public void glFlush();

  /** Interface to C language function: <br> <code> void {@native glFramebufferRenderbuffer}(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer); </code>    */
  public void glFramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, int renderbuffer);

  /** Interface to C language function: <br> <code> void {@native glFramebufferTexture2D}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level); </code>    */
  public void glFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level);

  /** Interface to C language function: <br> <code> void {@native glFrontFace}(GLenum mode); </code>    */
  public void glFrontFace(int mode);

  /** Interface to C language function: <br> <code> void {@native glGenBuffers}(GLsizei n, GLuint *  buffers); </code>    */
  public void glGenBuffers(int n, java.nio.IntBuffer buffers);

  /** Interface to C language function: <br> <code> void {@native glGenBuffers}(GLsizei n, GLuint *  buffers); </code>    */
  public void glGenBuffers(int n, int[] buffers, int buffers_offset);

  /** Interface to C language function: <br> <code> void {@native glGenFramebuffers}(GLsizei n, GLuint *  framebuffers); </code>    */
  public void glGenFramebuffers(int n, java.nio.IntBuffer framebuffers);

  /** Interface to C language function: <br> <code> void {@native glGenFramebuffers}(GLsizei n, GLuint *  framebuffers); </code>    */
  public void glGenFramebuffers(int n, int[] framebuffers, int framebuffers_offset);

  /** Interface to C language function: <br> <code> void {@native glGenRenderbuffers}(GLsizei n, GLuint *  renderbuffers); </code>    */
  public void glGenRenderbuffers(int n, java.nio.IntBuffer renderbuffers);

  /** Interface to C language function: <br> <code> void {@native glGenRenderbuffers}(GLsizei n, GLuint *  renderbuffers); </code>    */
  public void glGenRenderbuffers(int n, int[] renderbuffers, int renderbuffers_offset);

  /** Interface to C language function: <br> <code> void {@native glGenTextures}(GLsizei n, GLuint *  textures); </code>    */
  public void glGenTextures(int n, java.nio.IntBuffer textures);

  /** Interface to C language function: <br> <code> void {@native glGenTextures}(GLsizei n, GLuint *  textures); </code>    */
  public void glGenTextures(int n, int[] textures, int textures_offset);

  /** Interface to C language function: <br> <code> void {@native glGenerateMipmap}(GLenum target); </code>    */
  public void glGenerateMipmap(int target);

  /** Interface to C language function: <br> <code> void {@native glGetBooleanv}(GLenum pname, GLboolean *  params); </code>    */
  public void glGetBooleanv(int pname, java.nio.ByteBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetBooleanv}(GLenum pname, GLboolean *  params); </code>    */
  public void glGetBooleanv(int pname, byte[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetBufferParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetBufferParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetBufferParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetBufferParameteriv(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> GLenum {@native glGetError}(void); </code>    */
  public int glGetError();

  /** Interface to C language function: <br> <code> void {@native glGetFloatv}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetFloatv(int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetFloatv}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetFloatv(int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetFramebufferAttachmentParameteriv}(GLenum target, GLenum attachment, GLenum pname, GLint *  params); </code>    */
  public void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetFramebufferAttachmentParameteriv}(GLenum target, GLenum attachment, GLenum pname, GLint *  params); </code>    */
  public void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetIntegerv}(GLenum pname, GLint *  params); </code>    */
  public void glGetIntegerv(int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetIntegerv}(GLenum pname, GLint *  params); </code>    */
  public void glGetIntegerv(int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetRenderbufferParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetRenderbufferParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetRenderbufferParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetRenderbufferParameteriv(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> const GLubyte *  {@native glGetString}(GLenum name); </code>    */
  public java.lang.String glGetString(int name);

  /** Interface to C language function: <br> <code> void {@native glGetTexParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexParameterfv(int target, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetTexParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetTexParameteriv(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glHint}(GLenum target, GLenum mode); </code>    */
  public void glHint(int target, int mode);

  /** Interface to C language function: <br> <code> GLboolean {@native glIsBuffer}(GLuint buffer); </code>    */
  public boolean glIsBuffer(int buffer);

  /** Interface to C language function: <br> <code> GLboolean {@native glIsEnabled}(GLenum cap); </code>    */
  public boolean glIsEnabled(int cap);

  /** Interface to C language function: <br> <code> GLboolean {@native glIsFramebuffer}(GLuint framebuffer); </code>    */
  public boolean glIsFramebuffer(int framebuffer);

  /** Interface to C language function: <br> <code> GLboolean {@native glIsRenderbuffer}(GLuint renderbuffer); </code>    */
  public boolean glIsRenderbuffer(int renderbuffer);

  /** Interface to C language function: <br> <code> GLboolean {@native glIsTexture}(GLuint texture); </code>    */
  public boolean glIsTexture(int texture);

  /** Interface to C language function: <br> <code> void {@native glLineWidth}(GLfloat width); </code>    */
  public void glLineWidth(float width);

  /** Interface to C language function: <br> <code> GLeglImageOES {@native glMapBufferOES}(GLenum target, GLenum access); </code>    */
  public java.nio.ByteBuffer glMapBuffer(int target, int access);

  /** Interface to C language function: <br> <code> void {@native glPixelStorei}(GLenum pname, GLint param); </code>    */
  public void glPixelStorei(int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glPolygonOffset}(GLfloat factor, GLfloat units); </code>    */
  public void glPolygonOffset(float factor, float units);

  /** Entry point to C language function: <code> void {@native glReadPixels}(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLeglImageOES pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glReadPixels(int x, int y, int width, int height, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glReadPixels}(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLeglImageOES pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glReadPixels(int x, int y, int width, int height, int format, int type, long pixels_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glRenderbufferStorage}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height); </code>    */
  public void glRenderbufferStorage(int target, int internalformat, int width, int height);

  /** Interface to C language function: <br> <code> void {@native glSampleCoverage}(GLclampf value, GLboolean invert); </code>    */
  public void glSampleCoverage(float value, boolean invert);

  /** Interface to C language function: <br> <code> void {@native glScissor}(GLint x, GLint y, GLsizei width, GLsizei height); </code>    */
  public void glScissor(int x, int y, int width, int height);

  /** Interface to C language function: <br> <code> void {@native glStencilFunc}(GLenum func, GLint ref, GLuint mask); </code>    */
  public void glStencilFunc(int func, int ref, int mask);

  /** Interface to C language function: <br> <code> void {@native glStencilMask}(GLuint mask); </code>    */
  public void glStencilMask(int mask);

  /** Interface to C language function: <br> <code> void {@native glStencilOp}(GLenum fail, GLenum zfail, GLenum zpass); </code>    */
  public void glStencilOp(int fail, int zfail, int zpass);

  /** Entry point to C language function: <code> void {@native glTexImage2D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexImage2D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, long pixels_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glTexParameterf}(GLenum target, GLenum pname, GLfloat param); </code>    */
  public void glTexParameterf(int target, int pname, float param);

  /** Interface to C language function: <br> <code> void {@native glTexParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glTexParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glTexParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glTexParameterfv(int target, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glTexParameteri}(GLenum target, GLenum pname, GLint param); </code>    */
  public void glTexParameteri(int target, int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glTexParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glTexParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glTexParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glTexParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTexSubImage2D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *  pixels); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, java.nio.Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexSubImage2D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *  pixels); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> GLboolean {@native glUnmapBufferOES}(GLenum target); </code> <br>Part of <code>GL_VERSION_1_5, GL_OES_mapbuffer</code>   */
  public boolean glUnmapBuffer(int target);

  /** Interface to C language function: <br> <code> void {@native glViewport}(GLint x, GLint y, GLsizei width, GLsizei height); </code>    */
  public void glViewport(int x, int y, int width, int height);


  // --- Begin CustomJavaCode .cfg declarations
  
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_AND = 0x1501;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_AND_INVERTED = 0x1504;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_AND_REVERSE = 0x1502;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_BLEND_DST = 0x0BE0;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_BLEND_SRC = 0x0BE1;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_BUFFER_ACCESS = 0x88BB;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_CLEAR = 0x1500;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_COLOR_LOGIC_OP = 0x0BF2;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_COPY = 0x1503;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_COPY_INVERTED = 0x150C;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_DEPTH_COMPONENT24 = 0x81A6;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_DEPTH_COMPONENT32 = 0x81A7;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_EQUIV = 0x1509;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_LINE_SMOOTH = 0x0B20;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_LINE_SMOOTH_HINT = 0x0C52;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_LOGIC_OP_MODE = 0x0BF0;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_MULTISAMPLE = 0x809D;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_NAND = 0x150E;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_NOOP = 0x1505;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_NOR = 0x1508;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_OR = 0x1507;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_OR_INVERTED = 0x150D;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_OR_REVERSE = 0x150B;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_POINT_SIZE = 0x0B11;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_SET = 0x150F;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_STENCIL_INDEX1 = 0x8D46;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_STENCIL_INDEX4 = 0x8D47;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_WRITE_ONLY = 0x88B9;
    /** Common in ES1, GL2 and GL3 */
    public static final int GL_XOR = 0x1506;
  
    public void glClearDepth( double depth );
  
    public void glDepthRange(double zNear, double zFar);
  
    public int glGetBoundBuffer(int target);
  
    public boolean glIsVBOArrayEnabled();
    public boolean glIsVBOElementEnabled();
  
  // ---- End CustomJavaCode .cfg declarations

} // end of class GL
