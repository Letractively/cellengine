/* !---- DO NOT EDIT: This file autogenerated by com\sun\gluegen\opengl\GLEmitter.java on Sun Jan 24 02:13:30 PST 2010 ----! */

package javax.media.opengl;

import java.nio.*;
import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import com.sun.opengl.impl.*;
import java.io.PrintStream;
import com.sun.gluegen.runtime.*;

 /**
  * <P> 
  * Interface containing the common subset of GL3, GL2 and GLES2.<br>
  * This interface reflects only the programmable shader functionality of desktop and embedded OpenGL<br>
  * </P>
  */
public interface GL2ES2 extends GLBase, GL
{

  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONSTANT_COLOR = 0x8001;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_CONSTANT_ALPHA = 0x8003;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_BLEND_COLOR = 0x8005;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_STREAM_DRAW = 0x88E0;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_CURRENT_VERTEX_ATTRIB = 0x8626;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_STENCIL_BACK_FUNC = 0x8800;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_STENCIL_BACK_FAIL = 0x8801;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_STENCIL_BACK_REF = 0x8CA3;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INT = 0x1404;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_UNSIGNED_INT = 0x1405;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_COMPONENT = 0x1902;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_FRAGMENT_SHADER = 0x8B30;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VERTEX_SHADER = 0x8B31;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_VERTEX_ATTRIBS = 0x8869;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_MAX_VARYING_VECTORS = 0x8DFC;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SHADER_TYPE = 0x8B4F;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_DELETE_STATUS = 0x8B80;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_LINK_STATUS = 0x8B82;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VALIDATE_STATUS = 0x8B83;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_ATTACHED_SHADERS = 0x8B85;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_ACTIVE_UNIFORMS = 0x8B86;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_ACTIVE_ATTRIBUTES = 0x8B89;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_CURRENT_PROGRAM = 0x8B8D;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_FLOAT_VEC2 = 0x8B50;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_FLOAT_VEC3 = 0x8B51;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_FLOAT_VEC4 = 0x8B52;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_INT_VEC2 = 0x8B53;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_INT_VEC3 = 0x8B54;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_INT_VEC4 = 0x8B55;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_BOOL = 0x8B56;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_BOOL_VEC2 = 0x8B57;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_BOOL_VEC3 = 0x8B58;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_BOOL_VEC4 = 0x8B59;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_FLOAT_MAT2 = 0x8B5A;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_FLOAT_MAT3 = 0x8B5B;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_FLOAT_MAT4 = 0x8B5C;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SAMPLER_2D = 0x8B5E;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SAMPLER_CUBE = 0x8B60;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_COMPILE_STATUS = 0x8B81;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_INFO_LOG_LENGTH = 0x8B84;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SHADER_SOURCE_LENGTH = 0x8B88;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_SHADER_COMPILER = 0x8DFA;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_PLATFORM_BINARY = 0x8D63;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_SHADER_BINARY_FORMATS = 0x8DF8;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_LOW_FLOAT = 0x8DF0;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_MEDIUM_FLOAT = 0x8DF1;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_HIGH_FLOAT = 0x8DF2;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_LOW_INT = 0x8DF3;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_MEDIUM_INT = 0x8DF4;
  /** Part of <code>GL_ES_VERSION_2_0</code> */
  public static final int GL_HIGH_INT = 0x8DF5;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL_INDEX = 0x1901;

  /** Interface to C language function: <br> <code> void {@native glAttachShader}(GLuint program, GLuint shader); </code>    */
  public void glAttachShader(int program, int shader);

  /** Interface to C language function: <br> <code> void {@native glBindAttribLocation}(GLuint program, GLuint index, const char *  name); </code>    */
  public void glBindAttribLocation(int program, int index, java.lang.String name);

  /** Interface to C language function: <br> <code> void {@native glBlendColor}(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha); </code>    */
  public void glBlendColor(float red, float green, float blue, float alpha);

  /** Interface to C language function: <br> <code> void {@native glCompileShader}(GLuint shader); </code>    */
  public void glCompileShader(int shader);

  /** Interface to C language function: <br> <code> GLuint {@native glCreateProgram}(void); </code>    */
  public int glCreateProgram();

  /** Interface to C language function: <br> <code> GLuint {@native glCreateShader}(GLenum type); </code>    */
  public int glCreateShader(int type);

  /** Interface to C language function: <br> <code> void {@native glDeleteProgram}(GLuint program); </code>    */
  public void glDeleteProgram(int program);

  /** Interface to C language function: <br> <code> void {@native glDeleteShader}(GLuint shader); </code>    */
  public void glDeleteShader(int shader);

  /** Interface to C language function: <br> <code> void {@native glDetachShader}(GLuint program, GLuint shader); </code>    */
  public void glDetachShader(int program, int shader);

  /** Interface to C language function: <br> <code> void {@native glDisableVertexAttribArray}(GLuint index); </code>    */
  public void glDisableVertexAttribArray(int index);

  /** Interface to C language function: <br> <code> void {@native glEnableVertexAttribArray}(GLuint index); </code>    */
  public void glEnableVertexAttribArray(int index);

  /** Interface to C language function: <br> <code> void {@native glGetActiveAttrib}(GLuint program, GLuint index, GLsizei bufsize, GLsizei *  length, GLint *  size, GLenum *  type, char *  name); </code>    */
  public void glGetActiveAttrib(int program, int index, int bufsize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, java.nio.ByteBuffer name);

  /** Interface to C language function: <br> <code> void {@native glGetActiveAttrib}(GLuint program, GLuint index, GLsizei bufsize, GLsizei *  length, GLint *  size, GLenum *  type, char *  name); </code>    */
  public void glGetActiveAttrib(int program, int index, int bufsize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Interface to C language function: <br> <code> void {@native glGetActiveUniform}(GLuint program, GLuint index, GLsizei bufsize, GLsizei *  length, GLint *  size, GLenum *  type, char *  name); </code>    */
  public void glGetActiveUniform(int program, int index, int bufsize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, java.nio.ByteBuffer name);

  /** Interface to C language function: <br> <code> void {@native glGetActiveUniform}(GLuint program, GLuint index, GLsizei bufsize, GLsizei *  length, GLint *  size, GLenum *  type, char *  name); </code>    */
  public void glGetActiveUniform(int program, int index, int bufsize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Interface to C language function: <br> <code> void {@native glGetAttachedShaders}(GLuint program, GLsizei maxcount, GLsizei *  count, GLuint *  shaders); </code>    */
  public void glGetAttachedShaders(int program, int maxcount, java.nio.IntBuffer count, java.nio.IntBuffer shaders);

  /** Interface to C language function: <br> <code> void {@native glGetAttachedShaders}(GLuint program, GLsizei maxcount, GLsizei *  count, GLuint *  shaders); </code>    */
  public void glGetAttachedShaders(int program, int maxcount, int[] count, int count_offset, int[] shaders, int shaders_offset);

  /** Interface to C language function: <br> <code> int {@native glGetAttribLocation}(GLuint program, const char *  name); </code>    */
  public int glGetAttribLocation(int program, java.lang.String name);

  /** Interface to C language function: <br> <code> void {@native glGetProgramInfoLog}(GLuint program, GLsizei bufsize, GLsizei *  length, char *  infolog); </code>    */
  public void glGetProgramInfoLog(int program, int bufsize, java.nio.IntBuffer length, java.nio.ByteBuffer infolog);

  /** Interface to C language function: <br> <code> void {@native glGetProgramInfoLog}(GLuint program, GLsizei bufsize, GLsizei *  length, char *  infolog); </code>    */
  public void glGetProgramInfoLog(int program, int bufsize, int[] length, int length_offset, byte[] infolog, int infolog_offset);

  /** Interface to C language function: <br> <code> void {@native glGetProgramiv}(GLuint program, GLenum pname, GLint *  params); </code>    */
  public void glGetProgramiv(int program, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetProgramiv}(GLuint program, GLenum pname, GLint *  params); </code>    */
  public void glGetProgramiv(int program, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetShaderInfoLog}(GLuint shader, GLsizei bufsize, GLsizei *  length, char *  infolog); </code>    */
  public void glGetShaderInfoLog(int shader, int bufsize, java.nio.IntBuffer length, java.nio.ByteBuffer infolog);

  /** Interface to C language function: <br> <code> void {@native glGetShaderInfoLog}(GLuint shader, GLsizei bufsize, GLsizei *  length, char *  infolog); </code>    */
  public void glGetShaderInfoLog(int shader, int bufsize, int[] length, int length_offset, byte[] infolog, int infolog_offset);

  /** Interface to C language function: <br> <code> void {@native glGetShaderSource}(GLuint shader, GLsizei bufsize, GLsizei *  length, char *  source); </code>    */
  public void glGetShaderSource(int shader, int bufsize, java.nio.IntBuffer length, java.nio.ByteBuffer source);

  /** Interface to C language function: <br> <code> void {@native glGetShaderSource}(GLuint shader, GLsizei bufsize, GLsizei *  length, char *  source); </code>    */
  public void glGetShaderSource(int shader, int bufsize, int[] length, int length_offset, byte[] source, int source_offset);

  /** Interface to C language function: <br> <code> void {@native glGetShaderiv}(GLuint shader, GLenum pname, GLint *  params); </code>    */
  public void glGetShaderiv(int shader, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetShaderiv}(GLuint shader, GLenum pname, GLint *  params); </code>    */
  public void glGetShaderiv(int shader, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> int {@native glGetUniformLocation}(GLuint program, const char *  name); </code>    */
  public int glGetUniformLocation(int program, java.lang.String name);

  /** Interface to C language function: <br> <code> void {@native glGetUniformfv}(GLuint program, GLint location, GLfloat *  params); </code>    */
  public void glGetUniformfv(int program, int location, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetUniformfv}(GLuint program, GLint location, GLfloat *  params); </code>    */
  public void glGetUniformfv(int program, int location, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetUniformiv}(GLuint program, GLint location, GLint *  params); </code>    */
  public void glGetUniformiv(int program, int location, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetUniformiv}(GLuint program, GLint location, GLint *  params); </code>    */
  public void glGetUniformiv(int program, int location, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetVertexAttribfv}(GLuint index, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVertexAttribfv(int index, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetVertexAttribfv}(GLuint index, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVertexAttribfv(int index, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetVertexAttribiv}(GLuint index, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribiv(int index, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetVertexAttribiv}(GLuint index, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribiv(int index, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> GLboolean {@native glIsProgram}(GLuint program); </code>    */
  public boolean glIsProgram(int program);

  /** Interface to C language function: <br> <code> GLboolean {@native glIsShader}(GLuint shader); </code>    */
  public boolean glIsShader(int shader);

  /** Interface to C language function: <br> <code> void {@native glLinkProgram}(GLuint program); </code>    */
  public void glLinkProgram(int program);

  /** Interface to C language function: <br> <code> void {@native glReleaseShaderCompiler}(void); </code>    */
  public void glReleaseShaderCompiler();

  /** Interface to C language function: <br> <code> void {@native glShaderBinary}(GLint n, const GLuint *  shaders, GLenum binaryformat, const void *  binary, GLint length); </code>    */
  public void glShaderBinary(int n, java.nio.IntBuffer shaders, int binaryformat, java.nio.Buffer binary, int length);

  /** Interface to C language function: <br> <code> void {@native glShaderBinary}(GLint n, const GLuint *  shaders, GLenum binaryformat, const void *  binary, GLint length); </code>    */
  public void glShaderBinary(int n, int[] shaders, int shaders_offset, int binaryformat, java.nio.Buffer binary, int length);

  /** Interface to C language function: <br> <code> void {@native glShaderSource}(GLuint shader, GLsizei count, const char *  *  string, const GLint *  length); </code>    */
  public void glShaderSource(int shader, int count, java.lang.String[] string, java.nio.IntBuffer length);

  /** Interface to C language function: <br> <code> void {@native glShaderSource}(GLuint shader, GLsizei count, const char *  *  string, const GLint *  length); </code>    */
  public void glShaderSource(int shader, int count, java.lang.String[] string, int[] length, int length_offset);

  /** Interface to C language function: <br> <code> void {@native glStencilFuncSeparate}(GLenum face, GLenum func, GLint ref, GLuint mask); </code>    */
  public void glStencilFuncSeparate(int face, int func, int ref, int mask);

  /** Interface to C language function: <br> <code> void {@native glStencilMaskSeparate}(GLenum face, GLuint mask); </code>    */
  public void glStencilMaskSeparate(int face, int mask);

  /** Interface to C language function: <br> <code> void {@native glStencilOpSeparate}(GLenum face, GLenum fail, GLenum zfail, GLenum zpass); </code>    */
  public void glStencilOpSeparate(int face, int fail, int zfail, int zpass);

  /** Interface to C language function: <br> <code> void {@native glUniform1f}(GLint location, GLfloat x); </code>    */
  public void glUniform1f(int location, float x);

  /** Interface to C language function: <br> <code> void {@native glUniform1fv}(GLint location, GLsizei count, const GLfloat *  v); </code>    */
  public void glUniform1fv(int location, int count, java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glUniform1fv}(GLint location, GLsizei count, const GLfloat *  v); </code>    */
  public void glUniform1fv(int location, int count, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glUniform1i}(GLint location, GLint x); </code>    */
  public void glUniform1i(int location, int x);

  /** Interface to C language function: <br> <code> void {@native glUniform1iv}(GLint location, GLsizei count, const GLint *  v); </code>    */
  public void glUniform1iv(int location, int count, java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glUniform1iv}(GLint location, GLsizei count, const GLint *  v); </code>    */
  public void glUniform1iv(int location, int count, int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glUniform2f}(GLint location, GLfloat x, GLfloat y); </code>    */
  public void glUniform2f(int location, float x, float y);

  /** Interface to C language function: <br> <code> void {@native glUniform2fv}(GLint location, GLsizei count, const GLfloat *  v); </code>    */
  public void glUniform2fv(int location, int count, java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glUniform2fv}(GLint location, GLsizei count, const GLfloat *  v); </code>    */
  public void glUniform2fv(int location, int count, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glUniform2i}(GLint location, GLint x, GLint y); </code>    */
  public void glUniform2i(int location, int x, int y);

  /** Interface to C language function: <br> <code> void {@native glUniform2iv}(GLint location, GLsizei count, const GLint *  v); </code>    */
  public void glUniform2iv(int location, int count, java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glUniform2iv}(GLint location, GLsizei count, const GLint *  v); </code>    */
  public void glUniform2iv(int location, int count, int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glUniform3f}(GLint location, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glUniform3f(int location, float x, float y, float z);

  /** Interface to C language function: <br> <code> void {@native glUniform3fv}(GLint location, GLsizei count, const GLfloat *  v); </code>    */
  public void glUniform3fv(int location, int count, java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glUniform3fv}(GLint location, GLsizei count, const GLfloat *  v); </code>    */
  public void glUniform3fv(int location, int count, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glUniform3i}(GLint location, GLint x, GLint y, GLint z); </code>    */
  public void glUniform3i(int location, int x, int y, int z);

  /** Interface to C language function: <br> <code> void {@native glUniform3iv}(GLint location, GLsizei count, const GLint *  v); </code>    */
  public void glUniform3iv(int location, int count, java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glUniform3iv}(GLint location, GLsizei count, const GLint *  v); </code>    */
  public void glUniform3iv(int location, int count, int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glUniform4f}(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glUniform4f(int location, float x, float y, float z, float w);

  /** Interface to C language function: <br> <code> void {@native glUniform4fv}(GLint location, GLsizei count, const GLfloat *  v); </code>    */
  public void glUniform4fv(int location, int count, java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glUniform4fv}(GLint location, GLsizei count, const GLfloat *  v); </code>    */
  public void glUniform4fv(int location, int count, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glUniform4i}(GLint location, GLint x, GLint y, GLint z, GLint w); </code>    */
  public void glUniform4i(int location, int x, int y, int z, int w);

  /** Interface to C language function: <br> <code> void {@native glUniform4iv}(GLint location, GLsizei count, const GLint *  v); </code>    */
  public void glUniform4iv(int location, int count, java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glUniform4iv}(GLint location, GLsizei count, const GLint *  v); </code>    */
  public void glUniform4iv(int location, int count, int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glUniformMatrix2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix2fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Interface to C language function: <br> <code> void {@native glUniformMatrix2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix2fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Interface to C language function: <br> <code> void {@native glUniformMatrix3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix3fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Interface to C language function: <br> <code> void {@native glUniformMatrix3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix3fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Interface to C language function: <br> <code> void {@native glUniformMatrix4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix4fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Interface to C language function: <br> <code> void {@native glUniformMatrix4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix4fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Interface to C language function: <br> <code> void {@native glUseProgram}(GLuint program); </code>    */
  public void glUseProgram(int program);

  /** Interface to C language function: <br> <code> void {@native glValidateProgram}(GLuint program); </code>    */
  public void glValidateProgram(int program);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib1f}(GLuint indx, GLfloat x); </code>    */
  public void glVertexAttrib1f(int indx, float x);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib1fv}(GLuint indx, const GLfloat *  values); </code>    */
  public void glVertexAttrib1fv(int indx, java.nio.FloatBuffer values);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib1fv}(GLuint indx, const GLfloat *  values); </code>    */
  public void glVertexAttrib1fv(int indx, float[] values, int values_offset);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib2f}(GLuint indx, GLfloat x, GLfloat y); </code>    */
  public void glVertexAttrib2f(int indx, float x, float y);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib2fv}(GLuint indx, const GLfloat *  values); </code>    */
  public void glVertexAttrib2fv(int indx, java.nio.FloatBuffer values);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib2fv}(GLuint indx, const GLfloat *  values); </code>    */
  public void glVertexAttrib2fv(int indx, float[] values, int values_offset);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib3f}(GLuint indx, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glVertexAttrib3f(int indx, float x, float y, float z);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib3fv}(GLuint indx, const GLfloat *  values); </code>    */
  public void glVertexAttrib3fv(int indx, java.nio.FloatBuffer values);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib3fv}(GLuint indx, const GLfloat *  values); </code>    */
  public void glVertexAttrib3fv(int indx, float[] values, int values_offset);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib4f}(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glVertexAttrib4f(int indx, float x, float y, float z, float w);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib4fv}(GLuint indx, const GLfloat *  values); </code>    */
  public void glVertexAttrib4fv(int indx, java.nio.FloatBuffer values);

  /** Interface to C language function: <br> <code> void {@native glVertexAttrib4fv}(GLuint indx, const GLfloat *  values); </code>    */
  public void glVertexAttrib4fv(int indx, float[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribPointer}(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *  ptr); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttribPointer(int indx, int size, int type, boolean normalized, int stride, java.nio.Buffer ptr);

  /** Entry point to C language function: <code> void {@native glVertexAttribPointer}(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *  ptr); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttribPointer(int indx, int size, int type, boolean normalized, int stride, long ptr_buffer_offset);


  // --- Begin CustomJavaCode .cfg declarations
 public void glClearDepth( double depth );
 public void glDepthRange(double zNear, double zFar);
  public void glVertexAttribPointer(GLArrayData array);
  public void glUniform(GLUniformData data);

  // ---- End CustomJavaCode .cfg declarations

} // end of class GL2ES2
