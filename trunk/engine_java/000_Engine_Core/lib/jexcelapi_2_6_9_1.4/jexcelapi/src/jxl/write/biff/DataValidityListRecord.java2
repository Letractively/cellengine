/*********************************************************************
*
*      Copyright (C) 2004 Andrew Khan
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***************************************************************************/

package jxl.write.biff;

import jxl.biff.DValParser;
import jxl.biff.Type;
import jxl.biff.WritableRecordData;


/**
 * Data validity settings
 */
class DataValidityListRecord extends WritableRecordData
{
  /**
   * The binary data
   */
  private byte[] data;

  /**
   * The dval parser
   */
  private DValParser dvalParser;

  /**
   * Constructor
   *
   * @param dvlr the record copied from a read only sheet
   */
  DataValidityListRecord(jxl.read.biff.DataValidityListRecord dvlr)
  {
    super(Type.DVAL);
    
    data = dvlr.getData();
  }

  /**
   * Constructor
   *
   * @param dvlr the record copied from a writable sheet
   */
  DataValidityListRecord(DataValidityListRecord dvlr)
  {
    super(Type.DVAL);
    
    data = new byte[dvlr.data.length];
    System.arraycopy(dvlr.data, 0, data, 0, data.length);
  }

  /**
   * Retrieves the data for output to binary file
   * 
   * @return the data to be written
   */
  public byte[] getData()
  {
    if (dvalParser == null)
    {
      return data;
    }

    return dvalParser.getData();
  }

  /**
   * Called when a remove row or column results in one of DV records being 
   * removed
   */
  void dvRemoved()
  {
    if (dvalParser == null)
    {
      dvalParser = new DValParser(data);
    }

    dvalParser.dvRemoved();
  }

  /**
   * Accessor for the number of DV records
   *
   * @return the number of DV records for this list
   */
  public boolean hasDVRecords()
  {
    if (dvalParser == null)
    {
      return true;
    }

    return dvalParser.getNumberOfDVRecords() > 0;
  }

}
